
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00003166  000031da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002628  00000000  00000000  000032f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011fd  00000000  00000000  00005918  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00006b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  00006c95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  00006e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  00008e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  00009fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000afdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  0000b43a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bd48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <main>
      7a:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e6       	ldi	r26, 0x64	; 100
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	84 e6       	ldi	r24, 0x64	; 100
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__fixsfsi+0x80>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__fixsfsi+0x80>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__fixsfsi+0x8a>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__fixsfsi+0x94>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__fixsfsi+0x80>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__fixsfsi+0x8a>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__fixsfsi+0x94>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__fixsfsi+0x68>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__fixsfsi+0x9c>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__fixsfsi+0x9c>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__fixsfsi+0x9c>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__fixsfsi+0x9c>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	e4 59       	subi	r30, 0x94	; 148
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit         (void)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
     c98:	ea e3       	ldi	r30, 0x3A	; 58
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	8e e0       	ldi	r24, 0x0E	; 14
     c9e:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
     ca0:	e7 e3       	ldi	r30, 0x37	; 55
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	8f e0       	ldi	r24, 0x0F	; 15
     ca6:	80 83       	st	Z, r24
						   DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
     ca8:	e4 e3       	ldi	r30, 0x34	; 52
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	87 e0       	ldi	r24, 0x07	; 7
     cae:	80 83       	st	Z, r24
						   DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
     cb0:	e1 e3       	ldi	r30, 0x31	; 49
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	8e ef       	ldi	r24, 0xFE	; 254
     cb6:	80 83       	st	Z, r24
						   DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);						   

	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
     cb8:	eb e3       	ldi	r30, 0x3B	; 59
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	8e ef       	ldi	r24, 0xFE	; 254
     cbe:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);
											                    
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
     cc0:	e8 e3       	ldi	r30, 0x38	; 56
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	10 82       	st	Z, r1
						   DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);
											 
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
     cc6:	e5 e3       	ldi	r30, 0x35	; 53
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1
						   DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);
											 
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
     ccc:	e2 e3       	ldi	r30, 0x32	; 50
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	10 82       	st	Z, r1
						   DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);
}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <DIO_u8SetPinDirection>:

u8  DIO_u8SetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinDirection)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	2e 97       	sbiw	r28, 0x0e	; 14
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	8a 83       	std	Y+2, r24	; 0x02
     cee:	6b 83       	std	Y+3, r22	; 0x03
     cf0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))		
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	08 f0       	brcs	.+2      	; 0xcfe <DIO_u8SetPinDirection+0x26>
     cfc:	0c c1       	rjmp	.+536    	; 0xf16 <DIO_u8SetPinDirection+0x23e>
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	88 30       	cpi	r24, 0x08	; 8
     d02:	08 f0       	brcs	.+2      	; 0xd06 <DIO_u8SetPinDirection+0x2e>
     d04:	08 c1       	rjmp	.+528    	; 0xf16 <DIO_u8SetPinDirection+0x23e>
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	21 f0       	breq	.+8      	; 0xd14 <DIO_u8SetPinDirection+0x3c>
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	88 23       	and	r24, r24
     d10:	09 f0       	breq	.+2      	; 0xd14 <DIO_u8SetPinDirection+0x3c>
     d12:	01 c1       	rjmp	.+514    	; 0xf16 <DIO_u8SetPinDirection+0x23e>
	{
		switch (Copy_u8PortId)
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	3e 87       	std	Y+14, r19	; 0x0e
     d1c:	2d 87       	std	Y+13, r18	; 0x0d
     d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d20:	9e 85       	ldd	r25, Y+14	; 0x0e
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	91 05       	cpc	r25, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <DIO_u8SetPinDirection+0x52>
     d28:	4f c0       	rjmp	.+158    	; 0xdc8 <DIO_u8SetPinDirection+0xf0>
     d2a:	2d 85       	ldd	r18, Y+13	; 0x0d
     d2c:	3e 85       	ldd	r19, Y+14	; 0x0e
     d2e:	22 30       	cpi	r18, 0x02	; 2
     d30:	31 05       	cpc	r19, r1
     d32:	2c f4       	brge	.+10     	; 0xd3e <DIO_u8SetPinDirection+0x66>
     d34:	8d 85       	ldd	r24, Y+13	; 0x0d
     d36:	9e 85       	ldd	r25, Y+14	; 0x0e
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	71 f0       	breq	.+28     	; 0xd58 <DIO_u8SetPinDirection+0x80>
     d3c:	ed c0       	rjmp	.+474    	; 0xf18 <DIO_u8SetPinDirection+0x240>
     d3e:	2d 85       	ldd	r18, Y+13	; 0x0d
     d40:	3e 85       	ldd	r19, Y+14	; 0x0e
     d42:	22 30       	cpi	r18, 0x02	; 2
     d44:	31 05       	cpc	r19, r1
     d46:	09 f4       	brne	.+2      	; 0xd4a <DIO_u8SetPinDirection+0x72>
     d48:	77 c0       	rjmp	.+238    	; 0xe38 <DIO_u8SetPinDirection+0x160>
     d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4e:	83 30       	cpi	r24, 0x03	; 3
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <DIO_u8SetPinDirection+0x7e>
     d54:	a9 c0       	rjmp	.+338    	; 0xea8 <DIO_u8SetPinDirection+0x1d0>
     d56:	e0 c0       	rjmp	.+448    	; 0xf18 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinDirection)
     d58:	8c 81       	ldd	r24, Y+4	; 0x04
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3c 87       	std	Y+12, r19	; 0x0c
     d60:	2b 87       	std	Y+11, r18	; 0x0b
     d62:	8b 85       	ldd	r24, Y+11	; 0x0b
     d64:	9c 85       	ldd	r25, Y+12	; 0x0c
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	d1 f0       	breq	.+52     	; 0xd9e <DIO_u8SetPinDirection+0xc6>
     d6a:	2b 85       	ldd	r18, Y+11	; 0x0b
     d6c:	3c 85       	ldd	r19, Y+12	; 0x0c
     d6e:	21 30       	cpi	r18, 0x01	; 1
     d70:	31 05       	cpc	r19, r1
     d72:	09 f0       	breq	.+2      	; 0xd76 <DIO_u8SetPinDirection+0x9e>
     d74:	d1 c0       	rjmp	.+418    	; 0xf18 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     d76:	aa e3       	ldi	r26, 0x3A	; 58
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	ea e3       	ldi	r30, 0x3A	; 58
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_u8SetPinDirection+0xbc>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_u8SetPinDirection+0xb8>
     d98:	84 2b       	or	r24, r20
     d9a:	8c 93       	st	X, r24
     d9c:	bd c0       	rjmp	.+378    	; 0xf18 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     d9e:	aa e3       	ldi	r26, 0x3A	; 58
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	ea e3       	ldi	r30, 0x3A	; 58
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	48 2f       	mov	r20, r24
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 2e       	mov	r0, r18
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <DIO_u8SetPinDirection+0xe4>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <DIO_u8SetPinDirection+0xe0>
     dc0:	80 95       	com	r24
     dc2:	84 23       	and	r24, r20
     dc4:	8c 93       	st	X, r24
     dc6:	a8 c0       	rjmp	.+336    	; 0xf18 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinDirection)
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	3a 87       	std	Y+10, r19	; 0x0a
     dd0:	29 87       	std	Y+9, r18	; 0x09
     dd2:	89 85       	ldd	r24, Y+9	; 0x09
     dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	d1 f0       	breq	.+52     	; 0xe0e <DIO_u8SetPinDirection+0x136>
     dda:	29 85       	ldd	r18, Y+9	; 0x09
     ddc:	3a 85       	ldd	r19, Y+10	; 0x0a
     dde:	21 30       	cpi	r18, 0x01	; 1
     de0:	31 05       	cpc	r19, r1
     de2:	09 f0       	breq	.+2      	; 0xde6 <DIO_u8SetPinDirection+0x10e>
     de4:	99 c0       	rjmp	.+306    	; 0xf18 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     de6:	a7 e3       	ldi	r26, 0x37	; 55
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e7 e3       	ldi	r30, 0x37	; 55
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_u8SetPinDirection+0x12c>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_u8SetPinDirection+0x128>
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	85 c0       	rjmp	.+266    	; 0xf18 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     e0e:	a7 e3       	ldi	r26, 0x37	; 55
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e7 e3       	ldi	r30, 0x37	; 55
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_u8SetPinDirection+0x154>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_u8SetPinDirection+0x150>
     e30:	80 95       	com	r24
     e32:	84 23       	and	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	70 c0       	rjmp	.+224    	; 0xf18 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinDirection)
     e38:	8c 81       	ldd	r24, Y+4	; 0x04
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	38 87       	std	Y+8, r19	; 0x08
     e40:	2f 83       	std	Y+7, r18	; 0x07
     e42:	8f 81       	ldd	r24, Y+7	; 0x07
     e44:	98 85       	ldd	r25, Y+8	; 0x08
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	d1 f0       	breq	.+52     	; 0xe7e <DIO_u8SetPinDirection+0x1a6>
     e4a:	2f 81       	ldd	r18, Y+7	; 0x07
     e4c:	38 85       	ldd	r19, Y+8	; 0x08
     e4e:	21 30       	cpi	r18, 0x01	; 1
     e50:	31 05       	cpc	r19, r1
     e52:	09 f0       	breq	.+2      	; 0xe56 <DIO_u8SetPinDirection+0x17e>
     e54:	61 c0       	rjmp	.+194    	; 0xf18 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e56:	a4 e3       	ldi	r26, 0x34	; 52
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e4 e3       	ldi	r30, 0x34	; 52
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_u8SetPinDirection+0x19c>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_u8SetPinDirection+0x198>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	4d c0       	rjmp	.+154    	; 0xf18 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e7e:	a4 e3       	ldi	r26, 0x34	; 52
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e4 e3       	ldi	r30, 0x34	; 52
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_u8SetPinDirection+0x1c4>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_u8SetPinDirection+0x1c0>
     ea0:	80 95       	com	r24
     ea2:	84 23       	and	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	38 c0       	rjmp	.+112    	; 0xf18 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinDirection)
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	3e 83       	std	Y+6, r19	; 0x06
     eb0:	2d 83       	std	Y+5, r18	; 0x05
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	c9 f0       	breq	.+50     	; 0xeec <DIO_u8SetPinDirection+0x214>
     eba:	2d 81       	ldd	r18, Y+5	; 0x05
     ebc:	3e 81       	ldd	r19, Y+6	; 0x06
     ebe:	21 30       	cpi	r18, 0x01	; 1
     ec0:	31 05       	cpc	r19, r1
     ec2:	51 f5       	brne	.+84     	; 0xf18 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     ec4:	a1 e3       	ldi	r26, 0x31	; 49
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e1 e3       	ldi	r30, 0x31	; 49
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_u8SetPinDirection+0x20a>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <DIO_u8SetPinDirection+0x206>
     ee6:	84 2b       	or	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	16 c0       	rjmp	.+44     	; 0xf18 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     eec:	a1 e3       	ldi	r26, 0x31	; 49
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e1 e3       	ldi	r30, 0x31	; 49
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_u8SetPinDirection+0x232>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_u8SetPinDirection+0x22e>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <DIO_u8SetPinDirection+0x240>
			break;			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f16:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
     f18:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1a:	2e 96       	adiw	r28, 0x0e	; 14
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <DIO_u8SetPinValue>:

u8  DIO_u8SetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinValue)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	2e 97       	sbiw	r28, 0x0e	; 14
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	8a 83       	std	Y+2, r24	; 0x02
     f42:	6b 83       	std	Y+3, r22	; 0x03
     f44:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	88 30       	cpi	r24, 0x08	; 8
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <DIO_u8SetPinValue+0x26>
     f50:	08 c1       	rjmp	.+528    	; 0x1162 <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3e 87       	std	Y+14, r19	; 0x0e
     f5a:	2d 87       	std	Y+13, r18	; 0x0d
     f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	91 05       	cpc	r25, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <DIO_u8SetPinValue+0x3c>
     f66:	50 c0       	rjmp	.+160    	; 0x1008 <DIO_u8SetPinValue+0xdc>
     f68:	2d 85       	ldd	r18, Y+13	; 0x0d
     f6a:	3e 85       	ldd	r19, Y+14	; 0x0e
     f6c:	22 30       	cpi	r18, 0x02	; 2
     f6e:	31 05       	cpc	r19, r1
     f70:	2c f4       	brge	.+10     	; 0xf7c <DIO_u8SetPinValue+0x50>
     f72:	8d 85       	ldd	r24, Y+13	; 0x0d
     f74:	9e 85       	ldd	r25, Y+14	; 0x0e
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	71 f0       	breq	.+28     	; 0xf96 <DIO_u8SetPinValue+0x6a>
     f7a:	f1 c0       	rjmp	.+482    	; 0x115e <DIO_u8SetPinValue+0x232>
     f7c:	2d 85       	ldd	r18, Y+13	; 0x0d
     f7e:	3e 85       	ldd	r19, Y+14	; 0x0e
     f80:	22 30       	cpi	r18, 0x02	; 2
     f82:	31 05       	cpc	r19, r1
     f84:	09 f4       	brne	.+2      	; 0xf88 <DIO_u8SetPinValue+0x5c>
     f86:	79 c0       	rjmp	.+242    	; 0x107a <DIO_u8SetPinValue+0x14e>
     f88:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8c:	83 30       	cpi	r24, 0x03	; 3
     f8e:	91 05       	cpc	r25, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <DIO_u8SetPinValue+0x68>
     f92:	ac c0       	rjmp	.+344    	; 0x10ec <DIO_u8SetPinValue+0x1c0>
     f94:	e4 c0       	rjmp	.+456    	; 0x115e <DIO_u8SetPinValue+0x232>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinValue)
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	3c 87       	std	Y+12, r19	; 0x0c
     f9e:	2b 87       	std	Y+11, r18	; 0x0b
     fa0:	8b 85       	ldd	r24, Y+11	; 0x0b
     fa2:	9c 85       	ldd	r25, Y+12	; 0x0c
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	c9 f0       	breq	.+50     	; 0xfda <DIO_u8SetPinValue+0xae>
     fa8:	2b 85       	ldd	r18, Y+11	; 0x0b
     faa:	3c 85       	ldd	r19, Y+12	; 0x0c
     fac:	21 30       	cpi	r18, 0x01	; 1
     fae:	31 05       	cpc	r19, r1
     fb0:	49 f5       	brne	.+82     	; 0x1004 <DIO_u8SetPinValue+0xd8>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fb2:	ab e3       	ldi	r26, 0x3B	; 59
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	eb e3       	ldi	r30, 0x3B	; 59
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_u8SetPinValue+0xa4>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_u8SetPinValue+0xa0>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	c5 c0       	rjmp	.+394    	; 0x1164 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fda:	ab e3       	ldi	r26, 0x3B	; 59
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	eb e3       	ldi	r30, 0x3B	; 59
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_u8SetPinValue+0xcc>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_u8SetPinValue+0xc8>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	b0 c0       	rjmp	.+352    	; 0x1164 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    1004:	19 82       	std	Y+1, r1	; 0x01
    1006:	ae c0       	rjmp	.+348    	; 0x1164 <DIO_u8SetPinValue+0x238>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinValue)
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	3a 87       	std	Y+10, r19	; 0x0a
    1010:	29 87       	std	Y+9, r18	; 0x09
    1012:	89 85       	ldd	r24, Y+9	; 0x09
    1014:	9a 85       	ldd	r25, Y+10	; 0x0a
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	c9 f0       	breq	.+50     	; 0x104c <DIO_u8SetPinValue+0x120>
    101a:	29 85       	ldd	r18, Y+9	; 0x09
    101c:	3a 85       	ldd	r19, Y+10	; 0x0a
    101e:	21 30       	cpi	r18, 0x01	; 1
    1020:	31 05       	cpc	r19, r1
    1022:	49 f5       	brne	.+82     	; 0x1076 <DIO_u8SetPinValue+0x14a>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1024:	a8 e3       	ldi	r26, 0x38	; 56
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e8 e3       	ldi	r30, 0x38	; 56
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO_u8SetPinValue+0x116>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <DIO_u8SetPinValue+0x112>
    1046:	84 2b       	or	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	8c c0       	rjmp	.+280    	; 0x1164 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    104c:	a8 e3       	ldi	r26, 0x38	; 56
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e8 e3       	ldi	r30, 0x38	; 56
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_u8SetPinValue+0x13e>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_u8SetPinValue+0x13a>
    106e:	80 95       	com	r24
    1070:	84 23       	and	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	77 c0       	rjmp	.+238    	; 0x1164 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    1076:	19 82       	std	Y+1, r1	; 0x01
    1078:	75 c0       	rjmp	.+234    	; 0x1164 <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinValue)
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	38 87       	std	Y+8, r19	; 0x08
    1082:	2f 83       	std	Y+7, r18	; 0x07
    1084:	8f 81       	ldd	r24, Y+7	; 0x07
    1086:	98 85       	ldd	r25, Y+8	; 0x08
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	c9 f0       	breq	.+50     	; 0x10be <DIO_u8SetPinValue+0x192>
    108c:	2f 81       	ldd	r18, Y+7	; 0x07
    108e:	38 85       	ldd	r19, Y+8	; 0x08
    1090:	21 30       	cpi	r18, 0x01	; 1
    1092:	31 05       	cpc	r19, r1
    1094:	49 f5       	brne	.+82     	; 0x10e8 <DIO_u8SetPinValue+0x1bc>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1096:	a5 e3       	ldi	r26, 0x35	; 53
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e5 e3       	ldi	r30, 0x35	; 53
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_u8SetPinValue+0x188>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_u8SetPinValue+0x184>
    10b8:	84 2b       	or	r24, r20
    10ba:	8c 93       	st	X, r24
    10bc:	53 c0       	rjmp	.+166    	; 0x1164 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10be:	a5 e3       	ldi	r26, 0x35	; 53
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e5 e3       	ldi	r30, 0x35	; 53
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_u8SetPinValue+0x1b0>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_u8SetPinValue+0x1ac>
    10e0:	80 95       	com	r24
    10e2:	84 23       	and	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	3e c0       	rjmp	.+124    	; 0x1164 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    10e8:	19 82       	std	Y+1, r1	; 0x01
    10ea:	3c c0       	rjmp	.+120    	; 0x1164 <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinValue)
    10ec:	8c 81       	ldd	r24, Y+4	; 0x04
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	3e 83       	std	Y+6, r19	; 0x06
    10f4:	2d 83       	std	Y+5, r18	; 0x05
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	c9 f0       	breq	.+50     	; 0x1130 <DIO_u8SetPinValue+0x204>
    10fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1100:	3e 81       	ldd	r19, Y+6	; 0x06
    1102:	21 30       	cpi	r18, 0x01	; 1
    1104:	31 05       	cpc	r19, r1
    1106:	49 f5       	brne	.+82     	; 0x115a <DIO_u8SetPinValue+0x22e>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1108:	a2 e3       	ldi	r26, 0x32	; 50
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e2 e3       	ldi	r30, 0x32	; 50
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_u8SetPinValue+0x1fa>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_u8SetPinValue+0x1f6>
    112a:	84 2b       	or	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	1a c0       	rjmp	.+52     	; 0x1164 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1130:	a2 e3       	ldi	r26, 0x32	; 50
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e2 e3       	ldi	r30, 0x32	; 50
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_u8SetPinValue+0x222>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_u8SetPinValue+0x21e>
    1152:	80 95       	com	r24
    1154:	84 23       	and	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	05 c0       	rjmp	.+10     	; 0x1164 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    115a:	19 82       	std	Y+1, r1	; 0x01
    115c:	03 c0       	rjmp	.+6      	; 0x1164 <DIO_u8SetPinValue+0x238>
				}		
			break;
			default :
				Local_u8ErrorState = STD_TYPES_NOK;
    115e:	19 82       	std	Y+1, r1	; 0x01
    1160:	01 c0       	rjmp	.+2      	; 0x1164 <DIO_u8SetPinValue+0x238>
		}
			
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1162:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1164:	89 81       	ldd	r24, Y+1	; 0x01
}
    1166:	2e 96       	adiw	r28, 0x0e	; 14
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <DIO_u8GetPinValue>:

u8  DIO_u8GetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 * Copy_pu8ReturnedPinValue)
{
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	28 97       	sbiw	r28, 0x08	; 8
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	8b 83       	std	Y+3, r24	; 0x03
    118e:	6c 83       	std	Y+4, r22	; 0x04
    1190:	5e 83       	std	Y+6, r21	; 0x06
    1192:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	84 30       	cpi	r24, 0x04	; 4
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <DIO_u8GetPinValue+0x28>
    119e:	9f c0       	rjmp	.+318    	; 0x12de <DIO_u8GetPinValue+0x166>
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	88 30       	cpi	r24, 0x08	; 8
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <DIO_u8GetPinValue+0x30>
    11a6:	9b c0       	rjmp	.+310    	; 0x12de <DIO_u8GetPinValue+0x166>
    11a8:	8d 81       	ldd	r24, Y+5	; 0x05
    11aa:	9e 81       	ldd	r25, Y+6	; 0x06
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <DIO_u8GetPinValue+0x3a>
    11b0:	96 c0       	rjmp	.+300    	; 0x12de <DIO_u8GetPinValue+0x166>
	{
		switch (Copy_u8PortId)
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	38 87       	std	Y+8, r19	; 0x08
    11ba:	2f 83       	std	Y+7, r18	; 0x07
    11bc:	4f 81       	ldd	r20, Y+7	; 0x07
    11be:	58 85       	ldd	r21, Y+8	; 0x08
    11c0:	41 30       	cpi	r20, 0x01	; 1
    11c2:	51 05       	cpc	r21, r1
    11c4:	a9 f1       	breq	.+106    	; 0x1230 <DIO_u8GetPinValue+0xb8>
    11c6:	8f 81       	ldd	r24, Y+7	; 0x07
    11c8:	98 85       	ldd	r25, Y+8	; 0x08
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	91 05       	cpc	r25, r1
    11ce:	34 f4       	brge	.+12     	; 0x11dc <DIO_u8GetPinValue+0x64>
    11d0:	2f 81       	ldd	r18, Y+7	; 0x07
    11d2:	38 85       	ldd	r19, Y+8	; 0x08
    11d4:	21 15       	cp	r18, r1
    11d6:	31 05       	cpc	r19, r1
    11d8:	71 f0       	breq	.+28     	; 0x11f6 <DIO_u8GetPinValue+0x7e>
    11da:	82 c0       	rjmp	.+260    	; 0x12e0 <DIO_u8GetPinValue+0x168>
    11dc:	4f 81       	ldd	r20, Y+7	; 0x07
    11de:	58 85       	ldd	r21, Y+8	; 0x08
    11e0:	42 30       	cpi	r20, 0x02	; 2
    11e2:	51 05       	cpc	r21, r1
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <DIO_u8GetPinValue+0x70>
    11e6:	41 c0       	rjmp	.+130    	; 0x126a <DIO_u8GetPinValue+0xf2>
    11e8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ea:	98 85       	ldd	r25, Y+8	; 0x08
    11ec:	83 30       	cpi	r24, 0x03	; 3
    11ee:	91 05       	cpc	r25, r1
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <DIO_u8GetPinValue+0x7c>
    11f2:	58 c0       	rjmp	.+176    	; 0x12a4 <DIO_u8GetPinValue+0x12c>
    11f4:	75 c0       	rjmp	.+234    	; 0x12e0 <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA:
				Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    11f6:	e9 e3       	ldi	r30, 0x39	; 57
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8c 81       	ldd	r24, Y+4	; 0x04
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a9 01       	movw	r20, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_u8GetPinValue+0x96>
    120a:	55 95       	asr	r21
    120c:	47 95       	ror	r20
    120e:	8a 95       	dec	r24
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_u8GetPinValue+0x92>
    1212:	ca 01       	movw	r24, r20
    1214:	81 70       	andi	r24, 0x01	; 1
    1216:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	88 23       	and	r24, r24
    121c:	21 f4       	brne	.+8      	; 0x1226 <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    121e:	ed 81       	ldd	r30, Y+5	; 0x05
    1220:	fe 81       	ldd	r31, Y+6	; 0x06
    1222:	10 82       	st	Z, r1
    1224:	5d c0       	rjmp	.+186    	; 0x12e0 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1226:	ed 81       	ldd	r30, Y+5	; 0x05
    1228:	fe 81       	ldd	r31, Y+6	; 0x06
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	80 83       	st	Z, r24
    122e:	58 c0       	rjmp	.+176    	; 0x12e0 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTB:
				Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    1230:	e6 e3       	ldi	r30, 0x36	; 54
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a9 01       	movw	r20, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_u8GetPinValue+0xd0>
    1244:	55 95       	asr	r21
    1246:	47 95       	ror	r20
    1248:	8a 95       	dec	r24
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_u8GetPinValue+0xcc>
    124c:	ca 01       	movw	r24, r20
    124e:	81 70       	andi	r24, 0x01	; 1
    1250:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	88 23       	and	r24, r24
    1256:	21 f4       	brne	.+8      	; 0x1260 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1258:	ed 81       	ldd	r30, Y+5	; 0x05
    125a:	fe 81       	ldd	r31, Y+6	; 0x06
    125c:	10 82       	st	Z, r1
    125e:	40 c0       	rjmp	.+128    	; 0x12e0 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1260:	ed 81       	ldd	r30, Y+5	; 0x05
    1262:	fe 81       	ldd	r31, Y+6	; 0x06
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	80 83       	st	Z, r24
    1268:	3b c0       	rjmp	.+118    	; 0x12e0 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTC:
				Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    126a:	e3 e3       	ldi	r30, 0x33	; 51
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	88 2f       	mov	r24, r24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a9 01       	movw	r20, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_u8GetPinValue+0x10a>
    127e:	55 95       	asr	r21
    1280:	47 95       	ror	r20
    1282:	8a 95       	dec	r24
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_u8GetPinValue+0x106>
    1286:	ca 01       	movw	r24, r20
    1288:	81 70       	andi	r24, 0x01	; 1
    128a:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	88 23       	and	r24, r24
    1290:	21 f4       	brne	.+8      	; 0x129a <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1292:	ed 81       	ldd	r30, Y+5	; 0x05
    1294:	fe 81       	ldd	r31, Y+6	; 0x06
    1296:	10 82       	st	Z, r1
    1298:	23 c0       	rjmp	.+70     	; 0x12e0 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    129a:	ed 81       	ldd	r30, Y+5	; 0x05
    129c:	fe 81       	ldd	r31, Y+6	; 0x06
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	80 83       	st	Z, r24
    12a2:	1e c0       	rjmp	.+60     	; 0x12e0 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTD:
				Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    12a4:	e0 e3       	ldi	r30, 0x30	; 48
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	a9 01       	movw	r20, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_u8GetPinValue+0x144>
    12b8:	55 95       	asr	r21
    12ba:	47 95       	ror	r20
    12bc:	8a 95       	dec	r24
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_u8GetPinValue+0x140>
    12c0:	ca 01       	movw	r24, r20
    12c2:	81 70       	andi	r24, 0x01	; 1
    12c4:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	88 23       	and	r24, r24
    12ca:	21 f4       	brne	.+8      	; 0x12d4 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12cc:	ed 81       	ldd	r30, Y+5	; 0x05
    12ce:	fe 81       	ldd	r31, Y+6	; 0x06
    12d0:	10 82       	st	Z, r1
    12d2:	06 c0       	rjmp	.+12     	; 0x12e0 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12d4:	ed 81       	ldd	r30, Y+5	; 0x05
    12d6:	fe 81       	ldd	r31, Y+6	; 0x06
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	80 83       	st	Z, r24
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <DIO_u8GetPinValue+0x168>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12de:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12e2:	28 96       	adiw	r28, 0x08	; 8
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <DIO_u8SetPortDirection>:

u8  DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	2d 97       	sbiw	r28, 0x0d	; 13
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	8a 83       	std	Y+2, r24	; 0x02
    130a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	21 f0       	breq	.+8      	; 0x131e <DIO_u8SetPortDirection+0x2a>
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	88 23       	and	r24, r24
    131a:	09 f0       	breq	.+2      	; 0x131e <DIO_u8SetPortDirection+0x2a>
    131c:	7f c0       	rjmp	.+254    	; 0x141c <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	3d 87       	std	Y+13, r19	; 0x0d
    1326:	2c 87       	std	Y+12, r18	; 0x0c
    1328:	8c 85       	ldd	r24, Y+12	; 0x0c
    132a:	9d 85       	ldd	r25, Y+13	; 0x0d
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	91 05       	cpc	r25, r1
    1330:	71 f1       	breq	.+92     	; 0x138e <DIO_u8SetPortDirection+0x9a>
    1332:	2c 85       	ldd	r18, Y+12	; 0x0c
    1334:	3d 85       	ldd	r19, Y+13	; 0x0d
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	2c f4       	brge	.+10     	; 0x1346 <DIO_u8SetPortDirection+0x52>
    133c:	8c 85       	ldd	r24, Y+12	; 0x0c
    133e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	69 f0       	breq	.+26     	; 0x135e <DIO_u8SetPortDirection+0x6a>
    1344:	69 c0       	rjmp	.+210    	; 0x1418 <DIO_u8SetPortDirection+0x124>
    1346:	2c 85       	ldd	r18, Y+12	; 0x0c
    1348:	3d 85       	ldd	r19, Y+13	; 0x0d
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	31 05       	cpc	r19, r1
    134e:	b1 f1       	breq	.+108    	; 0x13bc <DIO_u8SetPortDirection+0xc8>
    1350:	8c 85       	ldd	r24, Y+12	; 0x0c
    1352:	9d 85       	ldd	r25, Y+13	; 0x0d
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	91 05       	cpc	r25, r1
    1358:	09 f4       	brne	.+2      	; 0x135c <DIO_u8SetPortDirection+0x68>
    135a:	47 c0       	rjmp	.+142    	; 0x13ea <DIO_u8SetPortDirection+0xf6>
    135c:	5d c0       	rjmp	.+186    	; 0x1418 <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PortDirection)
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	3b 87       	std	Y+11, r19	; 0x0b
    1366:	2a 87       	std	Y+10, r18	; 0x0a
    1368:	8a 85       	ldd	r24, Y+10	; 0x0a
    136a:	9b 85       	ldd	r25, Y+11	; 0x0b
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	59 f0       	breq	.+22     	; 0x1386 <DIO_u8SetPortDirection+0x92>
    1370:	2a 85       	ldd	r18, Y+10	; 0x0a
    1372:	3b 85       	ldd	r19, Y+11	; 0x0b
    1374:	21 30       	cpi	r18, 0x01	; 1
    1376:	31 05       	cpc	r19, r1
    1378:	09 f0       	breq	.+2      	; 0x137c <DIO_u8SetPortDirection+0x88>
    137a:	51 c0       	rjmp	.+162    	; 0x141e <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xff;break;
    137c:	ea e3       	ldi	r30, 0x3A	; 58
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	8f ef       	ldi	r24, 0xFF	; 255
    1382:	80 83       	st	Z, r24
    1384:	4c c0       	rjmp	.+152    	; 0x141e <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break;
    1386:	ea e3       	ldi	r30, 0x3A	; 58
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	10 82       	st	Z, r1
    138c:	48 c0       	rjmp	.+144    	; 0x141e <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PortDirection)
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	39 87       	std	Y+9, r19	; 0x09
    1396:	28 87       	std	Y+8, r18	; 0x08
    1398:	88 85       	ldd	r24, Y+8	; 0x08
    139a:	99 85       	ldd	r25, Y+9	; 0x09
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	51 f0       	breq	.+20     	; 0x13b4 <DIO_u8SetPortDirection+0xc0>
    13a0:	28 85       	ldd	r18, Y+8	; 0x08
    13a2:	39 85       	ldd	r19, Y+9	; 0x09
    13a4:	21 30       	cpi	r18, 0x01	; 1
    13a6:	31 05       	cpc	r19, r1
    13a8:	d1 f5       	brne	.+116    	; 0x141e <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xff;break;
    13aa:	e7 e3       	ldi	r30, 0x37	; 55
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	8f ef       	ldi	r24, 0xFF	; 255
    13b0:	80 83       	st	Z, r24
    13b2:	35 c0       	rjmp	.+106    	; 0x141e <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break;
    13b4:	e7 e3       	ldi	r30, 0x37	; 55
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	10 82       	st	Z, r1
    13ba:	31 c0       	rjmp	.+98     	; 0x141e <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PortDirection)
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	3f 83       	std	Y+7, r19	; 0x07
    13c4:	2e 83       	std	Y+6, r18	; 0x06
    13c6:	8e 81       	ldd	r24, Y+6	; 0x06
    13c8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	51 f0       	breq	.+20     	; 0x13e2 <DIO_u8SetPortDirection+0xee>
    13ce:	2e 81       	ldd	r18, Y+6	; 0x06
    13d0:	3f 81       	ldd	r19, Y+7	; 0x07
    13d2:	21 30       	cpi	r18, 0x01	; 1
    13d4:	31 05       	cpc	r19, r1
    13d6:	19 f5       	brne	.+70     	; 0x141e <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xff;break;
    13d8:	e4 e3       	ldi	r30, 0x34	; 52
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	8f ef       	ldi	r24, 0xFF	; 255
    13de:	80 83       	st	Z, r24
    13e0:	1e c0       	rjmp	.+60     	; 0x141e <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break;
    13e2:	e4 e3       	ldi	r30, 0x34	; 52
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	10 82       	st	Z, r1
    13e8:	1a c0       	rjmp	.+52     	; 0x141e <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PortDirection)
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	3d 83       	std	Y+5, r19	; 0x05
    13f2:	2c 83       	std	Y+4, r18	; 0x04
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9d 81       	ldd	r25, Y+5	; 0x05
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	51 f0       	breq	.+20     	; 0x1410 <DIO_u8SetPortDirection+0x11c>
    13fc:	2c 81       	ldd	r18, Y+4	; 0x04
    13fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1400:	21 30       	cpi	r18, 0x01	; 1
    1402:	31 05       	cpc	r19, r1
    1404:	61 f4       	brne	.+24     	; 0x141e <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xff;break;
    1406:	e1 e3       	ldi	r30, 0x31	; 49
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	8f ef       	ldi	r24, 0xFF	; 255
    140c:	80 83       	st	Z, r24
    140e:	07 c0       	rjmp	.+14     	; 0x141e <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break;
    1410:	e1 e3       	ldi	r30, 0x31	; 49
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	10 82       	st	Z, r1
    1416:	03 c0       	rjmp	.+6      	; 0x141e <DIO_u8SetPortDirection+0x12a>
				}
			break;
			default :Local_u8ErrorState = STD_TYPES_NOK;
    1418:	19 82       	std	Y+1, r1	; 0x01
    141a:	01 c0       	rjmp	.+2      	; 0x141e <DIO_u8SetPortDirection+0x12a>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    141c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    141e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1420:	2d 96       	adiw	r28, 0x0d	; 13
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <DIO_u8SetPortValue>:

u8  DIO_u8SetPortValue    (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <DIO_u8SetPortValue+0x6>
    1438:	00 d0       	rcall	.+0      	; 0x143a <DIO_u8SetPortValue+0x8>
    143a:	0f 92       	push	r0
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	8a 83       	std	Y+2, r24	; 0x02
    1442:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	3d 83       	std	Y+5, r19	; 0x05
    1450:	2c 83       	std	Y+4, r18	; 0x04
    1452:	8c 81       	ldd	r24, Y+4	; 0x04
    1454:	9d 81       	ldd	r25, Y+5	; 0x05
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	91 05       	cpc	r25, r1
    145a:	d1 f0       	breq	.+52     	; 0x1490 <DIO_u8SetPortValue+0x5e>
    145c:	2c 81       	ldd	r18, Y+4	; 0x04
    145e:	3d 81       	ldd	r19, Y+5	; 0x05
    1460:	22 30       	cpi	r18, 0x02	; 2
    1462:	31 05       	cpc	r19, r1
    1464:	2c f4       	brge	.+10     	; 0x1470 <DIO_u8SetPortValue+0x3e>
    1466:	8c 81       	ldd	r24, Y+4	; 0x04
    1468:	9d 81       	ldd	r25, Y+5	; 0x05
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	61 f0       	breq	.+24     	; 0x1486 <DIO_u8SetPortValue+0x54>
    146e:	1f c0       	rjmp	.+62     	; 0x14ae <DIO_u8SetPortValue+0x7c>
    1470:	2c 81       	ldd	r18, Y+4	; 0x04
    1472:	3d 81       	ldd	r19, Y+5	; 0x05
    1474:	22 30       	cpi	r18, 0x02	; 2
    1476:	31 05       	cpc	r19, r1
    1478:	81 f0       	breq	.+32     	; 0x149a <DIO_u8SetPortValue+0x68>
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	91 05       	cpc	r25, r1
    1482:	81 f0       	breq	.+32     	; 0x14a4 <DIO_u8SetPortValue+0x72>
    1484:	14 c0       	rjmp	.+40     	; 0x14ae <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    1486:	eb e3       	ldi	r30, 0x3B	; 59
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	80 83       	st	Z, r24
    148e:	10 c0       	rjmp	.+32     	; 0x14b0 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    1490:	e8 e3       	ldi	r30, 0x38	; 56
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	80 83       	st	Z, r24
    1498:	0b c0       	rjmp	.+22     	; 0x14b0 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    149a:	e5 e3       	ldi	r30, 0x35	; 53
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	80 83       	st	Z, r24
    14a2:	06 c0       	rjmp	.+12     	; 0x14b0 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    14a4:	e2 e3       	ldi	r30, 0x32	; 50
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	80 83       	st	Z, r24
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState = STD_TYPES_NOK;
    14ae:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <DIO_u8GetPortValue>:

u8  DIO_u8GetPortValue    (u8 Copy_u8PortId, u8 * Copy_pu8ReturnedPortValue)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <DIO_u8GetPortValue+0x6>
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <DIO_u8GetPortValue+0x8>
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <DIO_u8GetPortValue+0xa>
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	8a 83       	std	Y+2, r24	; 0x02
    14d2:	7c 83       	std	Y+4, r23	; 0x04
    14d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_pu8ReturnedPortValue != NULL)
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	e9 f1       	breq	.+122    	; 0x155c <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	3e 83       	std	Y+6, r19	; 0x06
    14ea:	2d 83       	std	Y+5, r18	; 0x05
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	91 05       	cpc	r25, r1
    14f4:	e1 f0       	breq	.+56     	; 0x152e <DIO_u8GetPortValue+0x6c>
    14f6:	2d 81       	ldd	r18, Y+5	; 0x05
    14f8:	3e 81       	ldd	r19, Y+6	; 0x06
    14fa:	22 30       	cpi	r18, 0x02	; 2
    14fc:	31 05       	cpc	r19, r1
    14fe:	2c f4       	brge	.+10     	; 0x150a <DIO_u8GetPortValue+0x48>
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	9e 81       	ldd	r25, Y+6	; 0x06
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	61 f0       	breq	.+24     	; 0x1520 <DIO_u8GetPortValue+0x5e>
    1508:	27 c0       	rjmp	.+78     	; 0x1558 <DIO_u8GetPortValue+0x96>
    150a:	2d 81       	ldd	r18, Y+5	; 0x05
    150c:	3e 81       	ldd	r19, Y+6	; 0x06
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	a1 f0       	breq	.+40     	; 0x153c <DIO_u8GetPortValue+0x7a>
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	91 05       	cpc	r25, r1
    151c:	b1 f0       	breq	.+44     	; 0x154a <DIO_u8GetPortValue+0x88>
    151e:	1c c0       	rjmp	.+56     	; 0x1558 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    1520:	e9 e3       	ldi	r30, 0x39	; 57
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	eb 81       	ldd	r30, Y+3	; 0x03
    1528:	fc 81       	ldd	r31, Y+4	; 0x04
    152a:	80 83       	st	Z, r24
    152c:	18 c0       	rjmp	.+48     	; 0x155e <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    152e:	e6 e3       	ldi	r30, 0x36	; 54
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	eb 81       	ldd	r30, Y+3	; 0x03
    1536:	fc 81       	ldd	r31, Y+4	; 0x04
    1538:	80 83       	st	Z, r24
    153a:	11 c0       	rjmp	.+34     	; 0x155e <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    153c:	e3 e3       	ldi	r30, 0x33	; 51
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	eb 81       	ldd	r30, Y+3	; 0x03
    1544:	fc 81       	ldd	r31, Y+4	; 0x04
    1546:	80 83       	st	Z, r24
    1548:	0a c0       	rjmp	.+20     	; 0x155e <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    154a:	e0 e3       	ldi	r30, 0x30	; 48
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	eb 81       	ldd	r30, Y+3	; 0x03
    1552:	fc 81       	ldd	r31, Y+4	; 0x04
    1554:	80 83       	st	Z, r24
    1556:	03 c0       	rjmp	.+6      	; 0x155e <DIO_u8GetPortValue+0x9c>
			default : Local_u8ErrorState = STD_TYPES_NOK;
    1558:	19 82       	std	Y+1, r1	; 0x01
    155a:	01 c0       	rjmp	.+2      	; 0x155e <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    155c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	26 96       	adiw	r28, 0x06	; 6
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <EEPROM_u8WriteDataByte>:


/*0b01010A2A1A0*/

u8 EEPROM_u8WriteDataByte(u16 Copy_u16ByteAddress, u8 Copy_u8Data)
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	00 d0       	rcall	.+0      	; 0x1578 <EEPROM_u8WriteDataByte+0x6>
    1578:	00 d0       	rcall	.+0      	; 0x157a <EEPROM_u8WriteDataByte+0x8>
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	9b 83       	std	Y+3, r25	; 0x03
    1580:	8a 83       	std	Y+2, r24	; 0x02
    1582:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ReturnState = 1;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	89 83       	std	Y+1, r24	; 0x01
	/* Start Condition */
	I2C_enuSendStartCondition();
    1588:	0e 94 55 0b 	call	0x16aa	; 0x16aa <I2C_enuSendStartCondition>

	/* Slave Add With Write Operation */
	I2C_enuSendSlaveAddWithWrite( ((EEPROM_FIXED_ADDRESS) |(EEPROM_A2_VALUE<<2) |((Copy_u16ByteAddress >> 8) & 3)) );
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	9b 81       	ldd	r25, Y+3	; 0x03
    1590:	89 2f       	mov	r24, r25
    1592:	99 27       	eor	r25, r25
    1594:	83 70       	andi	r24, 0x03	; 3
    1596:	80 65       	ori	r24, 0x50	; 80
    1598:	0e 94 a9 0b 	call	0x1752	; 0x1752 <I2C_enuSendSlaveAddWithWrite>

	/* Send The Rest of the Byte Address */
	I2C_enuMasterSendDataByte((u8)Copy_u16ByteAddress);
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	0e 94 19 0c 	call	0x1832	; 0x1832 <I2C_enuMasterSendDataByte>

	/* Send The Data Byte */
	I2C_enuMasterSendDataByte(Copy_u8Data);
    15a2:	8c 81       	ldd	r24, Y+4	; 0x04
    15a4:	0e 94 19 0c 	call	0x1832	; 0x1832 <I2C_enuMasterSendDataByte>

	/* Stop Condition */
	I2C_voidSendStopCondition();
    15a8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <I2C_voidSendStopCondition>

	return Local_u8ReturnState;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16ByteAddress, u8 * Copy_pu8ReturnData)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <EEPROM_u8ReadDataByte+0x6>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <EEPROM_u8ReadDataByte+0x8>
    15c4:	0f 92       	push	r0
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	9b 83       	std	Y+3, r25	; 0x03
    15cc:	8a 83       	std	Y+2, r24	; 0x02
    15ce:	7d 83       	std	Y+5, r23	; 0x05
    15d0:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ReturnState = 1;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	89 83       	std	Y+1, r24	; 0x01

	/* Start Condition */
	I2C_enuSendStartCondition();
    15d6:	0e 94 55 0b 	call	0x16aa	; 0x16aa <I2C_enuSendStartCondition>
	/* Slave Add With Write Operation */
	I2C_enuSendSlaveAddWithWrite( ((EEPROM_FIXED_ADDRESS) |(EEPROM_A2_VALUE<<2) |((Copy_u16ByteAddress >> 8) & 3)) );
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	9b 81       	ldd	r25, Y+3	; 0x03
    15de:	89 2f       	mov	r24, r25
    15e0:	99 27       	eor	r25, r25
    15e2:	83 70       	andi	r24, 0x03	; 3
    15e4:	80 65       	ori	r24, 0x50	; 80
    15e6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <I2C_enuSendSlaveAddWithWrite>
	/* Send The Rest of the Byte Address */
	I2C_enuMasterSendDataByte((u8)Copy_u16ByteAddress);
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	0e 94 19 0c 	call	0x1832	; 0x1832 <I2C_enuMasterSendDataByte>

	/* Repeated Start Condition */
	I2C_enuSendRepeatedStartCondition();
    15f0:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <I2C_enuSendRepeatedStartCondition>
	/* Slave Add With Read Operation */
	I2C_enuSendSlaveAddWithRead( ((EEPROM_FIXED_ADDRESS) |(EEPROM_A2_VALUE<<2) |((Copy_u16ByteAddress >> 8) & 3)) );
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	9b 81       	ldd	r25, Y+3	; 0x03
    15f8:	89 2f       	mov	r24, r25
    15fa:	99 27       	eor	r25, r25
    15fc:	83 70       	andi	r24, 0x03	; 3
    15fe:	80 65       	ori	r24, 0x50	; 80
    1600:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <I2C_enuSendSlaveAddWithRead>

	/* Read Data */
	I2C_enuMasterReadDataByte(Copy_pu8ReturnData);
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	9d 81       	ldd	r25, Y+5	; 0x05
    1608:	0e 94 42 0c 	call	0x1884	; 0x1884 <I2C_enuMasterReadDataByte>

	/* Stop Condition */
	I2C_voidSendStopCondition();
    160c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <I2C_voidSendStopCondition>

	return Local_u8ReturnState;
    1610:	89 81       	ldd	r24, Y+1	; 0x01
}
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <I2C_voidMasterInit>:
#include "I2C_interface.h"
#include "I2C_private.h"
#include "I2C_config.h"
#include "I2C_reg.h"
void I2C_voidMasterInit(void)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
	//Set Prescalar Value 0
	CLR_BIT(TWSR,TWSR_TWPS0);
    162a:	a1 e2       	ldi	r26, 0x21	; 33
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e1 e2       	ldi	r30, 0x21	; 33
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	8e 7f       	andi	r24, 0xFE	; 254
    1636:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS1);
    1638:	a1 e2       	ldi	r26, 0x21	; 33
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e1 e2       	ldi	r30, 0x21	; 33
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	8d 7f       	andi	r24, 0xFD	; 253
    1644:	8c 93       	st	X, r24
	//CLK 400kHZ
	TWBR = 32;
    1646:	e0 e2       	ldi	r30, 0x20	; 32
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 e2       	ldi	r24, 0x20	; 32
    164c:	80 83       	st	Z, r24

	//Enable Ack
	SET_BIT(TWCR,TWCR_TWEA);
    164e:	a6 e5       	ldi	r26, 0x56	; 86
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e6 e5       	ldi	r30, 0x56	; 86
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	80 64       	ori	r24, 0x40	; 64
    165a:	8c 93       	st	X, r24
	//Enable I2C Peripheral
	SET_BIT(TWCR,TWCR_TWEN);
    165c:	a6 e5       	ldi	r26, 0x56	; 86
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e6 e5       	ldi	r30, 0x56	; 86
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	84 60       	ori	r24, 0x04	; 4
    1668:	8c 93       	st	X, r24
}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <I2C_voidSlaveInit>:

void I2C_voidSlaveInit(u8 Copy_u8Address)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	0f 92       	push	r0
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	89 83       	std	Y+1, r24	; 0x01
	TWAR = Copy_u8Address<<1;
    167c:	e2 e2       	ldi	r30, 0x22	; 34
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	88 0f       	add	r24, r24
    1684:	80 83       	st	Z, r24

	//Enable Ack
	SET_BIT(TWCR,TWCR_TWEA);
    1686:	a6 e5       	ldi	r26, 0x56	; 86
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e6 e5       	ldi	r30, 0x56	; 86
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	80 64       	ori	r24, 0x40	; 64
    1692:	8c 93       	st	X, r24
	//Enable I2C Peripheral
	SET_BIT(TWCR,TWCR_TWEN);
    1694:	a6 e5       	ldi	r26, 0x56	; 86
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e6 e5       	ldi	r30, 0x56	; 86
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	84 60       	ori	r24, 0x04	; 4
    16a0:	8c 93       	st	X, r24

}
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <I2C_enuSendStartCondition>:

I2C_Error_State I2C_enuSendStartCondition(void)
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	0f 92       	push	r0
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
	I2C_Error_State Local_enuReturnState = I2C_Ok;
    16b4:	19 82       	std	Y+1, r1	; 0x01

	/* Send Start Condition */
	SET_BIT(TWCR,TWCR_TWSTA);
    16b6:	a6 e5       	ldi	r26, 0x56	; 86
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e6 e5       	ldi	r30, 0x56	; 86
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	80 62       	ori	r24, 0x20	; 32
    16c2:	8c 93       	st	X, r24

	/* Clear Flag */
	SET_BIT(TWCR,TWCR_TWINT);
    16c4:	a6 e5       	ldi	r26, 0x56	; 86
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e6 e5       	ldi	r30, 0x56	; 86
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	80 68       	ori	r24, 0x80	; 128
    16d0:	8c 93       	st	X, r24

	/* Polling on The Flag */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    16d2:	e6 e5       	ldi	r30, 0x56	; 86
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	88 23       	and	r24, r24
    16da:	dc f7       	brge	.-10     	; 0x16d2 <I2C_enuSendStartCondition+0x28>

	/* Check on ACK */
	if((TWSR & 0xF8) != I2C_SC_ACK)
    16dc:	e1 e2       	ldi	r30, 0x21	; 33
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	88 7f       	andi	r24, 0xF8	; 248
    16e8:	90 70       	andi	r25, 0x00	; 0
    16ea:	88 30       	cpi	r24, 0x08	; 8
    16ec:	91 05       	cpc	r25, r1
    16ee:	11 f0       	breq	.+4      	; 0x16f4 <I2C_enuSendStartCondition+0x4a>
	{
		Local_enuReturnState = I2C_SC_Error;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuReturnState;
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <I2C_enuSendRepeatedStartCondition>:

I2C_Error_State I2C_enuSendRepeatedStartCondition(void)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	0f 92       	push	r0
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
	I2C_Error_State Local_enuReturnState = I2C_Ok;
    1708:	19 82       	std	Y+1, r1	; 0x01

	/* Send Start Condition */
	SET_BIT(TWCR,TWCR_TWSTA);
    170a:	a6 e5       	ldi	r26, 0x56	; 86
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e6 e5       	ldi	r30, 0x56	; 86
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	80 62       	ori	r24, 0x20	; 32
    1716:	8c 93       	st	X, r24

	/* Clear Flag */
	SET_BIT(TWCR,TWCR_TWINT);
    1718:	a6 e5       	ldi	r26, 0x56	; 86
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e6 e5       	ldi	r30, 0x56	; 86
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	80 68       	ori	r24, 0x80	; 128
    1724:	8c 93       	st	X, r24

	/* Polling on The Flag */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    1726:	e6 e5       	ldi	r30, 0x56	; 86
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	88 23       	and	r24, r24
    172e:	dc f7       	brge	.-10     	; 0x1726 <I2C_enuSendRepeatedStartCondition+0x28>

	/* Check on ACK */
	if((TWSR & 0xF8) != I2C_RSC_ACK)
    1730:	e1 e2       	ldi	r30, 0x21	; 33
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	88 2f       	mov	r24, r24
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	88 7f       	andi	r24, 0xF8	; 248
    173c:	90 70       	andi	r25, 0x00	; 0
    173e:	80 31       	cpi	r24, 0x10	; 16
    1740:	91 05       	cpc	r25, r1
    1742:	11 f0       	breq	.+4      	; 0x1748 <I2C_enuSendRepeatedStartCondition+0x4a>
	{
		Local_enuReturnState = I2C_RSC_Error;
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuReturnState;
    1748:	89 81       	ldd	r24, Y+1	; 0x01
}
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <I2C_enuSendSlaveAddWithWrite>:

I2C_Error_State I2C_enuSendSlaveAddWithWrite(u8 Copy_u8SlaveAdd)     /*0b01011000*/
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	00 d0       	rcall	.+0      	; 0x1758 <I2C_enuSendSlaveAddWithWrite+0x6>
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State Local_enuReturnState = I2C_Ok;
    175e:	19 82       	std	Y+1, r1	; 0x01

	TWDR = Copy_u8SlaveAdd<<1;
    1760:	e3 e2       	ldi	r30, 0x23	; 35
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	88 0f       	add	r24, r24
    1768:	80 83       	st	Z, r24

	/* Write operation */
	CLR_BIT(TWDR,0);
    176a:	a3 e2       	ldi	r26, 0x23	; 35
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e3 e2       	ldi	r30, 0x23	; 35
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	8e 7f       	andi	r24, 0xFE	; 254
    1776:	8c 93       	st	X, r24

	/* Clear Start Condition Bit */
	CLR_BIT(TWCR,TWCR_TWSTA);
    1778:	a6 e5       	ldi	r26, 0x56	; 86
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e6 e5       	ldi	r30, 0x56	; 86
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	8f 7d       	andi	r24, 0xDF	; 223
    1784:	8c 93       	st	X, r24

	/* Clear Flag */
	SET_BIT(TWCR,TWCR_TWINT);
    1786:	a6 e5       	ldi	r26, 0x56	; 86
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e6 e5       	ldi	r30, 0x56	; 86
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	80 68       	ori	r24, 0x80	; 128
    1792:	8c 93       	st	X, r24

	/* Polling on The Flag */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    1794:	e6 e5       	ldi	r30, 0x56	; 86
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	88 23       	and	r24, r24
    179c:	dc f7       	brge	.-10     	; 0x1794 <I2C_enuSendSlaveAddWithWrite+0x42>

	/* Check on ACK */
	if((TWSR & 0xF8) != I2C_MT_SLA_W_ACK)
    179e:	e1 e2       	ldi	r30, 0x21	; 33
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	88 7f       	andi	r24, 0xF8	; 248
    17aa:	90 70       	andi	r25, 0x00	; 0
    17ac:	88 31       	cpi	r24, 0x18	; 24
    17ae:	91 05       	cpc	r25, r1
    17b0:	11 f0       	breq	.+4      	; 0x17b6 <I2C_enuSendSlaveAddWithWrite+0x64>
	{
		Local_enuReturnState = I2C_MT_SLA_W_Error;
    17b2:	83 e0       	ldi	r24, 0x03	; 3
    17b4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuReturnState;
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <I2C_enuSendSlaveAddWithRead>:

I2C_Error_State I2C_enuSendSlaveAddWithRead(u8 Copy_u8SlaveAdd)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <I2C_enuSendSlaveAddWithRead+0x6>
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State Local_enuReturnState = I2C_Ok;
    17ce:	19 82       	std	Y+1, r1	; 0x01

	TWDR = Copy_u8SlaveAdd<<1;
    17d0:	e3 e2       	ldi	r30, 0x23	; 35
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	88 0f       	add	r24, r24
    17d8:	80 83       	st	Z, r24

	/* Write operation */
	SET_BIT(TWDR,0);
    17da:	a3 e2       	ldi	r26, 0x23	; 35
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e3 e2       	ldi	r30, 0x23	; 35
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	81 60       	ori	r24, 0x01	; 1
    17e6:	8c 93       	st	X, r24

	/* Clear Start Condition Bit */
	CLR_BIT(TWCR,TWCR_TWSTA);
    17e8:	a6 e5       	ldi	r26, 0x56	; 86
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e6 e5       	ldi	r30, 0x56	; 86
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	8f 7d       	andi	r24, 0xDF	; 223
    17f4:	8c 93       	st	X, r24

	/* Clear Flag */
	SET_BIT(TWCR,TWCR_TWINT);
    17f6:	a6 e5       	ldi	r26, 0x56	; 86
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e6 e5       	ldi	r30, 0x56	; 86
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	80 68       	ori	r24, 0x80	; 128
    1802:	8c 93       	st	X, r24

	/* Polling on The Flag */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    1804:	e6 e5       	ldi	r30, 0x56	; 86
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	88 23       	and	r24, r24
    180c:	dc f7       	brge	.-10     	; 0x1804 <I2C_enuSendSlaveAddWithRead+0x42>

	/* Check on ACK */
	if((TWSR & 0xF8) != I2C_MR_SLA_R_ACK)
    180e:	e1 e2       	ldi	r30, 0x21	; 33
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	88 7f       	andi	r24, 0xF8	; 248
    181a:	90 70       	andi	r25, 0x00	; 0
    181c:	80 34       	cpi	r24, 0x40	; 64
    181e:	91 05       	cpc	r25, r1
    1820:	11 f0       	breq	.+4      	; 0x1826 <I2C_enuSendSlaveAddWithRead+0x64>
	{
		Local_enuReturnState = I2C_MR_SLA_R_Error;
    1822:	84 e0       	ldi	r24, 0x04	; 4
    1824:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuReturnState;
    1826:	89 81       	ldd	r24, Y+1	; 0x01

}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <I2C_enuMasterSendDataByte>:

I2C_Error_State I2C_enuMasterSendDataByte(u8 Copy_u8Data)
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	00 d0       	rcall	.+0      	; 0x1838 <I2C_enuMasterSendDataByte+0x6>
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State Local_enuReturnState = I2C_Ok;
    183e:	19 82       	std	Y+1, r1	; 0x01
	TWDR = Copy_u8Data;
    1840:	e3 e2       	ldi	r30, 0x23	; 35
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	80 83       	st	Z, r24

	/* Clear Flag */
	SET_BIT(TWCR,TWCR_TWINT);
    1848:	a6 e5       	ldi	r26, 0x56	; 86
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e6 e5       	ldi	r30, 0x56	; 86
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	80 68       	ori	r24, 0x80	; 128
    1854:	8c 93       	st	X, r24

	/* Polling on The Flag */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    1856:	e6 e5       	ldi	r30, 0x56	; 86
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	88 23       	and	r24, r24
    185e:	dc f7       	brge	.-10     	; 0x1856 <I2C_enuMasterSendDataByte+0x24>

	/* Check on ACK */
	if((TWSR & 0xF8) != I2C_MT_DATA_ACK)
    1860:	e1 e2       	ldi	r30, 0x21	; 33
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	88 2f       	mov	r24, r24
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	88 7f       	andi	r24, 0xF8	; 248
    186c:	90 70       	andi	r25, 0x00	; 0
    186e:	88 32       	cpi	r24, 0x28	; 40
    1870:	91 05       	cpc	r25, r1
    1872:	11 f0       	breq	.+4      	; 0x1878 <I2C_enuMasterSendDataByte+0x46>
	{
		Local_enuReturnState = I2C_MT_Data_Error;
    1874:	85 e0       	ldi	r24, 0x05	; 5
    1876:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuReturnState;
    1878:	89 81       	ldd	r24, Y+1	; 0x01
}
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <I2C_enuMasterReadDataByte>:

I2C_Error_State I2C_enuMasterReadDataByte(u8 * Copy_pu8ReturnData)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <I2C_enuMasterReadDataByte+0x6>
    188a:	0f 92       	push	r0
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	9b 83       	std	Y+3, r25	; 0x03
    1892:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State Local_enuReturnState = I2C_Ok;
    1894:	19 82       	std	Y+1, r1	; 0x01

	/* Clear Flag To start The Operation */

	SET_BIT(TWCR,TWCR_TWINT);
    1896:	a6 e5       	ldi	r26, 0x56	; 86
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e6 e5       	ldi	r30, 0x56	; 86
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	80 68       	ori	r24, 0x80	; 128
    18a2:	8c 93       	st	X, r24

	/* Polling on The Flag */
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    18a4:	e6 e5       	ldi	r30, 0x56	; 86
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	88 23       	and	r24, r24
    18ac:	dc f7       	brge	.-10     	; 0x18a4 <I2C_enuMasterReadDataByte+0x20>

	/* Check on ACK */
	if((TWSR & 0xF8) != I2C_MR_DATA_ACK)
    18ae:	e1 e2       	ldi	r30, 0x21	; 33
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	88 2f       	mov	r24, r24
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	88 7f       	andi	r24, 0xF8	; 248
    18ba:	90 70       	andi	r25, 0x00	; 0
    18bc:	80 35       	cpi	r24, 0x50	; 80
    18be:	91 05       	cpc	r25, r1
    18c0:	19 f0       	breq	.+6      	; 0x18c8 <I2C_enuMasterReadDataByte+0x44>
	{
		Local_enuReturnState = I2C_MR_Data_Error;
    18c2:	86 e0       	ldi	r24, 0x06	; 6
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	06 c0       	rjmp	.+12     	; 0x18d4 <I2C_enuMasterReadDataByte+0x50>
	}
	else
	{
		*Copy_pu8ReturnData = TWDR;
    18c8:	e3 e2       	ldi	r30, 0x23	; 35
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	ea 81       	ldd	r30, Y+2	; 0x02
    18d0:	fb 81       	ldd	r31, Y+3	; 0x03
    18d2:	80 83       	st	Z, r24
	}


	return Local_enuReturnState;
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <I2C_voidSendStopCondition>:

void I2C_voidSendStopCondition(void)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
	/* Stop Condition */
	SET_BIT(TWCR,TWCR_TWSTO);
    18ea:	a6 e5       	ldi	r26, 0x56	; 86
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e6 e5       	ldi	r30, 0x56	; 86
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	80 61       	ori	r24, 0x10	; 16
    18f6:	8c 93       	st	X, r24

	/* Clear Flag */
	SET_BIT(TWCR,TWCR_TWINT);
    18f8:	a6 e5       	ldi	r26, 0x56	; 86
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e6 e5       	ldi	r30, 0x56	; 86
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	80 68       	ori	r24, 0x80	; 128
    1904:	8c 93       	st	X, r24
}
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <LCD_voidInit>:
/***************************************************************************************/
/* Description! Apply initialization sequence for LCD module                           */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidInit(void) {
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	c4 55       	subi	r28, 0x54	; 84
    191a:	d0 40       	sbci	r29, 0x00	; 0
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	fe 01       	movw	r30, r28
    1928:	ef 5a       	subi	r30, 0xAF	; 175
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	ac e0       	ldi	r26, 0x0C	; 12
    1932:	b2 e4       	ldi	r27, 0x42	; 66
    1934:	80 83       	st	Z, r24
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	a2 83       	std	Z+2, r26	; 0x02
    193a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193c:	8e 01       	movw	r16, r28
    193e:	03 5b       	subi	r16, 0xB3	; 179
    1940:	1f 4f       	sbci	r17, 0xFF	; 255
    1942:	fe 01       	movw	r30, r28
    1944:	ef 5a       	subi	r30, 0xAF	; 175
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	60 81       	ld	r22, Z
    194a:	71 81       	ldd	r23, Z+1	; 0x01
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	93 81       	ldd	r25, Z+3	; 0x03
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	4a ef       	ldi	r20, 0xFA	; 250
    1956:	54 e4       	ldi	r21, 0x44	; 68
    1958:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	f8 01       	movw	r30, r16
    1962:	80 83       	st	Z, r24
    1964:	91 83       	std	Z+1, r25	; 0x01
    1966:	a2 83       	std	Z+2, r26	; 0x02
    1968:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    196a:	fe 01       	movw	r30, r28
    196c:	e3 5b       	subi	r30, 0xB3	; 179
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e8       	ldi	r20, 0x80	; 128
    197e:	5f e3       	ldi	r21, 0x3F	; 63
    1980:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1984:	88 23       	and	r24, r24
    1986:	44 f4       	brge	.+16     	; 0x1998 <LCD_voidInit+0x8c>
		__ticks = 1;
    1988:	fe 01       	movw	r30, r28
    198a:	e5 5b       	subi	r30, 0xB5	; 181
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	80 83       	st	Z, r24
    1996:	64 c0       	rjmp	.+200    	; 0x1a60 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1998:	fe 01       	movw	r30, r28
    199a:	e3 5b       	subi	r30, 0xB3	; 179
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	60 81       	ld	r22, Z
    19a0:	71 81       	ldd	r23, Z+1	; 0x01
    19a2:	82 81       	ldd	r24, Z+2	; 0x02
    19a4:	93 81       	ldd	r25, Z+3	; 0x03
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	3f ef       	ldi	r19, 0xFF	; 255
    19aa:	4f e7       	ldi	r20, 0x7F	; 127
    19ac:	57 e4       	ldi	r21, 0x47	; 71
    19ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19b2:	18 16       	cp	r1, r24
    19b4:	0c f0       	brlt	.+2      	; 0x19b8 <LCD_voidInit+0xac>
    19b6:	43 c0       	rjmp	.+134    	; 0x1a3e <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b8:	fe 01       	movw	r30, r28
    19ba:	ef 5a       	subi	r30, 0xAF	; 175
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	60 81       	ld	r22, Z
    19c0:	71 81       	ldd	r23, Z+1	; 0x01
    19c2:	82 81       	ldd	r24, Z+2	; 0x02
    19c4:	93 81       	ldd	r25, Z+3	; 0x03
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e2       	ldi	r20, 0x20	; 32
    19cc:	51 e4       	ldi	r21, 0x41	; 65
    19ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	8e 01       	movw	r16, r28
    19d8:	05 5b       	subi	r16, 0xB5	; 181
    19da:	1f 4f       	sbci	r17, 0xFF	; 255
    19dc:	bc 01       	movw	r22, r24
    19de:	cd 01       	movw	r24, r26
    19e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	f8 01       	movw	r30, r16
    19ea:	91 83       	std	Z+1, r25	; 0x01
    19ec:	80 83       	st	Z, r24
    19ee:	1f c0       	rjmp	.+62     	; 0x1a2e <LCD_voidInit+0x122>
    19f0:	fe 01       	movw	r30, r28
    19f2:	e7 5b       	subi	r30, 0xB7	; 183
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	88 ec       	ldi	r24, 0xC8	; 200
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	91 83       	std	Z+1, r25	; 0x01
    19fc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19fe:	fe 01       	movw	r30, r28
    1a00:	e7 5b       	subi	r30, 0xB7	; 183
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	80 81       	ld	r24, Z
    1a06:	91 81       	ldd	r25, Z+1	; 0x01
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <LCD_voidInit+0xfc>
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e7 5b       	subi	r30, 0xB7	; 183
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a16:	de 01       	movw	r26, r28
    1a18:	a5 5b       	subi	r26, 0xB5	; 181
    1a1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e5 5b       	subi	r30, 0xB5	; 181
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 81       	ld	r24, Z
    1a24:	91 81       	ldd	r25, Z+1	; 0x01
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	11 96       	adiw	r26, 0x01	; 1
    1a2a:	9c 93       	st	X, r25
    1a2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e5 5b       	subi	r30, 0xB5	; 181
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	80 81       	ld	r24, Z
    1a36:	91 81       	ldd	r25, Z+1	; 0x01
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	d1 f6       	brne	.-76     	; 0x19f0 <LCD_voidInit+0xe4>
    1a3c:	27 c0       	rjmp	.+78     	; 0x1a8c <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	8e 01       	movw	r16, r28
    1a40:	05 5b       	subi	r16, 0xB5	; 181
    1a42:	1f 4f       	sbci	r17, 0xFF	; 255
    1a44:	fe 01       	movw	r30, r28
    1a46:	e3 5b       	subi	r30, 0xB3	; 179
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	60 81       	ld	r22, Z
    1a4c:	71 81       	ldd	r23, Z+1	; 0x01
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	93 81       	ldd	r25, Z+3	; 0x03
    1a52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	80 83       	st	Z, r24
    1a60:	de 01       	movw	r26, r28
    1a62:	a9 5b       	subi	r26, 0xB9	; 185
    1a64:	bf 4f       	sbci	r27, 0xFF	; 255
    1a66:	fe 01       	movw	r30, r28
    1a68:	e5 5b       	subi	r30, 0xB5	; 181
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	80 81       	ld	r24, Z
    1a6e:	91 81       	ldd	r25, Z+1	; 0x01
    1a70:	8d 93       	st	X+, r24
    1a72:	9c 93       	st	X, r25
    1a74:	fe 01       	movw	r30, r28
    1a76:	e9 5b       	subi	r30, 0xB9	; 185
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <LCD_voidInit+0x172>
    1a82:	fe 01       	movw	r30, r28
    1a84:	e9 5b       	subi	r30, 0xB9	; 185
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	91 83       	std	Z+1, r25	; 0x01
    1a8a:	80 83       	st	Z, r24
#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(35);

	/* Return Home  */
	LCD_voidSendCmnd(lcd_Home);
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidSendCmnd>
    1a94:	fe 01       	movw	r30, r28
    1a96:	ed 5b       	subi	r30, 0xBD	; 189
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a0 e8       	ldi	r26, 0x80	; 128
    1aa0:	bf e3       	ldi	r27, 0x3F	; 63
    1aa2:	80 83       	st	Z, r24
    1aa4:	91 83       	std	Z+1, r25	; 0x01
    1aa6:	a2 83       	std	Z+2, r26	; 0x02
    1aa8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aaa:	8e 01       	movw	r16, r28
    1aac:	01 5c       	subi	r16, 0xC1	; 193
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	ed 5b       	subi	r30, 0xBD	; 189
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	60 81       	ld	r22, Z
    1ab8:	71 81       	ldd	r23, Z+1	; 0x01
    1aba:	82 81       	ldd	r24, Z+2	; 0x02
    1abc:	93 81       	ldd	r25, Z+3	; 0x03
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4a ef       	ldi	r20, 0xFA	; 250
    1ac4:	54 e4       	ldi	r21, 0x44	; 68
    1ac6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	f8 01       	movw	r30, r16
    1ad0:	80 83       	st	Z, r24
    1ad2:	91 83       	std	Z+1, r25	; 0x01
    1ad4:	a2 83       	std	Z+2, r26	; 0x02
    1ad6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ad8:	fe 01       	movw	r30, r28
    1ada:	ff 96       	adiw	r30, 0x3f	; 63
    1adc:	60 81       	ld	r22, Z
    1ade:	71 81       	ldd	r23, Z+1	; 0x01
    1ae0:	82 81       	ldd	r24, Z+2	; 0x02
    1ae2:	93 81       	ldd	r25, Z+3	; 0x03
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e8       	ldi	r20, 0x80	; 128
    1aea:	5f e3       	ldi	r21, 0x3F	; 63
    1aec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1af0:	88 23       	and	r24, r24
    1af2:	2c f4       	brge	.+10     	; 0x1afe <LCD_voidInit+0x1f2>
		__ticks = 1;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	9e af       	std	Y+62, r25	; 0x3e
    1afa:	8d af       	std	Y+61, r24	; 0x3d
    1afc:	46 c0       	rjmp	.+140    	; 0x1b8a <LCD_voidInit+0x27e>
	else if (__tmp > 65535)
    1afe:	fe 01       	movw	r30, r28
    1b00:	ff 96       	adiw	r30, 0x3f	; 63
    1b02:	60 81       	ld	r22, Z
    1b04:	71 81       	ldd	r23, Z+1	; 0x01
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	93 81       	ldd	r25, Z+3	; 0x03
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	3f ef       	ldi	r19, 0xFF	; 255
    1b0e:	4f e7       	ldi	r20, 0x7F	; 127
    1b10:	57 e4       	ldi	r21, 0x47	; 71
    1b12:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b16:	18 16       	cp	r1, r24
    1b18:	64 f5       	brge	.+88     	; 0x1b72 <LCD_voidInit+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	ed 5b       	subi	r30, 0xBD	; 189
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e2       	ldi	r20, 0x20	; 32
    1b2e:	51 e4       	ldi	r21, 0x41	; 65
    1b30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	bc 01       	movw	r22, r24
    1b3a:	cd 01       	movw	r24, r26
    1b3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9e af       	std	Y+62, r25	; 0x3e
    1b46:	8d af       	std	Y+61, r24	; 0x3d
    1b48:	0f c0       	rjmp	.+30     	; 0x1b68 <LCD_voidInit+0x25c>
    1b4a:	88 ec       	ldi	r24, 0xC8	; 200
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9c af       	std	Y+60, r25	; 0x3c
    1b50:	8b af       	std	Y+59, r24	; 0x3b
    1b52:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b54:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <LCD_voidInit+0x24a>
    1b5a:	9c af       	std	Y+60, r25	; 0x3c
    1b5c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b60:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	9e af       	std	Y+62, r25	; 0x3e
    1b66:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b68:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	69 f7       	brne	.-38     	; 0x1b4a <LCD_voidInit+0x23e>
    1b70:	16 c0       	rjmp	.+44     	; 0x1b9e <LCD_voidInit+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b72:	fe 01       	movw	r30, r28
    1b74:	ff 96       	adiw	r30, 0x3f	; 63
    1b76:	60 81       	ld	r22, Z
    1b78:	71 81       	ldd	r23, Z+1	; 0x01
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	93 81       	ldd	r25, Z+3	; 0x03
    1b7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9e af       	std	Y+62, r25	; 0x3e
    1b88:	8d af       	std	Y+61, r24	; 0x3d
    1b8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b8e:	9a af       	std	Y+58, r25	; 0x3a
    1b90:	89 af       	std	Y+57, r24	; 0x39
    1b92:	89 ad       	ldd	r24, Y+57	; 0x39
    1b94:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_voidInit+0x28a>
    1b9a:	9a af       	std	Y+58, r25	; 0x3a
    1b9c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	/* Function Set  */
	LCD_voidSendCmnd(lcd_FunctionSet4bit);
    1b9e:	8f e2       	ldi	r24, 0x2F	; 47
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidSendCmnd>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a0 e8       	ldi	r26, 0x80	; 128
    1bac:	bf e3       	ldi	r27, 0x3F	; 63
    1bae:	8d ab       	std	Y+53, r24	; 0x35
    1bb0:	9e ab       	std	Y+54, r25	; 0x36
    1bb2:	af ab       	std	Y+55, r26	; 0x37
    1bb4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb6:	6d a9       	ldd	r22, Y+53	; 0x35
    1bb8:	7e a9       	ldd	r23, Y+54	; 0x36
    1bba:	8f a9       	ldd	r24, Y+55	; 0x37
    1bbc:	98 ad       	ldd	r25, Y+56	; 0x38
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	4a ef       	ldi	r20, 0xFA	; 250
    1bc4:	54 e4       	ldi	r21, 0x44	; 68
    1bc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	89 ab       	std	Y+49, r24	; 0x31
    1bd0:	9a ab       	std	Y+50, r25	; 0x32
    1bd2:	ab ab       	std	Y+51, r26	; 0x33
    1bd4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bd6:	69 a9       	ldd	r22, Y+49	; 0x31
    1bd8:	7a a9       	ldd	r23, Y+50	; 0x32
    1bda:	8b a9       	ldd	r24, Y+51	; 0x33
    1bdc:	9c a9       	ldd	r25, Y+52	; 0x34
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e8       	ldi	r20, 0x80	; 128
    1be4:	5f e3       	ldi	r21, 0x3F	; 63
    1be6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bea:	88 23       	and	r24, r24
    1bec:	2c f4       	brge	.+10     	; 0x1bf8 <LCD_voidInit+0x2ec>
		__ticks = 1;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	98 ab       	std	Y+48, r25	; 0x30
    1bf4:	8f a7       	std	Y+47, r24	; 0x2f
    1bf6:	3f c0       	rjmp	.+126    	; 0x1c76 <LCD_voidInit+0x36a>
	else if (__tmp > 65535)
    1bf8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bfa:	7a a9       	ldd	r23, Y+50	; 0x32
    1bfc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bfe:	9c a9       	ldd	r25, Y+52	; 0x34
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	3f ef       	ldi	r19, 0xFF	; 255
    1c04:	4f e7       	ldi	r20, 0x7F	; 127
    1c06:	57 e4       	ldi	r21, 0x47	; 71
    1c08:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	4c f5       	brge	.+82     	; 0x1c62 <LCD_voidInit+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c10:	6d a9       	ldd	r22, Y+53	; 0x35
    1c12:	7e a9       	ldd	r23, Y+54	; 0x36
    1c14:	8f a9       	ldd	r24, Y+55	; 0x37
    1c16:	98 ad       	ldd	r25, Y+56	; 0x38
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e2       	ldi	r20, 0x20	; 32
    1c1e:	51 e4       	ldi	r21, 0x41	; 65
    1c20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	98 ab       	std	Y+48, r25	; 0x30
    1c36:	8f a7       	std	Y+47, r24	; 0x2f
    1c38:	0f c0       	rjmp	.+30     	; 0x1c58 <LCD_voidInit+0x34c>
    1c3a:	88 ec       	ldi	r24, 0xC8	; 200
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9e a7       	std	Y+46, r25	; 0x2e
    1c40:	8d a7       	std	Y+45, r24	; 0x2d
    1c42:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c44:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <LCD_voidInit+0x33a>
    1c4a:	9e a7       	std	Y+46, r25	; 0x2e
    1c4c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c50:	98 a9       	ldd	r25, Y+48	; 0x30
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	98 ab       	std	Y+48, r25	; 0x30
    1c56:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	69 f7       	brne	.-38     	; 0x1c3a <LCD_voidInit+0x32e>
    1c60:	14 c0       	rjmp	.+40     	; 0x1c8a <LCD_voidInit+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c62:	69 a9       	ldd	r22, Y+49	; 0x31
    1c64:	7a a9       	ldd	r23, Y+50	; 0x32
    1c66:	8b a9       	ldd	r24, Y+51	; 0x33
    1c68:	9c a9       	ldd	r25, Y+52	; 0x34
    1c6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	98 ab       	std	Y+48, r25	; 0x30
    1c74:	8f a7       	std	Y+47, r24	; 0x2f
    1c76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c78:	98 a9       	ldd	r25, Y+48	; 0x30
    1c7a:	9c a7       	std	Y+44, r25	; 0x2c
    1c7c:	8b a7       	std	Y+43, r24	; 0x2b
    1c7e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c80:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <LCD_voidInit+0x376>
    1c86:	9c a7       	std	Y+44, r25	; 0x2c
    1c88:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Display ON OFF Control */
	LCD_voidSendCmnd(lcd_DisplayOn);
    1c8a:	8f e0       	ldi	r24, 0x0F	; 15
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidSendCmnd>
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a0 e8       	ldi	r26, 0x80	; 128
    1c98:	bf e3       	ldi	r27, 0x3F	; 63
    1c9a:	8f a3       	std	Y+39, r24	; 0x27
    1c9c:	98 a7       	std	Y+40, r25	; 0x28
    1c9e:	a9 a7       	std	Y+41, r26	; 0x29
    1ca0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	4a ef       	ldi	r20, 0xFA	; 250
    1cb0:	54 e4       	ldi	r21, 0x44	; 68
    1cb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	8b a3       	std	Y+35, r24	; 0x23
    1cbc:	9c a3       	std	Y+36, r25	; 0x24
    1cbe:	ad a3       	std	Y+37, r26	; 0x25
    1cc0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e8       	ldi	r20, 0x80	; 128
    1cd0:	5f e3       	ldi	r21, 0x3F	; 63
    1cd2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cd6:	88 23       	and	r24, r24
    1cd8:	2c f4       	brge	.+10     	; 0x1ce4 <LCD_voidInit+0x3d8>
		__ticks = 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	9a a3       	std	Y+34, r25	; 0x22
    1ce0:	89 a3       	std	Y+33, r24	; 0x21
    1ce2:	3f c0       	rjmp	.+126    	; 0x1d62 <LCD_voidInit+0x456>
	else if (__tmp > 65535)
    1ce4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cea:	9e a1       	ldd	r25, Y+38	; 0x26
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	3f ef       	ldi	r19, 0xFF	; 255
    1cf0:	4f e7       	ldi	r20, 0x7F	; 127
    1cf2:	57 e4       	ldi	r21, 0x47	; 71
    1cf4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cf8:	18 16       	cp	r1, r24
    1cfa:	4c f5       	brge	.+82     	; 0x1d4e <LCD_voidInit+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfc:	6f a1       	ldd	r22, Y+39	; 0x27
    1cfe:	78 a5       	ldd	r23, Y+40	; 0x28
    1d00:	89 a5       	ldd	r24, Y+41	; 0x29
    1d02:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e2       	ldi	r20, 0x20	; 32
    1d0a:	51 e4       	ldi	r21, 0x41	; 65
    1d0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	bc 01       	movw	r22, r24
    1d16:	cd 01       	movw	r24, r26
    1d18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9a a3       	std	Y+34, r25	; 0x22
    1d22:	89 a3       	std	Y+33, r24	; 0x21
    1d24:	0f c0       	rjmp	.+30     	; 0x1d44 <LCD_voidInit+0x438>
    1d26:	88 ec       	ldi	r24, 0xC8	; 200
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	98 a3       	std	Y+32, r25	; 0x20
    1d2c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d30:	98 a1       	ldd	r25, Y+32	; 0x20
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <LCD_voidInit+0x426>
    1d36:	98 a3       	std	Y+32, r25	; 0x20
    1d38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	9a a3       	std	Y+34, r25	; 0x22
    1d42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d44:	89 a1       	ldd	r24, Y+33	; 0x21
    1d46:	9a a1       	ldd	r25, Y+34	; 0x22
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	69 f7       	brne	.-38     	; 0x1d26 <LCD_voidInit+0x41a>
    1d4c:	14 c0       	rjmp	.+40     	; 0x1d76 <LCD_voidInit+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d50:	7c a1       	ldd	r23, Y+36	; 0x24
    1d52:	8d a1       	ldd	r24, Y+37	; 0x25
    1d54:	9e a1       	ldd	r25, Y+38	; 0x26
    1d56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9a a3       	std	Y+34, r25	; 0x22
    1d60:	89 a3       	std	Y+33, r24	; 0x21
    1d62:	89 a1       	ldd	r24, Y+33	; 0x21
    1d64:	9a a1       	ldd	r25, Y+34	; 0x22
    1d66:	9e 8f       	std	Y+30, r25	; 0x1e
    1d68:	8d 8f       	std	Y+29, r24	; 0x1d
    1d6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_voidInit+0x462>
    1d72:	9e 8f       	std	Y+30, r25	; 0x1e
    1d74:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display */
	LCD_voidSendCmnd(lcd_Clear);
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidSendCmnd>
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	a0 e8       	ldi	r26, 0x80	; 128
    1d84:	bf e3       	ldi	r27, 0x3F	; 63
    1d86:	89 8f       	std	Y+25, r24	; 0x19
    1d88:	9a 8f       	std	Y+26, r25	; 0x1a
    1d8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1d8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	4a ef       	ldi	r20, 0xFA	; 250
    1d9c:	54 e4       	ldi	r21, 0x44	; 68
    1d9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	8d 8b       	std	Y+21, r24	; 0x15
    1da8:	9e 8b       	std	Y+22, r25	; 0x16
    1daa:	af 8b       	std	Y+23, r26	; 0x17
    1dac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dae:	6d 89       	ldd	r22, Y+21	; 0x15
    1db0:	7e 89       	ldd	r23, Y+22	; 0x16
    1db2:	8f 89       	ldd	r24, Y+23	; 0x17
    1db4:	98 8d       	ldd	r25, Y+24	; 0x18
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e8       	ldi	r20, 0x80	; 128
    1dbc:	5f e3       	ldi	r21, 0x3F	; 63
    1dbe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dc2:	88 23       	and	r24, r24
    1dc4:	2c f4       	brge	.+10     	; 0x1dd0 <LCD_voidInit+0x4c4>
		__ticks = 1;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	9c 8b       	std	Y+20, r25	; 0x14
    1dcc:	8b 8b       	std	Y+19, r24	; 0x13
    1dce:	3f c0       	rjmp	.+126    	; 0x1e4e <LCD_voidInit+0x542>
	else if (__tmp > 65535)
    1dd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	3f ef       	ldi	r19, 0xFF	; 255
    1ddc:	4f e7       	ldi	r20, 0x7F	; 127
    1dde:	57 e4       	ldi	r21, 0x47	; 71
    1de0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1de4:	18 16       	cp	r1, r24
    1de6:	4c f5       	brge	.+82     	; 0x1e3a <LCD_voidInit+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de8:	69 8d       	ldd	r22, Y+25	; 0x19
    1dea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e2       	ldi	r20, 0x20	; 32
    1df6:	51 e4       	ldi	r21, 0x41	; 65
    1df8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	bc 01       	movw	r22, r24
    1e02:	cd 01       	movw	r24, r26
    1e04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	9c 8b       	std	Y+20, r25	; 0x14
    1e0e:	8b 8b       	std	Y+19, r24	; 0x13
    1e10:	0f c0       	rjmp	.+30     	; 0x1e30 <LCD_voidInit+0x524>
    1e12:	88 ec       	ldi	r24, 0xC8	; 200
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	9a 8b       	std	Y+18, r25	; 0x12
    1e18:	89 8b       	std	Y+17, r24	; 0x11
    1e1a:	89 89       	ldd	r24, Y+17	; 0x11
    1e1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_voidInit+0x512>
    1e22:	9a 8b       	std	Y+18, r25	; 0x12
    1e24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e26:	8b 89       	ldd	r24, Y+19	; 0x13
    1e28:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	9c 8b       	std	Y+20, r25	; 0x14
    1e2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e30:	8b 89       	ldd	r24, Y+19	; 0x13
    1e32:	9c 89       	ldd	r25, Y+20	; 0x14
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	69 f7       	brne	.-38     	; 0x1e12 <LCD_voidInit+0x506>
    1e38:	14 c0       	rjmp	.+40     	; 0x1e62 <LCD_voidInit+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e40:	98 8d       	ldd	r25, Y+24	; 0x18
    1e42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	9c 8b       	std	Y+20, r25	; 0x14
    1e4c:	8b 8b       	std	Y+19, r24	; 0x13
    1e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e50:	9c 89       	ldd	r25, Y+20	; 0x14
    1e52:	98 8b       	std	Y+16, r25	; 0x10
    1e54:	8f 87       	std	Y+15, r24	; 0x0f
    1e56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e58:	98 89       	ldd	r25, Y+16	; 0x10
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <LCD_voidInit+0x54e>
    1e5e:	98 8b       	std	Y+16, r25	; 0x10
    1e60:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* Entry Mode Set  */
	LCD_voidSendCmnd(lcd_EntryMode);
    1e62:	86 e0       	ldi	r24, 0x06	; 6
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidSendCmnd>
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	a0 e0       	ldi	r26, 0x00	; 0
    1e70:	b0 e4       	ldi	r27, 0x40	; 64
    1e72:	8b 87       	std	Y+11, r24	; 0x0b
    1e74:	9c 87       	std	Y+12, r25	; 0x0c
    1e76:	ad 87       	std	Y+13, r26	; 0x0d
    1e78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	4a ef       	ldi	r20, 0xFA	; 250
    1e88:	54 e4       	ldi	r21, 0x44	; 68
    1e8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	8f 83       	std	Y+7, r24	; 0x07
    1e94:	98 87       	std	Y+8, r25	; 0x08
    1e96:	a9 87       	std	Y+9, r26	; 0x09
    1e98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9c:	78 85       	ldd	r23, Y+8	; 0x08
    1e9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e8       	ldi	r20, 0x80	; 128
    1ea8:	5f e3       	ldi	r21, 0x3F	; 63
    1eaa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eae:	88 23       	and	r24, r24
    1eb0:	2c f4       	brge	.+10     	; 0x1ebc <LCD_voidInit+0x5b0>
		__ticks = 1;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9e 83       	std	Y+6, r25	; 0x06
    1eb8:	8d 83       	std	Y+5, r24	; 0x05
    1eba:	3f c0       	rjmp	.+126    	; 0x1f3a <LCD_voidInit+0x62e>
	else if (__tmp > 65535)
    1ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebe:	78 85       	ldd	r23, Y+8	; 0x08
    1ec0:	89 85       	ldd	r24, Y+9	; 0x09
    1ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	3f ef       	ldi	r19, 0xFF	; 255
    1ec8:	4f e7       	ldi	r20, 0x7F	; 127
    1eca:	57 e4       	ldi	r21, 0x47	; 71
    1ecc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ed0:	18 16       	cp	r1, r24
    1ed2:	4c f5       	brge	.+82     	; 0x1f26 <LCD_voidInit+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e2       	ldi	r20, 0x20	; 32
    1ee2:	51 e4       	ldi	r21, 0x41	; 65
    1ee4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <LCD_voidInit+0x610>
    1efe:	88 ec       	ldi	r24, 0xC8	; 200
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	9c 83       	std	Y+4, r25	; 0x04
    1f04:	8b 83       	std	Y+3, r24	; 0x03
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <LCD_voidInit+0x5fe>
    1f0e:	9c 83       	std	Y+4, r25	; 0x04
    1f10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f12:	8d 81       	ldd	r24, Y+5	; 0x05
    1f14:	9e 81       	ldd	r25, Y+6	; 0x06
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	69 f7       	brne	.-38     	; 0x1efe <LCD_voidInit+0x5f2>
    1f24:	14 c0       	rjmp	.+40     	; 0x1f4e <LCD_voidInit+0x642>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f26:	6f 81       	ldd	r22, Y+7	; 0x07
    1f28:	78 85       	ldd	r23, Y+8	; 0x08
    1f2a:	89 85       	ldd	r24, Y+9	; 0x09
    1f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3e:	9a 83       	std	Y+2, r25	; 0x02
    1f40:	89 83       	std	Y+1, r24	; 0x01
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	9a 81       	ldd	r25, Y+2	; 0x02
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <LCD_voidInit+0x63a>
    1f4a:	9a 83       	std	Y+2, r25	; 0x02
    1f4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    1f4e:	cc 5a       	subi	r28, 0xAC	; 172
    1f50:	df 4f       	sbci	r29, 0xFF	; 255
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	1f 91       	pop	r17
    1f62:	0f 91       	pop	r16
    1f64:	08 95       	ret

00001f66 <LCD_voidSendCmnd>:
/***************************************************************************************/
/* Description! Interface to send the configuration commands to the LCD Driver         */
/* Input      ! Command number                                                         */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendCmnd(u16 Copy_u8Cmnd) {
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	6e 97       	sbiw	r28, 0x1e	; 30
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f7c:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);

#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT

	/* Set RS to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RS_PIN, DIO_u8_LOW);
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	63 e0       	ldi	r22, 0x03	; 3
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>

	/* Set R/W to DIO_u8_LOW */
	//DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
	/* Load Command on Data bus */
	//DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd);
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D7_PIN, GET_BIT(Copy_u8Cmnd, 7));
    1f88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f8c:	88 0f       	add	r24, r24
    1f8e:	89 2f       	mov	r24, r25
    1f90:	88 1f       	adc	r24, r24
    1f92:	99 0b       	sbc	r25, r25
    1f94:	91 95       	neg	r25
    1f96:	98 2f       	mov	r25, r24
    1f98:	91 70       	andi	r25, 0x01	; 1
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	64 e0       	ldi	r22, 0x04	; 4
    1f9e:	49 2f       	mov	r20, r25
    1fa0:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D6_PIN, GET_BIT(Copy_u8Cmnd, 6));
    1fa4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fa6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fa8:	00 24       	eor	r0, r0
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	00 1c       	adc	r0, r0
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	00 1c       	adc	r0, r0
    1fb6:	89 2f       	mov	r24, r25
    1fb8:	90 2d       	mov	r25, r0
    1fba:	98 2f       	mov	r25, r24
    1fbc:	91 70       	andi	r25, 0x01	; 1
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	62 e0       	ldi	r22, 0x02	; 2
    1fc2:	49 2f       	mov	r20, r25
    1fc4:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D5_PIN, GET_BIT(Copy_u8Cmnd, 5));
    1fc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fcc:	96 95       	lsr	r25
    1fce:	87 95       	ror	r24
    1fd0:	92 95       	swap	r25
    1fd2:	82 95       	swap	r24
    1fd4:	8f 70       	andi	r24, 0x0F	; 15
    1fd6:	89 27       	eor	r24, r25
    1fd8:	9f 70       	andi	r25, 0x0F	; 15
    1fda:	89 27       	eor	r24, r25
    1fdc:	98 2f       	mov	r25, r24
    1fde:	91 70       	andi	r25, 0x01	; 1
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	61 e0       	ldi	r22, 0x01	; 1
    1fe4:	49 2f       	mov	r20, r25
    1fe6:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D4_PIN, GET_BIT(Copy_u8Cmnd, 4));
    1fea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fee:	92 95       	swap	r25
    1ff0:	82 95       	swap	r24
    1ff2:	8f 70       	andi	r24, 0x0F	; 15
    1ff4:	89 27       	eor	r24, r25
    1ff6:	9f 70       	andi	r25, 0x0F	; 15
    1ff8:	89 27       	eor	r24, r25
    1ffa:	98 2f       	mov	r25, r24
    1ffc:	91 70       	andi	r25, 0x01	; 1
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	49 2f       	mov	r20, r25
    2004:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>

	/* Set E to DIO_u8_HIGH  */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	62 e0       	ldi	r22, 0x02	; 2
    200c:	41 e0       	ldi	r20, 0x01	; 1
    200e:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a0 e0       	ldi	r26, 0x00	; 0
    2018:	b0 e4       	ldi	r27, 0x40	; 64
    201a:	89 8f       	std	Y+25, r24	; 0x19
    201c:	9a 8f       	std	Y+26, r25	; 0x1a
    201e:	ab 8f       	std	Y+27, r26	; 0x1b
    2020:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2022:	69 8d       	ldd	r22, Y+25	; 0x19
    2024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	4a ef       	ldi	r20, 0xFA	; 250
    2030:	54 e4       	ldi	r21, 0x44	; 68
    2032:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	8d 8b       	std	Y+21, r24	; 0x15
    203c:	9e 8b       	std	Y+22, r25	; 0x16
    203e:	af 8b       	std	Y+23, r26	; 0x17
    2040:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2042:	6d 89       	ldd	r22, Y+21	; 0x15
    2044:	7e 89       	ldd	r23, Y+22	; 0x16
    2046:	8f 89       	ldd	r24, Y+23	; 0x17
    2048:	98 8d       	ldd	r25, Y+24	; 0x18
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	5f e3       	ldi	r21, 0x3F	; 63
    2052:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2056:	88 23       	and	r24, r24
    2058:	2c f4       	brge	.+10     	; 0x2064 <LCD_voidSendCmnd+0xfe>
		__ticks = 1;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9c 8b       	std	Y+20, r25	; 0x14
    2060:	8b 8b       	std	Y+19, r24	; 0x13
    2062:	3f c0       	rjmp	.+126    	; 0x20e2 <LCD_voidSendCmnd+0x17c>
	else if (__tmp > 65535)
    2064:	6d 89       	ldd	r22, Y+21	; 0x15
    2066:	7e 89       	ldd	r23, Y+22	; 0x16
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	4f e7       	ldi	r20, 0x7F	; 127
    2072:	57 e4       	ldi	r21, 0x47	; 71
    2074:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2078:	18 16       	cp	r1, r24
    207a:	4c f5       	brge	.+82     	; 0x20ce <LCD_voidSendCmnd+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207c:	69 8d       	ldd	r22, Y+25	; 0x19
    207e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	bc 01       	movw	r22, r24
    2096:	cd 01       	movw	r24, r26
    2098:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9c 8b       	std	Y+20, r25	; 0x14
    20a2:	8b 8b       	std	Y+19, r24	; 0x13
    20a4:	0f c0       	rjmp	.+30     	; 0x20c4 <LCD_voidSendCmnd+0x15e>
    20a6:	88 ec       	ldi	r24, 0xC8	; 200
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9a 8b       	std	Y+18, r25	; 0x12
    20ac:	89 8b       	std	Y+17, r24	; 0x11
    20ae:	89 89       	ldd	r24, Y+17	; 0x11
    20b0:	9a 89       	ldd	r25, Y+18	; 0x12
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <LCD_voidSendCmnd+0x14c>
    20b6:	9a 8b       	std	Y+18, r25	; 0x12
    20b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ba:	8b 89       	ldd	r24, Y+19	; 0x13
    20bc:	9c 89       	ldd	r25, Y+20	; 0x14
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	9c 8b       	std	Y+20, r25	; 0x14
    20c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c4:	8b 89       	ldd	r24, Y+19	; 0x13
    20c6:	9c 89       	ldd	r25, Y+20	; 0x14
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	69 f7       	brne	.-38     	; 0x20a6 <LCD_voidSendCmnd+0x140>
    20cc:	14 c0       	rjmp	.+40     	; 0x20f6 <LCD_voidSendCmnd+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ce:	6d 89       	ldd	r22, Y+21	; 0x15
    20d0:	7e 89       	ldd	r23, Y+22	; 0x16
    20d2:	8f 89       	ldd	r24, Y+23	; 0x17
    20d4:	98 8d       	ldd	r25, Y+24	; 0x18
    20d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9c 8b       	std	Y+20, r25	; 0x14
    20e0:	8b 8b       	std	Y+19, r24	; 0x13
    20e2:	8b 89       	ldd	r24, Y+19	; 0x13
    20e4:	9c 89       	ldd	r25, Y+20	; 0x14
    20e6:	98 8b       	std	Y+16, r25	; 0x10
    20e8:	8f 87       	std	Y+15, r24	; 0x0f
    20ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ec:	98 89       	ldd	r25, Y+16	; 0x10
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <LCD_voidSendCmnd+0x188>
    20f2:	98 8b       	std	Y+16, r25	; 0x10
    20f4:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(2);

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	62 e0       	ldi	r22, 0x02	; 2
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>

	/*write the rest of the command */
	//DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd << 4);
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D7_PIN, GET_BIT(Copy_u8Cmnd, 3));
    2100:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2102:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2104:	96 95       	lsr	r25
    2106:	87 95       	ror	r24
    2108:	96 95       	lsr	r25
    210a:	87 95       	ror	r24
    210c:	96 95       	lsr	r25
    210e:	87 95       	ror	r24
    2110:	98 2f       	mov	r25, r24
    2112:	91 70       	andi	r25, 0x01	; 1
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	64 e0       	ldi	r22, 0x04	; 4
    2118:	49 2f       	mov	r20, r25
    211a:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D6_PIN, GET_BIT(Copy_u8Cmnd, 2));
    211e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2120:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2122:	96 95       	lsr	r25
    2124:	87 95       	ror	r24
    2126:	96 95       	lsr	r25
    2128:	87 95       	ror	r24
    212a:	98 2f       	mov	r25, r24
    212c:	91 70       	andi	r25, 0x01	; 1
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	62 e0       	ldi	r22, 0x02	; 2
    2132:	49 2f       	mov	r20, r25
    2134:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D5_PIN, GET_BIT(Copy_u8Cmnd, 1));
    2138:	8d 8d       	ldd	r24, Y+29	; 0x1d
    213a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    213c:	96 95       	lsr	r25
    213e:	87 95       	ror	r24
    2140:	98 2f       	mov	r25, r24
    2142:	91 70       	andi	r25, 0x01	; 1
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	61 e0       	ldi	r22, 0x01	; 1
    2148:	49 2f       	mov	r20, r25
    214a:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D4_PIN, GET_BIT(Copy_u8Cmnd, 0));
    214e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2150:	98 2f       	mov	r25, r24
    2152:	91 70       	andi	r25, 0x01	; 1
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	60 e0       	ldi	r22, 0x00	; 0
    2158:	49 2f       	mov	r20, r25
    215a:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>

	/* Set E to DIO_u8_HIGH  */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	62 e0       	ldi	r22, 0x02	; 2
    2162:	41 e0       	ldi	r20, 0x01	; 1
    2164:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	a0 e0       	ldi	r26, 0x00	; 0
    216e:	b0 e4       	ldi	r27, 0x40	; 64
    2170:	8b 87       	std	Y+11, r24	; 0x0b
    2172:	9c 87       	std	Y+12, r25	; 0x0c
    2174:	ad 87       	std	Y+13, r26	; 0x0d
    2176:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2178:	6b 85       	ldd	r22, Y+11	; 0x0b
    217a:	7c 85       	ldd	r23, Y+12	; 0x0c
    217c:	8d 85       	ldd	r24, Y+13	; 0x0d
    217e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	4a ef       	ldi	r20, 0xFA	; 250
    2186:	54 e4       	ldi	r21, 0x44	; 68
    2188:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	8f 83       	std	Y+7, r24	; 0x07
    2192:	98 87       	std	Y+8, r25	; 0x08
    2194:	a9 87       	std	Y+9, r26	; 0x09
    2196:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2198:	6f 81       	ldd	r22, Y+7	; 0x07
    219a:	78 85       	ldd	r23, Y+8	; 0x08
    219c:	89 85       	ldd	r24, Y+9	; 0x09
    219e:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e8       	ldi	r20, 0x80	; 128
    21a6:	5f e3       	ldi	r21, 0x3F	; 63
    21a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21ac:	88 23       	and	r24, r24
    21ae:	2c f4       	brge	.+10     	; 0x21ba <LCD_voidSendCmnd+0x254>
		__ticks = 1;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	8d 83       	std	Y+5, r24	; 0x05
    21b8:	3f c0       	rjmp	.+126    	; 0x2238 <LCD_voidSendCmnd+0x2d2>
	else if (__tmp > 65535)
    21ba:	6f 81       	ldd	r22, Y+7	; 0x07
    21bc:	78 85       	ldd	r23, Y+8	; 0x08
    21be:	89 85       	ldd	r24, Y+9	; 0x09
    21c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	3f ef       	ldi	r19, 0xFF	; 255
    21c6:	4f e7       	ldi	r20, 0x7F	; 127
    21c8:	57 e4       	ldi	r21, 0x47	; 71
    21ca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21ce:	18 16       	cp	r1, r24
    21d0:	4c f5       	brge	.+82     	; 0x2224 <LCD_voidSendCmnd+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e2       	ldi	r20, 0x20	; 32
    21e0:	51 e4       	ldi	r21, 0x41	; 65
    21e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	0f c0       	rjmp	.+30     	; 0x221a <LCD_voidSendCmnd+0x2b4>
    21fc:	88 ec       	ldi	r24, 0xC8	; 200
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	9c 83       	std	Y+4, r25	; 0x04
    2202:	8b 83       	std	Y+3, r24	; 0x03
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <LCD_voidSendCmnd+0x2a2>
    220c:	9c 83       	std	Y+4, r25	; 0x04
    220e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2210:	8d 81       	ldd	r24, Y+5	; 0x05
    2212:	9e 81       	ldd	r25, Y+6	; 0x06
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	9e 83       	std	Y+6, r25	; 0x06
    2218:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221a:	8d 81       	ldd	r24, Y+5	; 0x05
    221c:	9e 81       	ldd	r25, Y+6	; 0x06
    221e:	00 97       	sbiw	r24, 0x00	; 0
    2220:	69 f7       	brne	.-38     	; 0x21fc <LCD_voidSendCmnd+0x296>
    2222:	14 c0       	rjmp	.+40     	; 0x224c <LCD_voidSendCmnd+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2224:	6f 81       	ldd	r22, Y+7	; 0x07
    2226:	78 85       	ldd	r23, Y+8	; 0x08
    2228:	89 85       	ldd	r24, Y+9	; 0x09
    222a:	9a 85       	ldd	r25, Y+10	; 0x0a
    222c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	9e 81       	ldd	r25, Y+6	; 0x06
    223c:	9a 83       	std	Y+2, r25	; 0x02
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <LCD_voidSendCmnd+0x2de>
    2248:	9a 83       	std	Y+2, r25	; 0x02
    224a:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for E to settle */
	_delay_ms(2);

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	62 e0       	ldi	r22, 0x02	; 2
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
#endif

}
    2256:	6e 96       	adiw	r28, 0x1e	; 30
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <LCD_voidSendChar>:
/***************************************************************************************/
/* Description! Interface to write character on LCD screen                             */
/* Input      ! Data to send                                                           */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendChar(u8 Copy_u8Data) {
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	ab 97       	sbiw	r28, 0x2b	; 43
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	8b a7       	std	Y+43, r24	; 0x2b
	/* Delay to let the LCD Display the character */
	_delay_ms(2);

#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	/* Set RS to HIG */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RS_PIN, DIO_u8_HIGH);
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	63 e0       	ldi	r22, 0x03	; 3
    2282:	41 e0       	ldi	r20, 0x01	; 1
    2284:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>

	/* Set R/W to DIO_u8_LOW */
	//DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	62 e0       	ldi	r22, 0x02	; 2
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>

	/* Load Command on Data bus */
	//DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Data);
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D7_PIN, GET_BIT(Copy_u8Data, 7));
    2292:	8b a5       	ldd	r24, Y+43	; 0x2b
    2294:	98 2f       	mov	r25, r24
    2296:	99 1f       	adc	r25, r25
    2298:	99 27       	eor	r25, r25
    229a:	99 1f       	adc	r25, r25
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	64 e0       	ldi	r22, 0x04	; 4
    22a0:	49 2f       	mov	r20, r25
    22a2:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D6_PIN, GET_BIT(Copy_u8Data, 6));
    22a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    22a8:	82 95       	swap	r24
    22aa:	86 95       	lsr	r24
    22ac:	86 95       	lsr	r24
    22ae:	83 70       	andi	r24, 0x03	; 3
    22b0:	98 2f       	mov	r25, r24
    22b2:	91 70       	andi	r25, 0x01	; 1
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	62 e0       	ldi	r22, 0x02	; 2
    22b8:	49 2f       	mov	r20, r25
    22ba:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D5_PIN, GET_BIT(Copy_u8Data, 5));
    22be:	8b a5       	ldd	r24, Y+43	; 0x2b
    22c0:	82 95       	swap	r24
    22c2:	86 95       	lsr	r24
    22c4:	87 70       	andi	r24, 0x07	; 7
    22c6:	98 2f       	mov	r25, r24
    22c8:	91 70       	andi	r25, 0x01	; 1
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	61 e0       	ldi	r22, 0x01	; 1
    22ce:	49 2f       	mov	r20, r25
    22d0:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D4_PIN, GET_BIT(Copy_u8Data, 4));
    22d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    22d6:	82 95       	swap	r24
    22d8:	8f 70       	andi	r24, 0x0F	; 15
    22da:	98 2f       	mov	r25, r24
    22dc:	91 70       	andi	r25, 0x01	; 1
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	49 2f       	mov	r20, r25
    22e4:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	62 e0       	ldi	r22, 0x02	; 2
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a0 e0       	ldi	r26, 0x00	; 0
    22f8:	b0 e4       	ldi	r27, 0x40	; 64
    22fa:	8f a3       	std	Y+39, r24	; 0x27
    22fc:	98 a7       	std	Y+40, r25	; 0x28
    22fe:	a9 a7       	std	Y+41, r26	; 0x29
    2300:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2302:	6f a1       	ldd	r22, Y+39	; 0x27
    2304:	78 a5       	ldd	r23, Y+40	; 0x28
    2306:	89 a5       	ldd	r24, Y+41	; 0x29
    2308:	9a a5       	ldd	r25, Y+42	; 0x2a
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	4a ef       	ldi	r20, 0xFA	; 250
    2310:	54 e4       	ldi	r21, 0x44	; 68
    2312:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	8b a3       	std	Y+35, r24	; 0x23
    231c:	9c a3       	std	Y+36, r25	; 0x24
    231e:	ad a3       	std	Y+37, r26	; 0x25
    2320:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2322:	6b a1       	ldd	r22, Y+35	; 0x23
    2324:	7c a1       	ldd	r23, Y+36	; 0x24
    2326:	8d a1       	ldd	r24, Y+37	; 0x25
    2328:	9e a1       	ldd	r25, Y+38	; 0x26
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e8       	ldi	r20, 0x80	; 128
    2330:	5f e3       	ldi	r21, 0x3F	; 63
    2332:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2336:	88 23       	and	r24, r24
    2338:	2c f4       	brge	.+10     	; 0x2344 <LCD_voidSendChar+0xdc>
		__ticks = 1;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9a a3       	std	Y+34, r25	; 0x22
    2340:	89 a3       	std	Y+33, r24	; 0x21
    2342:	3f c0       	rjmp	.+126    	; 0x23c2 <LCD_voidSendChar+0x15a>
	else if (__tmp > 65535)
    2344:	6b a1       	ldd	r22, Y+35	; 0x23
    2346:	7c a1       	ldd	r23, Y+36	; 0x24
    2348:	8d a1       	ldd	r24, Y+37	; 0x25
    234a:	9e a1       	ldd	r25, Y+38	; 0x26
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	3f ef       	ldi	r19, 0xFF	; 255
    2350:	4f e7       	ldi	r20, 0x7F	; 127
    2352:	57 e4       	ldi	r21, 0x47	; 71
    2354:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2358:	18 16       	cp	r1, r24
    235a:	4c f5       	brge	.+82     	; 0x23ae <LCD_voidSendChar+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235c:	6f a1       	ldd	r22, Y+39	; 0x27
    235e:	78 a5       	ldd	r23, Y+40	; 0x28
    2360:	89 a5       	ldd	r24, Y+41	; 0x29
    2362:	9a a5       	ldd	r25, Y+42	; 0x2a
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e2       	ldi	r20, 0x20	; 32
    236a:	51 e4       	ldi	r21, 0x41	; 65
    236c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9a a3       	std	Y+34, r25	; 0x22
    2382:	89 a3       	std	Y+33, r24	; 0x21
    2384:	0f c0       	rjmp	.+30     	; 0x23a4 <LCD_voidSendChar+0x13c>
    2386:	88 ec       	ldi	r24, 0xC8	; 200
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	98 a3       	std	Y+32, r25	; 0x20
    238c:	8f 8f       	std	Y+31, r24	; 0x1f
    238e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2390:	98 a1       	ldd	r25, Y+32	; 0x20
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <LCD_voidSendChar+0x12a>
    2396:	98 a3       	std	Y+32, r25	; 0x20
    2398:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239a:	89 a1       	ldd	r24, Y+33	; 0x21
    239c:	9a a1       	ldd	r25, Y+34	; 0x22
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	9a a3       	std	Y+34, r25	; 0x22
    23a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a4:	89 a1       	ldd	r24, Y+33	; 0x21
    23a6:	9a a1       	ldd	r25, Y+34	; 0x22
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	69 f7       	brne	.-38     	; 0x2386 <LCD_voidSendChar+0x11e>
    23ac:	14 c0       	rjmp	.+40     	; 0x23d6 <LCD_voidSendChar+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ae:	6b a1       	ldd	r22, Y+35	; 0x23
    23b0:	7c a1       	ldd	r23, Y+36	; 0x24
    23b2:	8d a1       	ldd	r24, Y+37	; 0x25
    23b4:	9e a1       	ldd	r25, Y+38	; 0x26
    23b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9a a3       	std	Y+34, r25	; 0x22
    23c0:	89 a3       	std	Y+33, r24	; 0x21
    23c2:	89 a1       	ldd	r24, Y+33	; 0x21
    23c4:	9a a1       	ldd	r25, Y+34	; 0x22
    23c6:	9e 8f       	std	Y+30, r25	; 0x1e
    23c8:	8d 8f       	std	Y+29, r24	; 0x1d
    23ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <LCD_voidSendChar+0x166>
    23d2:	9e 8f       	std	Y+30, r25	; 0x1e
    23d4:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Wait for E to settle */
	_delay_ms(2);

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	62 e0       	ldi	r22, 0x02	; 2
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>

	/*Load the rest of the command on Data bus */
	//DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Data << 4);
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D7_PIN, GET_BIT(Copy_u8Data, 3));
    23e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    23e2:	86 95       	lsr	r24
    23e4:	86 95       	lsr	r24
    23e6:	86 95       	lsr	r24
    23e8:	98 2f       	mov	r25, r24
    23ea:	91 70       	andi	r25, 0x01	; 1
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	64 e0       	ldi	r22, 0x04	; 4
    23f0:	49 2f       	mov	r20, r25
    23f2:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D6_PIN, GET_BIT(Copy_u8Data, 2));
    23f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    23f8:	86 95       	lsr	r24
    23fa:	86 95       	lsr	r24
    23fc:	98 2f       	mov	r25, r24
    23fe:	91 70       	andi	r25, 0x01	; 1
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	62 e0       	ldi	r22, 0x02	; 2
    2404:	49 2f       	mov	r20, r25
    2406:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D5_PIN, GET_BIT(Copy_u8Data, 1));
    240a:	8b a5       	ldd	r24, Y+43	; 0x2b
    240c:	86 95       	lsr	r24
    240e:	98 2f       	mov	r25, r24
    2410:	91 70       	andi	r25, 0x01	; 1
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	61 e0       	ldi	r22, 0x01	; 1
    2416:	49 2f       	mov	r20, r25
    2418:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_DATA_PORT, LCD_u8_D4_PIN, GET_BIT(Copy_u8Data, 0));
    241c:	8b a5       	ldd	r24, Y+43	; 0x2b
    241e:	98 2f       	mov	r25, r24
    2420:	91 70       	andi	r25, 0x01	; 1
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	49 2f       	mov	r20, r25
    2428:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	62 e0       	ldi	r22, 0x02	; 2
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 e0       	ldi	r26, 0x00	; 0
    243c:	b0 e4       	ldi	r27, 0x40	; 64
    243e:	89 8f       	std	Y+25, r24	; 0x19
    2440:	9a 8f       	std	Y+26, r25	; 0x1a
    2442:	ab 8f       	std	Y+27, r26	; 0x1b
    2444:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	69 8d       	ldd	r22, Y+25	; 0x19
    2448:	7a 8d       	ldd	r23, Y+26	; 0x1a
    244a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    244c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a ef       	ldi	r20, 0xFA	; 250
    2454:	54 e4       	ldi	r21, 0x44	; 68
    2456:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	8d 8b       	std	Y+21, r24	; 0x15
    2460:	9e 8b       	std	Y+22, r25	; 0x16
    2462:	af 8b       	std	Y+23, r26	; 0x17
    2464:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2466:	6d 89       	ldd	r22, Y+21	; 0x15
    2468:	7e 89       	ldd	r23, Y+22	; 0x16
    246a:	8f 89       	ldd	r24, Y+23	; 0x17
    246c:	98 8d       	ldd	r25, Y+24	; 0x18
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    247a:	88 23       	and	r24, r24
    247c:	2c f4       	brge	.+10     	; 0x2488 <LCD_voidSendChar+0x220>
		__ticks = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9c 8b       	std	Y+20, r25	; 0x14
    2484:	8b 8b       	std	Y+19, r24	; 0x13
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <LCD_voidSendChar+0x29e>
	else if (__tmp > 65535)
    2488:	6d 89       	ldd	r22, Y+21	; 0x15
    248a:	7e 89       	ldd	r23, Y+22	; 0x16
    248c:	8f 89       	ldd	r24, Y+23	; 0x17
    248e:	98 8d       	ldd	r25, Y+24	; 0x18
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    249c:	18 16       	cp	r1, r24
    249e:	4c f5       	brge	.+82     	; 0x24f2 <LCD_voidSendChar+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	69 8d       	ldd	r22, Y+25	; 0x19
    24a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9c 8b       	std	Y+20, r25	; 0x14
    24c6:	8b 8b       	std	Y+19, r24	; 0x13
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <LCD_voidSendChar+0x280>
    24ca:	88 ec       	ldi	r24, 0xC8	; 200
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9a 8b       	std	Y+18, r25	; 0x12
    24d0:	89 8b       	std	Y+17, r24	; 0x11
    24d2:	89 89       	ldd	r24, Y+17	; 0x11
    24d4:	9a 89       	ldd	r25, Y+18	; 0x12
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <LCD_voidSendChar+0x26e>
    24da:	9a 8b       	std	Y+18, r25	; 0x12
    24dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	8b 89       	ldd	r24, Y+19	; 0x13
    24e0:	9c 89       	ldd	r25, Y+20	; 0x14
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	9c 8b       	std	Y+20, r25	; 0x14
    24e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ea:	9c 89       	ldd	r25, Y+20	; 0x14
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	69 f7       	brne	.-38     	; 0x24ca <LCD_voidSendChar+0x262>
    24f0:	14 c0       	rjmp	.+40     	; 0x251a <LCD_voidSendChar+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	6d 89       	ldd	r22, Y+21	; 0x15
    24f4:	7e 89       	ldd	r23, Y+22	; 0x16
    24f6:	8f 89       	ldd	r24, Y+23	; 0x17
    24f8:	98 8d       	ldd	r25, Y+24	; 0x18
    24fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9c 8b       	std	Y+20, r25	; 0x14
    2504:	8b 8b       	std	Y+19, r24	; 0x13
    2506:	8b 89       	ldd	r24, Y+19	; 0x13
    2508:	9c 89       	ldd	r25, Y+20	; 0x14
    250a:	98 8b       	std	Y+16, r25	; 0x10
    250c:	8f 87       	std	Y+15, r24	; 0x0f
    250e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2510:	98 89       	ldd	r25, Y+16	; 0x10
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <LCD_voidSendChar+0x2aa>
    2516:	98 8b       	std	Y+16, r25	; 0x10
    2518:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(2);

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	62 e0       	ldi	r22, 0x02	; 2
    251e:	41 e0       	ldi	r20, 0x01	; 1
    2520:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_u8SetPinValue>
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	a0 e0       	ldi	r26, 0x00	; 0
    252a:	b0 e4       	ldi	r27, 0x40	; 64
    252c:	8b 87       	std	Y+11, r24	; 0x0b
    252e:	9c 87       	std	Y+12, r25	; 0x0c
    2530:	ad 87       	std	Y+13, r26	; 0x0d
    2532:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	6b 85       	ldd	r22, Y+11	; 0x0b
    2536:	7c 85       	ldd	r23, Y+12	; 0x0c
    2538:	8d 85       	ldd	r24, Y+13	; 0x0d
    253a:	9e 85       	ldd	r25, Y+14	; 0x0e
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a ef       	ldi	r20, 0xFA	; 250
    2542:	54 e4       	ldi	r21, 0x44	; 68
    2544:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	8f 83       	std	Y+7, r24	; 0x07
    254e:	98 87       	std	Y+8, r25	; 0x08
    2550:	a9 87       	std	Y+9, r26	; 0x09
    2552:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2554:	6f 81       	ldd	r22, Y+7	; 0x07
    2556:	78 85       	ldd	r23, Y+8	; 0x08
    2558:	89 85       	ldd	r24, Y+9	; 0x09
    255a:	9a 85       	ldd	r25, Y+10	; 0x0a
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	2c f4       	brge	.+10     	; 0x2576 <LCD_voidSendChar+0x30e>
		__ticks = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9e 83       	std	Y+6, r25	; 0x06
    2572:	8d 83       	std	Y+5, r24	; 0x05
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <LCD_voidSendChar+0x38c>
	else if (__tmp > 65535)
    2576:	6f 81       	ldd	r22, Y+7	; 0x07
    2578:	78 85       	ldd	r23, Y+8	; 0x08
    257a:	89 85       	ldd	r24, Y+9	; 0x09
    257c:	9a 85       	ldd	r25, Y+10	; 0x0a
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	4c f5       	brge	.+82     	; 0x25e0 <LCD_voidSendChar+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2590:	7c 85       	ldd	r23, Y+12	; 0x0c
    2592:	8d 85       	ldd	r24, Y+13	; 0x0d
    2594:	9e 85       	ldd	r25, Y+14	; 0x0e
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9e 83       	std	Y+6, r25	; 0x06
    25b4:	8d 83       	std	Y+5, r24	; 0x05
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <LCD_voidSendChar+0x36e>
    25b8:	88 ec       	ldi	r24, 0xC8	; 200
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9c 83       	std	Y+4, r25	; 0x04
    25be:	8b 83       	std	Y+3, r24	; 0x03
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <LCD_voidSendChar+0x35c>
    25c8:	9c 83       	std	Y+4, r25	; 0x04
    25ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	8d 81       	ldd	r24, Y+5	; 0x05
    25ce:	9e 81       	ldd	r25, Y+6	; 0x06
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9e 83       	std	Y+6, r25	; 0x06
    25d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <LCD_voidSendChar+0x350>
    25de:	14 c0       	rjmp	.+40     	; 0x2608 <LCD_voidSendChar+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	6f 81       	ldd	r22, Y+7	; 0x07
    25e2:	78 85       	ldd	r23, Y+8	; 0x08
    25e4:	89 85       	ldd	r24, Y+9	; 0x09
    25e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9e 83       	std	Y+6, r25	; 0x06
    25f2:	8d 83       	std	Y+5, r24	; 0x05
    25f4:	8d 81       	ldd	r24, Y+5	; 0x05
    25f6:	9e 81       	ldd	r25, Y+6	; 0x06
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCD_voidSendChar+0x398>
    2604:	9a 83       	std	Y+2, r25	; 0x02
    2606:	89 83       	std	Y+1, r24	; 0x01
	/* Delay to let the LCD Display the character */
	_delay_ms(2);

#endif

}
    2608:	ab 96       	adiw	r28, 0x2b	; 43
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	08 95       	ret

0000261a <LCD_voidSendString>:
/***************************************************************************************/
/* Description! Interface to write string on LCD screen                                */
/* Input      ! Pointer to the string                                                  */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendString(u8 *Copy_pu8String) {
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	00 d0       	rcall	.+0      	; 0x2620 <LCD_voidSendString+0x6>
    2620:	0f 92       	push	r0
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	9b 83       	std	Y+3, r25	; 0x03
    2628:	8a 83       	std	Y+2, r24	; 0x02

	//	/* Local loop index */
	//	u8 u8Index = 0;
	u8 iteration = 0;
    262a:	19 82       	std	Y+1, r1	; 0x01
	//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration = 0; Copy_pu8String[iteration] != '\0'; iteration++) {
    262c:	19 82       	std	Y+1, r1	; 0x01
    262e:	0e c0       	rjmp	.+28     	; 0x264c <LCD_voidSendString+0x32>
		/* Write Character on LCD */
		LCD_voidSendChar(Copy_pu8String[iteration]);
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	9b 81       	ldd	r25, Y+3	; 0x03
    263a:	fc 01       	movw	r30, r24
    263c:	e2 0f       	add	r30, r18
    263e:	f3 1f       	adc	r31, r19
    2640:	80 81       	ld	r24, Z
    2642:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_voidSendChar>

	//	/* Local loop index */
	//	u8 u8Index = 0;
	u8 iteration = 0;
	//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration = 0; Copy_pu8String[iteration] != '\0'; iteration++) {
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	8f 5f       	subi	r24, 0xFF	; 255
    264a:	89 83       	std	Y+1, r24	; 0x01
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	9b 81       	ldd	r25, Y+3	; 0x03
    2656:	fc 01       	movw	r30, r24
    2658:	e2 0f       	add	r30, r18
    265a:	f3 1f       	adc	r31, r19
    265c:	80 81       	ld	r24, Z
    265e:	88 23       	and	r24, r24
    2660:	39 f7       	brne	.-50     	; 0x2630 <LCD_voidSendString+0x16>
		LCD_voidSendChar(Copy_pu8String[iteration]);

		//		/* Increment local loop index */
		//		u8Index++;
	}
}
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <LCD_voidSendIntger>:

void LCD_voidSendIntger(s32 Copy_s32Data) {
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	ac 97       	sbiw	r28, 0x2c	; 44
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	69 a7       	std	Y+41, r22	; 0x29
    2684:	7a a7       	std	Y+42, r23	; 0x2a
    2686:	8b a7       	std	Y+43, r24	; 0x2b
    2688:	9c a7       	std	Y+44, r25	; 0x2c
	u32 str[10];
	// Converts Int to String
	sprintf(str, "%ld", Copy_s32Data);
    268a:	ce 01       	movw	r24, r28
    268c:	01 96       	adiw	r24, 0x01	; 1
    268e:	2d b7       	in	r18, 0x3d	; 61
    2690:	3e b7       	in	r19, 0x3e	; 62
    2692:	28 50       	subi	r18, 0x08	; 8
    2694:	30 40       	sbci	r19, 0x00	; 0
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	3e bf       	out	0x3e, r19	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	2d bf       	out	0x3d, r18	; 61
    26a0:	ed b7       	in	r30, 0x3d	; 61
    26a2:	fe b7       	in	r31, 0x3e	; 62
    26a4:	31 96       	adiw	r30, 0x01	; 1
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24
    26aa:	80 e6       	ldi	r24, 0x60	; 96
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	93 83       	std	Z+3, r25	; 0x03
    26b0:	82 83       	std	Z+2, r24	; 0x02
    26b2:	89 a5       	ldd	r24, Y+41	; 0x29
    26b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    26b6:	ab a5       	ldd	r26, Y+43	; 0x2b
    26b8:	bc a5       	ldd	r27, Y+44	; 0x2c
    26ba:	84 83       	std	Z+4, r24	; 0x04
    26bc:	95 83       	std	Z+5, r25	; 0x05
    26be:	a6 83       	std	Z+6, r26	; 0x06
    26c0:	b7 83       	std	Z+7, r27	; 0x07
    26c2:	0e 94 10 16 	call	0x2c20	; 0x2c20 <sprintf>
    26c6:	8d b7       	in	r24, 0x3d	; 61
    26c8:	9e b7       	in	r25, 0x3e	; 62
    26ca:	08 96       	adiw	r24, 0x08	; 8
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	9e bf       	out	0x3e, r25	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	8d bf       	out	0x3d, r24	; 61
	LCD_voidSendString(str);
    26d6:	ce 01       	movw	r24, r28
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	0e 94 0d 13 	call	0x261a	; 0x261a <LCD_voidSendString>
}
    26de:	ac 96       	adiw	r28, 0x2c	; 44
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	08 95       	ret

000026f0 <LCD_voidSendFloat>:

void LCD_voidSendFloat(f64 Copy_f32Data) {
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	2c 97       	sbiw	r28, 0x0c	; 12
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	de bf       	out	0x3e, r29	; 62
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	cd bf       	out	0x3d, r28	; 61
    2704:	69 87       	std	Y+9, r22	; 0x09
    2706:	7a 87       	std	Y+10, r23	; 0x0a
    2708:	8b 87       	std	Y+11, r24	; 0x0b
    270a:	9c 87       	std	Y+12, r25	; 0x0c
	s32 int_part;
	f32 frac_part;
	// separate integer and fractional parts
	int_part = (s32) Copy_f32Data;
    270c:	69 85       	ldd	r22, Y+9	; 0x09
    270e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2710:	8b 85       	ldd	r24, Y+11	; 0x0b
    2712:	9c 85       	ldd	r25, Y+12	; 0x0c
    2714:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	af 83       	std	Y+7, r26	; 0x07
    2722:	b8 87       	std	Y+8, r27	; 0x08
	frac_part = Copy_f32Data - int_part;
    2724:	6d 81       	ldd	r22, Y+5	; 0x05
    2726:	7e 81       	ldd	r23, Y+6	; 0x06
    2728:	8f 81       	ldd	r24, Y+7	; 0x07
    272a:	98 85       	ldd	r25, Y+8	; 0x08
    272c:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    2730:	9b 01       	movw	r18, r22
    2732:	ac 01       	movw	r20, r24
    2734:	69 85       	ldd	r22, Y+9	; 0x09
    2736:	7a 85       	ldd	r23, Y+10	; 0x0a
    2738:	8b 85       	ldd	r24, Y+11	; 0x0b
    273a:	9c 85       	ldd	r25, Y+12	; 0x0c
    273c:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	9a 83       	std	Y+2, r25	; 0x02
    2748:	ab 83       	std	Y+3, r26	; 0x03
    274a:	bc 83       	std	Y+4, r27	; 0x04
	frac_part = (s32) (frac_part * 1000);
    274c:	69 81       	ldd	r22, Y+1	; 0x01
    274e:	7a 81       	ldd	r23, Y+2	; 0x02
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	9c 81       	ldd	r25, Y+4	; 0x04
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	4a e7       	ldi	r20, 0x7A	; 122
    275a:	54 e4       	ldi	r21, 0x44	; 68
    275c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	9a 83       	std	Y+2, r25	; 0x02
    2780:	ab 83       	std	Y+3, r26	; 0x03
    2782:	bc 83       	std	Y+4, r27	; 0x04
	LCD_voidSendIntger(int_part);
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	9e 81       	ldd	r25, Y+6	; 0x06
    2788:	af 81       	ldd	r26, Y+7	; 0x07
    278a:	b8 85       	ldd	r27, Y+8	; 0x08
    278c:	bc 01       	movw	r22, r24
    278e:	cd 01       	movw	r24, r26
    2790:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_voidSendIntger>
	LCD_voidSendChar('.');
    2794:	8e e2       	ldi	r24, 0x2E	; 46
    2796:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_voidSendChar>
	LCD_voidSendIntger(frac_part);
    279a:	69 81       	ldd	r22, Y+1	; 0x01
    279c:	7a 81       	ldd	r23, Y+2	; 0x02
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	9c 81       	ldd	r25, Y+4	; 0x04
    27a2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_voidSendIntger>
}
    27b2:	2c 96       	adiw	r28, 0x0c	; 12
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <LCD_voidGotoxy>:
/***************************************************************************************/
/* Description! Interface to start the writing process at certain digit in the LCD     */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidGotoxy(u8 Copy_u8Y, u8 Copy_u8X) {
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <LCD_voidGotoxy+0x6>
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <LCD_voidGotoxy+0x8>
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <LCD_voidGotoxy+0xa>
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	8b 83       	std	Y+3, r24	; 0x03
    27d4:	6c 83       	std	Y+4, r22	; 0x04
	u8 line;

		switch (Copy_u8Y) {
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	28 2f       	mov	r18, r24
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	3e 83       	std	Y+6, r19	; 0x06
    27de:	2d 83       	std	Y+5, r18	; 0x05
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	81 30       	cpi	r24, 0x01	; 1
    27e6:	91 05       	cpc	r25, r1
    27e8:	b9 f0       	breq	.+46     	; 0x2818 <LCD_voidGotoxy+0x54>
    27ea:	2d 81       	ldd	r18, Y+5	; 0x05
    27ec:	3e 81       	ldd	r19, Y+6	; 0x06
    27ee:	22 30       	cpi	r18, 0x02	; 2
    27f0:	31 05       	cpc	r19, r1
    27f2:	2c f4       	brge	.+10     	; 0x27fe <LCD_voidGotoxy+0x3a>
    27f4:	8d 81       	ldd	r24, Y+5	; 0x05
    27f6:	9e 81       	ldd	r25, Y+6	; 0x06
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	61 f0       	breq	.+24     	; 0x2814 <LCD_voidGotoxy+0x50>
    27fc:	15 c0       	rjmp	.+42     	; 0x2828 <LCD_voidGotoxy+0x64>
    27fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2800:	3e 81       	ldd	r19, Y+6	; 0x06
    2802:	22 30       	cpi	r18, 0x02	; 2
    2804:	31 05       	cpc	r19, r1
    2806:	59 f0       	breq	.+22     	; 0x281e <LCD_voidGotoxy+0x5a>
    2808:	8d 81       	ldd	r24, Y+5	; 0x05
    280a:	9e 81       	ldd	r25, Y+6	; 0x06
    280c:	83 30       	cpi	r24, 0x03	; 3
    280e:	91 05       	cpc	r25, r1
    2810:	49 f0       	breq	.+18     	; 0x2824 <LCD_voidGotoxy+0x60>
    2812:	0a c0       	rjmp	.+20     	; 0x2828 <LCD_voidGotoxy+0x64>
		case 0:
			line = 0x00;
    2814:	1a 82       	std	Y+2, r1	; 0x02
    2816:	08 c0       	rjmp	.+16     	; 0x2828 <LCD_voidGotoxy+0x64>

			break;
		case 1:
			line = 0x40;
    2818:	80 e4       	ldi	r24, 0x40	; 64
    281a:	8a 83       	std	Y+2, r24	; 0x02
    281c:	05 c0       	rjmp	.+10     	; 0x2828 <LCD_voidGotoxy+0x64>
			break;
		case 2:
			line = 0x14;
    281e:	84 e1       	ldi	r24, 0x14	; 20
    2820:	8a 83       	std	Y+2, r24	; 0x02
    2822:	02 c0       	rjmp	.+4      	; 0x2828 <LCD_voidGotoxy+0x64>
			break;
		case 3:
			line = 0x54;
    2824:	84 e5       	ldi	r24, 0x54	; 84
    2826:	8a 83       	std	Y+2, r24	; 0x02
			break;
		default:
			break;
		}
		u8 ddram_address = line + Copy_u8X;
    2828:	9a 81       	ldd	r25, Y+2	; 0x02
    282a:	8c 81       	ldd	r24, Y+4	; 0x04
    282c:	89 0f       	add	r24, r25
    282e:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendCmnd(0x80 | ddram_address);
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	80 68       	ori	r24, 0x80	; 128
    2834:	88 2f       	mov	r24, r24
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidSendCmnd>
	}
    283c:	26 96       	adiw	r28, 0x06	; 6
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	08 95       	ret

0000284e <LCD_voidSendExtraChar>:
/***************************************************************************************/
/* Description! Interface to write extra characters saved in the CGRAM                 */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendExtraChar(u8 Copy_u8Y, u8 Copy_u8X) {
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
    2856:	62 97       	sbiw	r28, 0x12	; 18
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	89 8b       	std	Y+17, r24	; 0x11
    2864:	6a 8b       	std	Y+18, r22	; 0x12
	u8 iteration1, iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCmnd(64);
    2866:	80 e4       	ldi	r24, 0x40	; 64
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidSendCmnd>
	for (iteration1 = 0; iteration1 < 64; iteration1++) {
    286e:	18 8a       	std	Y+16, r1	; 0x10
    2870:	0c c0       	rjmp	.+24     	; 0x288a <LCD_voidSendExtraChar+0x3c>
		LCD_voidSendChar(ExtraChar[iteration1]);
    2872:	88 89       	ldd	r24, Y+16	; 0x10
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	fc 01       	movw	r30, r24
    287a:	e4 59       	subi	r30, 0x94	; 148
    287c:	fe 4f       	sbci	r31, 0xFE	; 254
    287e:	80 81       	ld	r24, Z
    2880:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_voidSendChar>
void LCD_voidSendExtraChar(u8 Copy_u8Y, u8 Copy_u8X) {
	u8 iteration1, iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCmnd(64);
	for (iteration1 = 0; iteration1 < 64; iteration1++) {
    2884:	88 89       	ldd	r24, Y+16	; 0x10
    2886:	8f 5f       	subi	r24, 0xFF	; 255
    2888:	88 8b       	std	Y+16, r24	; 0x10
    288a:	88 89       	ldd	r24, Y+16	; 0x10
    288c:	80 34       	cpi	r24, 0x40	; 64
    288e:	88 f3       	brcs	.-30     	; 0x2872 <LCD_voidSendExtraChar+0x24>
		LCD_voidSendChar(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_voidSendCmnd(128);
    2890:	80 e8       	ldi	r24, 0x80	; 128
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidSendCmnd>
	LCD_voidGotoxy(Copy_u8Y, Copy_u8X);
    2898:	89 89       	ldd	r24, Y+17	; 0x11
    289a:	6a 89       	ldd	r22, Y+18	; 0x12
    289c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <LCD_voidGotoxy>
	/*First eight character which saved at CGRAM*/
	for (iteration2 = 0; iteration2 <= 7; iteration2++) {
    28a0:	1f 86       	std	Y+15, r1	; 0x0f
    28a2:	78 c0       	rjmp	.+240    	; 0x2994 <LCD_voidSendExtraChar+0x146>
		/* Write bytes of DDRAM */
		LCD_voidSendChar(iteration2);
    28a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a6:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_voidSendChar>
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	a0 ea       	ldi	r26, 0xA0	; 160
    28b0:	b0 e4       	ldi	r27, 0x40	; 64
    28b2:	8b 87       	std	Y+11, r24	; 0x0b
    28b4:	9c 87       	std	Y+12, r25	; 0x0c
    28b6:	ad 87       	std	Y+13, r26	; 0x0d
    28b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    28bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28be:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	4a ef       	ldi	r20, 0xFA	; 250
    28c8:	54 e4       	ldi	r21, 0x44	; 68
    28ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	8f 83       	std	Y+7, r24	; 0x07
    28d4:	98 87       	std	Y+8, r25	; 0x08
    28d6:	a9 87       	std	Y+9, r26	; 0x09
    28d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28da:	6f 81       	ldd	r22, Y+7	; 0x07
    28dc:	78 85       	ldd	r23, Y+8	; 0x08
    28de:	89 85       	ldd	r24, Y+9	; 0x09
    28e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e8       	ldi	r20, 0x80	; 128
    28e8:	5f e3       	ldi	r21, 0x3F	; 63
    28ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28ee:	88 23       	and	r24, r24
    28f0:	2c f4       	brge	.+10     	; 0x28fc <LCD_voidSendExtraChar+0xae>
		__ticks = 1;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	9e 83       	std	Y+6, r25	; 0x06
    28f8:	8d 83       	std	Y+5, r24	; 0x05
    28fa:	3f c0       	rjmp	.+126    	; 0x297a <LCD_voidSendExtraChar+0x12c>
	else if (__tmp > 65535)
    28fc:	6f 81       	ldd	r22, Y+7	; 0x07
    28fe:	78 85       	ldd	r23, Y+8	; 0x08
    2900:	89 85       	ldd	r24, Y+9	; 0x09
    2902:	9a 85       	ldd	r25, Y+10	; 0x0a
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	3f ef       	ldi	r19, 0xFF	; 255
    2908:	4f e7       	ldi	r20, 0x7F	; 127
    290a:	57 e4       	ldi	r21, 0x47	; 71
    290c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2910:	18 16       	cp	r1, r24
    2912:	4c f5       	brge	.+82     	; 0x2966 <LCD_voidSendExtraChar+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2914:	6b 85       	ldd	r22, Y+11	; 0x0b
    2916:	7c 85       	ldd	r23, Y+12	; 0x0c
    2918:	8d 85       	ldd	r24, Y+13	; 0x0d
    291a:	9e 85       	ldd	r25, Y+14	; 0x0e
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e2       	ldi	r20, 0x20	; 32
    2922:	51 e4       	ldi	r21, 0x41	; 65
    2924:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9e 83       	std	Y+6, r25	; 0x06
    293a:	8d 83       	std	Y+5, r24	; 0x05
    293c:	0f c0       	rjmp	.+30     	; 0x295c <LCD_voidSendExtraChar+0x10e>
    293e:	88 ec       	ldi	r24, 0xC8	; 200
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9c 83       	std	Y+4, r25	; 0x04
    2944:	8b 83       	std	Y+3, r24	; 0x03
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	9c 81       	ldd	r25, Y+4	; 0x04
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <LCD_voidSendExtraChar+0xfc>
    294e:	9c 83       	std	Y+4, r25	; 0x04
    2950:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2952:	8d 81       	ldd	r24, Y+5	; 0x05
    2954:	9e 81       	ldd	r25, Y+6	; 0x06
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295c:	8d 81       	ldd	r24, Y+5	; 0x05
    295e:	9e 81       	ldd	r25, Y+6	; 0x06
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	69 f7       	brne	.-38     	; 0x293e <LCD_voidSendExtraChar+0xf0>
    2964:	14 c0       	rjmp	.+40     	; 0x298e <LCD_voidSendExtraChar+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2966:	6f 81       	ldd	r22, Y+7	; 0x07
    2968:	78 85       	ldd	r23, Y+8	; 0x08
    296a:	89 85       	ldd	r24, Y+9	; 0x09
    296c:	9a 85       	ldd	r25, Y+10	; 0x0a
    296e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9e 83       	std	Y+6, r25	; 0x06
    2978:	8d 83       	std	Y+5, r24	; 0x05
    297a:	8d 81       	ldd	r24, Y+5	; 0x05
    297c:	9e 81       	ldd	r25, Y+6	; 0x06
    297e:	9a 83       	std	Y+2, r25	; 0x02
    2980:	89 83       	std	Y+1, r24	; 0x01
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	9a 81       	ldd	r25, Y+2	; 0x02
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <LCD_voidSendExtraChar+0x138>
    298a:	9a 83       	std	Y+2, r25	; 0x02
    298c:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_voidSendCmnd(128);
	LCD_voidGotoxy(Copy_u8Y, Copy_u8X);
	/*First eight character which saved at CGRAM*/
	for (iteration2 = 0; iteration2 <= 7; iteration2++) {
    298e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2990:	8f 5f       	subi	r24, 0xFF	; 255
    2992:	8f 87       	std	Y+15, r24	; 0x0f
    2994:	8f 85       	ldd	r24, Y+15	; 0x0f
    2996:	88 30       	cpi	r24, 0x08	; 8
    2998:	08 f4       	brcc	.+2      	; 0x299c <LCD_voidSendExtraChar+0x14e>
    299a:	84 cf       	rjmp	.-248    	; 0x28a4 <LCD_voidSendExtraChar+0x56>
		/* Write bytes of DDRAM */
		LCD_voidSendChar(iteration2);

		_delay_ms(5);
	}
}
    299c:	62 96       	adiw	r28, 0x12	; 18
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	f8 94       	cli
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	08 95       	ret

000029ae <LCD_voidWriteSpecialCharacter>:

/*  New */
void LCD_voidWriteSpecialCharacter(u8 *Copy_pu8Pattern, u8 Copy_u8PatternNumber,
		u8 Copy_u8XPos, u8 Copy_u8YPos) {
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	27 97       	sbiw	r28, 0x07	; 7
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	de bf       	out	0x3e, r29	; 62
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	cd bf       	out	0x3d, r28	; 61
    29c2:	9c 83       	std	Y+4, r25	; 0x04
    29c4:	8b 83       	std	Y+3, r24	; 0x03
    29c6:	6d 83       	std	Y+5, r22	; 0x05
    29c8:	4e 83       	std	Y+6, r20	; 0x06
    29ca:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address, Local_u8PatternCounter;

	/*1- Calculate the required address of CGRAM*/
	Local_u8Address = Copy_u8PatternNumber * 8;
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	88 2f       	mov	r24, r24
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	88 0f       	add	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	88 0f       	add	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	8a 83       	std	Y+2, r24	; 0x02

	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	88 2f       	mov	r24, r24
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	80 5c       	subi	r24, 0xC0	; 192
    29e8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ea:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <LCD_voidSendCmnd>

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
    29ee:	19 82       	std	Y+1, r1	; 0x01
    29f0:	0e c0       	rjmp	.+28     	; 0x2a0e <LCD_voidWriteSpecialCharacter+0x60>
			Local_u8PatternCounter++) {
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8PatternCounter]);
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	28 2f       	mov	r18, r24
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	9c 81       	ldd	r25, Y+4	; 0x04
    29fc:	fc 01       	movw	r30, r24
    29fe:	e2 0f       	add	r30, r18
    2a00:	f3 1f       	adc	r31, r19
    2a02:	80 81       	ld	r24, Z
    2a04:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_voidSendChar>
	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
			Local_u8PatternCounter++) {
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	8f 5f       	subi	r24, 0xFF	; 255
    2a0c:	89 83       	std	Y+1, r24	; 0x01

	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	88 30       	cpi	r24, 0x08	; 8
    2a12:	78 f3       	brcs	.-34     	; 0x29f2 <LCD_voidWriteSpecialCharacter+0x44>
			Local_u8PatternCounter++) {
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8PatternCounter]);
	}

	/*4- shift the address counter to the DDRAM*/
	LCD_voidGotoxy(Copy_u8XPos, Copy_u8YPos);
    2a14:	8e 81       	ldd	r24, Y+6	; 0x06
    2a16:	6f 81       	ldd	r22, Y+7	; 0x07
    2a18:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <LCD_voidGotoxy>

	/*5- Display the CGRAM pattern on the LCD*/
	LCD_voidSendChar(Copy_u8PatternNumber);
    2a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1e:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_voidSendChar>

}
    2a22:	27 96       	adiw	r28, 0x07	; 7
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	08 95       	ret

00002a34 <main>:
/* HAL */

/* Functions Declaration */
void delay_ms(u16 milliseconds);

int main(void) {
    2a34:	df 93       	push	r29
    2a36:	cf 93       	push	r28
    2a38:	0f 92       	push	r0
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62

	/* Initialization Functions */
	DIO_voidInit();
    2a3e:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_voidInit>
	LCD_voidInit();
    2a42:	0e 94 86 0c 	call	0x190c	; 0x190c <LCD_voidInit>
	I2C_voidMasterInit();
    2a46:	0e 94 11 0b 	call	0x1622	; 0x1622 <I2C_voidMasterInit>
	/* Local Variables */
	u8 u8LocaReturnData;


	/* Write data on EEPROM */
	EEPROM_u8WriteDataByte(2, 23);
    2a4a:	82 e0       	ldi	r24, 0x02	; 2
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	67 e1       	ldi	r22, 0x17	; 23
    2a50:	70 e0       	ldi	r23, 0x00	; 0
    2a52:	0e 94 b9 0a 	call	0x1572	; 0x1572 <EEPROM_u8WriteDataByte>

	/* You have to wait some time before read the data */
	delay_ms(10);
    2a56:	8a e0       	ldi	r24, 0x0A	; 10
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	0e 94 41 15 	call	0x2a82	; 0x2a82 <delay_ms>

	/* Read data from EEPROM */
	EEPROM_u8ReadDataByte(2, &u8LocaReturnData);
    2a5e:	82 e0       	ldi	r24, 0x02	; 2
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	9e 01       	movw	r18, r28
    2a64:	2f 5f       	subi	r18, 0xFF	; 255
    2a66:	3f 4f       	sbci	r19, 0xFF	; 255
    2a68:	b9 01       	movw	r22, r18
    2a6a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <EEPROM_u8ReadDataByte>

	/* Print data on the LCD */
	LCD_voidSendIntger(u8LocaReturnData);
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	88 2f       	mov	r24, r24
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	a0 e0       	ldi	r26, 0x00	; 0
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	bc 01       	movw	r22, r24
    2a7a:	cd 01       	movw	r24, r26
    2a7c:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_voidSendIntger>
    2a80:	ff cf       	rjmp	.-2      	; 0x2a80 <main+0x4c>

00002a82 <delay_ms>:

	return 0;
}

/* Functions Implementation */
void delay_ms(u16 milliseconds) {
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	61 97       	sbiw	r28, 0x11	; 17
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	de bf       	out	0x3e, r29	; 62
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	cd bf       	out	0x3d, r28	; 61
    2a96:	98 8b       	std	Y+16, r25	; 0x10
    2a98:	8f 87       	std	Y+15, r24	; 0x0f
    2a9a:	72 c0       	rjmp	.+228    	; 0x2b80 <delay_ms+0xfe>
	while (milliseconds--) {
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	a0 e8       	ldi	r26, 0x80	; 128
    2aa2:	bf e3       	ldi	r27, 0x3F	; 63
    2aa4:	8b 87       	std	Y+11, r24	; 0x0b
    2aa6:	9c 87       	std	Y+12, r25	; 0x0c
    2aa8:	ad 87       	std	Y+13, r26	; 0x0d
    2aaa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	4a ef       	ldi	r20, 0xFA	; 250
    2aba:	54 e4       	ldi	r21, 0x44	; 68
    2abc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	8f 83       	std	Y+7, r24	; 0x07
    2ac6:	98 87       	std	Y+8, r25	; 0x08
    2ac8:	a9 87       	std	Y+9, r26	; 0x09
    2aca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2acc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ace:	78 85       	ldd	r23, Y+8	; 0x08
    2ad0:	89 85       	ldd	r24, Y+9	; 0x09
    2ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e8       	ldi	r20, 0x80	; 128
    2ada:	5f e3       	ldi	r21, 0x3F	; 63
    2adc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ae0:	88 23       	and	r24, r24
    2ae2:	2c f4       	brge	.+10     	; 0x2aee <delay_ms+0x6c>
		__ticks = 1;
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	9e 83       	std	Y+6, r25	; 0x06
    2aea:	8d 83       	std	Y+5, r24	; 0x05
    2aec:	3f c0       	rjmp	.+126    	; 0x2b6c <delay_ms+0xea>
	else if (__tmp > 65535)
    2aee:	6f 81       	ldd	r22, Y+7	; 0x07
    2af0:	78 85       	ldd	r23, Y+8	; 0x08
    2af2:	89 85       	ldd	r24, Y+9	; 0x09
    2af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	3f ef       	ldi	r19, 0xFF	; 255
    2afa:	4f e7       	ldi	r20, 0x7F	; 127
    2afc:	57 e4       	ldi	r21, 0x47	; 71
    2afe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b02:	18 16       	cp	r1, r24
    2b04:	4c f5       	brge	.+82     	; 0x2b58 <delay_ms+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	40 e2       	ldi	r20, 0x20	; 32
    2b14:	51 e4       	ldi	r21, 0x41	; 65
    2b16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	bc 01       	movw	r22, r24
    2b20:	cd 01       	movw	r24, r26
    2b22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	9e 83       	std	Y+6, r25	; 0x06
    2b2c:	8d 83       	std	Y+5, r24	; 0x05
    2b2e:	0f c0       	rjmp	.+30     	; 0x2b4e <delay_ms+0xcc>
    2b30:	88 ec       	ldi	r24, 0xC8	; 200
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	9c 83       	std	Y+4, r25	; 0x04
    2b36:	8b 83       	std	Y+3, r24	; 0x03
    2b38:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	f1 f7       	brne	.-4      	; 0x2b3c <delay_ms+0xba>
    2b40:	9c 83       	std	Y+4, r25	; 0x04
    2b42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b44:	8d 81       	ldd	r24, Y+5	; 0x05
    2b46:	9e 81       	ldd	r25, Y+6	; 0x06
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	9e 83       	std	Y+6, r25	; 0x06
    2b4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b50:	9e 81       	ldd	r25, Y+6	; 0x06
    2b52:	00 97       	sbiw	r24, 0x00	; 0
    2b54:	69 f7       	brne	.-38     	; 0x2b30 <delay_ms+0xae>
    2b56:	14 c0       	rjmp	.+40     	; 0x2b80 <delay_ms+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b58:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5a:	78 85       	ldd	r23, Y+8	; 0x08
    2b5c:	89 85       	ldd	r24, Y+9	; 0x09
    2b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	9e 83       	std	Y+6, r25	; 0x06
    2b6a:	8d 83       	std	Y+5, r24	; 0x05
    2b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b70:	9a 83       	std	Y+2, r25	; 0x02
    2b72:	89 83       	std	Y+1, r24	; 0x01
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	9a 81       	ldd	r25, Y+2	; 0x02
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <delay_ms+0xf6>
    2b7c:	9a 83       	std	Y+2, r25	; 0x02
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    2b80:	19 8a       	std	Y+17, r1	; 0x11
    2b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b84:	98 89       	ldd	r25, Y+16	; 0x10
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	11 f0       	breq	.+4      	; 0x2b8e <delay_ms+0x10c>
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	89 8b       	std	Y+17, r24	; 0x11
    2b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b90:	98 89       	ldd	r25, Y+16	; 0x10
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	98 8b       	std	Y+16, r25	; 0x10
    2b96:	8f 87       	std	Y+15, r24	; 0x0f
    2b98:	89 89       	ldd	r24, Y+17	; 0x11
    2b9a:	88 23       	and	r24, r24
    2b9c:	09 f0       	breq	.+2      	; 0x2ba0 <delay_ms+0x11e>
    2b9e:	7e cf       	rjmp	.-260    	; 0x2a9c <delay_ms+0x1a>
		_delay_ms(1);
	}
}
    2ba0:	61 96       	adiw	r28, 0x11	; 17
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	cd bf       	out	0x3d, r28	; 61
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	08 95       	ret

00002bb2 <__prologue_saves__>:
    2bb2:	2f 92       	push	r2
    2bb4:	3f 92       	push	r3
    2bb6:	4f 92       	push	r4
    2bb8:	5f 92       	push	r5
    2bba:	6f 92       	push	r6
    2bbc:	7f 92       	push	r7
    2bbe:	8f 92       	push	r8
    2bc0:	9f 92       	push	r9
    2bc2:	af 92       	push	r10
    2bc4:	bf 92       	push	r11
    2bc6:	cf 92       	push	r12
    2bc8:	df 92       	push	r13
    2bca:	ef 92       	push	r14
    2bcc:	ff 92       	push	r15
    2bce:	0f 93       	push	r16
    2bd0:	1f 93       	push	r17
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	ca 1b       	sub	r28, r26
    2bdc:	db 0b       	sbc	r29, r27
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	09 94       	ijmp

00002bea <__epilogue_restores__>:
    2bea:	2a 88       	ldd	r2, Y+18	; 0x12
    2bec:	39 88       	ldd	r3, Y+17	; 0x11
    2bee:	48 88       	ldd	r4, Y+16	; 0x10
    2bf0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bf2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bf4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bf6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bf8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bfa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bfc:	b9 84       	ldd	r11, Y+9	; 0x09
    2bfe:	c8 84       	ldd	r12, Y+8	; 0x08
    2c00:	df 80       	ldd	r13, Y+7	; 0x07
    2c02:	ee 80       	ldd	r14, Y+6	; 0x06
    2c04:	fd 80       	ldd	r15, Y+5	; 0x05
    2c06:	0c 81       	ldd	r16, Y+4	; 0x04
    2c08:	1b 81       	ldd	r17, Y+3	; 0x03
    2c0a:	aa 81       	ldd	r26, Y+2	; 0x02
    2c0c:	b9 81       	ldd	r27, Y+1	; 0x01
    2c0e:	ce 0f       	add	r28, r30
    2c10:	d1 1d       	adc	r29, r1
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	ed 01       	movw	r28, r26
    2c1e:	08 95       	ret

00002c20 <sprintf>:
    2c20:	ae e0       	ldi	r26, 0x0E	; 14
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	e6 e1       	ldi	r30, 0x16	; 22
    2c26:	f6 e1       	ldi	r31, 0x16	; 22
    2c28:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__prologue_saves__+0x1c>
    2c2c:	0d 89       	ldd	r16, Y+21	; 0x15
    2c2e:	1e 89       	ldd	r17, Y+22	; 0x16
    2c30:	86 e0       	ldi	r24, 0x06	; 6
    2c32:	8c 83       	std	Y+4, r24	; 0x04
    2c34:	1a 83       	std	Y+2, r17	; 0x02
    2c36:	09 83       	std	Y+1, r16	; 0x01
    2c38:	8f ef       	ldi	r24, 0xFF	; 255
    2c3a:	9f e7       	ldi	r25, 0x7F	; 127
    2c3c:	9e 83       	std	Y+6, r25	; 0x06
    2c3e:	8d 83       	std	Y+5, r24	; 0x05
    2c40:	9e 01       	movw	r18, r28
    2c42:	27 5e       	subi	r18, 0xE7	; 231
    2c44:	3f 4f       	sbci	r19, 0xFF	; 255
    2c46:	ce 01       	movw	r24, r28
    2c48:	01 96       	adiw	r24, 0x01	; 1
    2c4a:	6f 89       	ldd	r22, Y+23	; 0x17
    2c4c:	78 8d       	ldd	r23, Y+24	; 0x18
    2c4e:	a9 01       	movw	r20, r18
    2c50:	0e 94 34 16 	call	0x2c68	; 0x2c68 <vfprintf>
    2c54:	2f 81       	ldd	r18, Y+7	; 0x07
    2c56:	38 85       	ldd	r19, Y+8	; 0x08
    2c58:	02 0f       	add	r16, r18
    2c5a:	13 1f       	adc	r17, r19
    2c5c:	f8 01       	movw	r30, r16
    2c5e:	10 82       	st	Z, r1
    2c60:	2e 96       	adiw	r28, 0x0e	; 14
    2c62:	e4 e0       	ldi	r30, 0x04	; 4
    2c64:	0c 94 03 16 	jmp	0x2c06	; 0x2c06 <__epilogue_restores__+0x1c>

00002c68 <vfprintf>:
    2c68:	ab e0       	ldi	r26, 0x0B	; 11
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	ea e3       	ldi	r30, 0x3A	; 58
    2c6e:	f6 e1       	ldi	r31, 0x16	; 22
    2c70:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__prologue_saves__>
    2c74:	3c 01       	movw	r6, r24
    2c76:	2b 01       	movw	r4, r22
    2c78:	5a 01       	movw	r10, r20
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	17 82       	std	Z+7, r1	; 0x07
    2c7e:	16 82       	std	Z+6, r1	; 0x06
    2c80:	83 81       	ldd	r24, Z+3	; 0x03
    2c82:	81 fd       	sbrc	r24, 1
    2c84:	03 c0       	rjmp	.+6      	; 0x2c8c <vfprintf+0x24>
    2c86:	6f ef       	ldi	r22, 0xFF	; 255
    2c88:	7f ef       	ldi	r23, 0xFF	; 255
    2c8a:	c6 c1       	rjmp	.+908    	; 0x3018 <vfprintf+0x3b0>
    2c8c:	9a e0       	ldi	r25, 0x0A	; 10
    2c8e:	89 2e       	mov	r8, r25
    2c90:	1e 01       	movw	r2, r28
    2c92:	08 94       	sec
    2c94:	21 1c       	adc	r2, r1
    2c96:	31 1c       	adc	r3, r1
    2c98:	f3 01       	movw	r30, r6
    2c9a:	23 81       	ldd	r18, Z+3	; 0x03
    2c9c:	f2 01       	movw	r30, r4
    2c9e:	23 fd       	sbrc	r18, 3
    2ca0:	85 91       	lpm	r24, Z+
    2ca2:	23 ff       	sbrs	r18, 3
    2ca4:	81 91       	ld	r24, Z+
    2ca6:	2f 01       	movw	r4, r30
    2ca8:	88 23       	and	r24, r24
    2caa:	09 f4       	brne	.+2      	; 0x2cae <vfprintf+0x46>
    2cac:	b2 c1       	rjmp	.+868    	; 0x3012 <vfprintf+0x3aa>
    2cae:	85 32       	cpi	r24, 0x25	; 37
    2cb0:	39 f4       	brne	.+14     	; 0x2cc0 <vfprintf+0x58>
    2cb2:	23 fd       	sbrc	r18, 3
    2cb4:	85 91       	lpm	r24, Z+
    2cb6:	23 ff       	sbrs	r18, 3
    2cb8:	81 91       	ld	r24, Z+
    2cba:	2f 01       	movw	r4, r30
    2cbc:	85 32       	cpi	r24, 0x25	; 37
    2cbe:	29 f4       	brne	.+10     	; 0x2cca <vfprintf+0x62>
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	b3 01       	movw	r22, r6
    2cc4:	0e 94 27 18 	call	0x304e	; 0x304e <fputc>
    2cc8:	e7 cf       	rjmp	.-50     	; 0x2c98 <vfprintf+0x30>
    2cca:	98 2f       	mov	r25, r24
    2ccc:	ff 24       	eor	r15, r15
    2cce:	ee 24       	eor	r14, r14
    2cd0:	99 24       	eor	r9, r9
    2cd2:	ff e1       	ldi	r31, 0x1F	; 31
    2cd4:	ff 15       	cp	r31, r15
    2cd6:	d0 f0       	brcs	.+52     	; 0x2d0c <vfprintf+0xa4>
    2cd8:	9b 32       	cpi	r25, 0x2B	; 43
    2cda:	69 f0       	breq	.+26     	; 0x2cf6 <vfprintf+0x8e>
    2cdc:	9c 32       	cpi	r25, 0x2C	; 44
    2cde:	28 f4       	brcc	.+10     	; 0x2cea <vfprintf+0x82>
    2ce0:	90 32       	cpi	r25, 0x20	; 32
    2ce2:	59 f0       	breq	.+22     	; 0x2cfa <vfprintf+0x92>
    2ce4:	93 32       	cpi	r25, 0x23	; 35
    2ce6:	91 f4       	brne	.+36     	; 0x2d0c <vfprintf+0xa4>
    2ce8:	0e c0       	rjmp	.+28     	; 0x2d06 <vfprintf+0x9e>
    2cea:	9d 32       	cpi	r25, 0x2D	; 45
    2cec:	49 f0       	breq	.+18     	; 0x2d00 <vfprintf+0x98>
    2cee:	90 33       	cpi	r25, 0x30	; 48
    2cf0:	69 f4       	brne	.+26     	; 0x2d0c <vfprintf+0xa4>
    2cf2:	41 e0       	ldi	r20, 0x01	; 1
    2cf4:	24 c0       	rjmp	.+72     	; 0x2d3e <vfprintf+0xd6>
    2cf6:	52 e0       	ldi	r21, 0x02	; 2
    2cf8:	f5 2a       	or	r15, r21
    2cfa:	84 e0       	ldi	r24, 0x04	; 4
    2cfc:	f8 2a       	or	r15, r24
    2cfe:	28 c0       	rjmp	.+80     	; 0x2d50 <vfprintf+0xe8>
    2d00:	98 e0       	ldi	r25, 0x08	; 8
    2d02:	f9 2a       	or	r15, r25
    2d04:	25 c0       	rjmp	.+74     	; 0x2d50 <vfprintf+0xe8>
    2d06:	e0 e1       	ldi	r30, 0x10	; 16
    2d08:	fe 2a       	or	r15, r30
    2d0a:	22 c0       	rjmp	.+68     	; 0x2d50 <vfprintf+0xe8>
    2d0c:	f7 fc       	sbrc	r15, 7
    2d0e:	29 c0       	rjmp	.+82     	; 0x2d62 <vfprintf+0xfa>
    2d10:	89 2f       	mov	r24, r25
    2d12:	80 53       	subi	r24, 0x30	; 48
    2d14:	8a 30       	cpi	r24, 0x0A	; 10
    2d16:	70 f4       	brcc	.+28     	; 0x2d34 <vfprintf+0xcc>
    2d18:	f6 fe       	sbrs	r15, 6
    2d1a:	05 c0       	rjmp	.+10     	; 0x2d26 <vfprintf+0xbe>
    2d1c:	98 9c       	mul	r9, r8
    2d1e:	90 2c       	mov	r9, r0
    2d20:	11 24       	eor	r1, r1
    2d22:	98 0e       	add	r9, r24
    2d24:	15 c0       	rjmp	.+42     	; 0x2d50 <vfprintf+0xe8>
    2d26:	e8 9c       	mul	r14, r8
    2d28:	e0 2c       	mov	r14, r0
    2d2a:	11 24       	eor	r1, r1
    2d2c:	e8 0e       	add	r14, r24
    2d2e:	f0 e2       	ldi	r31, 0x20	; 32
    2d30:	ff 2a       	or	r15, r31
    2d32:	0e c0       	rjmp	.+28     	; 0x2d50 <vfprintf+0xe8>
    2d34:	9e 32       	cpi	r25, 0x2E	; 46
    2d36:	29 f4       	brne	.+10     	; 0x2d42 <vfprintf+0xda>
    2d38:	f6 fc       	sbrc	r15, 6
    2d3a:	6b c1       	rjmp	.+726    	; 0x3012 <vfprintf+0x3aa>
    2d3c:	40 e4       	ldi	r20, 0x40	; 64
    2d3e:	f4 2a       	or	r15, r20
    2d40:	07 c0       	rjmp	.+14     	; 0x2d50 <vfprintf+0xe8>
    2d42:	9c 36       	cpi	r25, 0x6C	; 108
    2d44:	19 f4       	brne	.+6      	; 0x2d4c <vfprintf+0xe4>
    2d46:	50 e8       	ldi	r21, 0x80	; 128
    2d48:	f5 2a       	or	r15, r21
    2d4a:	02 c0       	rjmp	.+4      	; 0x2d50 <vfprintf+0xe8>
    2d4c:	98 36       	cpi	r25, 0x68	; 104
    2d4e:	49 f4       	brne	.+18     	; 0x2d62 <vfprintf+0xfa>
    2d50:	f2 01       	movw	r30, r4
    2d52:	23 fd       	sbrc	r18, 3
    2d54:	95 91       	lpm	r25, Z+
    2d56:	23 ff       	sbrs	r18, 3
    2d58:	91 91       	ld	r25, Z+
    2d5a:	2f 01       	movw	r4, r30
    2d5c:	99 23       	and	r25, r25
    2d5e:	09 f0       	breq	.+2      	; 0x2d62 <vfprintf+0xfa>
    2d60:	b8 cf       	rjmp	.-144    	; 0x2cd2 <vfprintf+0x6a>
    2d62:	89 2f       	mov	r24, r25
    2d64:	85 54       	subi	r24, 0x45	; 69
    2d66:	83 30       	cpi	r24, 0x03	; 3
    2d68:	18 f0       	brcs	.+6      	; 0x2d70 <vfprintf+0x108>
    2d6a:	80 52       	subi	r24, 0x20	; 32
    2d6c:	83 30       	cpi	r24, 0x03	; 3
    2d6e:	38 f4       	brcc	.+14     	; 0x2d7e <vfprintf+0x116>
    2d70:	44 e0       	ldi	r20, 0x04	; 4
    2d72:	50 e0       	ldi	r21, 0x00	; 0
    2d74:	a4 0e       	add	r10, r20
    2d76:	b5 1e       	adc	r11, r21
    2d78:	5f e3       	ldi	r21, 0x3F	; 63
    2d7a:	59 83       	std	Y+1, r21	; 0x01
    2d7c:	0f c0       	rjmp	.+30     	; 0x2d9c <vfprintf+0x134>
    2d7e:	93 36       	cpi	r25, 0x63	; 99
    2d80:	31 f0       	breq	.+12     	; 0x2d8e <vfprintf+0x126>
    2d82:	93 37       	cpi	r25, 0x73	; 115
    2d84:	79 f0       	breq	.+30     	; 0x2da4 <vfprintf+0x13c>
    2d86:	93 35       	cpi	r25, 0x53	; 83
    2d88:	09 f0       	breq	.+2      	; 0x2d8c <vfprintf+0x124>
    2d8a:	56 c0       	rjmp	.+172    	; 0x2e38 <vfprintf+0x1d0>
    2d8c:	20 c0       	rjmp	.+64     	; 0x2dce <vfprintf+0x166>
    2d8e:	f5 01       	movw	r30, r10
    2d90:	80 81       	ld	r24, Z
    2d92:	89 83       	std	Y+1, r24	; 0x01
    2d94:	42 e0       	ldi	r20, 0x02	; 2
    2d96:	50 e0       	ldi	r21, 0x00	; 0
    2d98:	a4 0e       	add	r10, r20
    2d9a:	b5 1e       	adc	r11, r21
    2d9c:	61 01       	movw	r12, r2
    2d9e:	01 e0       	ldi	r16, 0x01	; 1
    2da0:	10 e0       	ldi	r17, 0x00	; 0
    2da2:	12 c0       	rjmp	.+36     	; 0x2dc8 <vfprintf+0x160>
    2da4:	f5 01       	movw	r30, r10
    2da6:	c0 80       	ld	r12, Z
    2da8:	d1 80       	ldd	r13, Z+1	; 0x01
    2daa:	f6 fc       	sbrc	r15, 6
    2dac:	03 c0       	rjmp	.+6      	; 0x2db4 <vfprintf+0x14c>
    2dae:	6f ef       	ldi	r22, 0xFF	; 255
    2db0:	7f ef       	ldi	r23, 0xFF	; 255
    2db2:	02 c0       	rjmp	.+4      	; 0x2db8 <vfprintf+0x150>
    2db4:	69 2d       	mov	r22, r9
    2db6:	70 e0       	ldi	r23, 0x00	; 0
    2db8:	42 e0       	ldi	r20, 0x02	; 2
    2dba:	50 e0       	ldi	r21, 0x00	; 0
    2dbc:	a4 0e       	add	r10, r20
    2dbe:	b5 1e       	adc	r11, r21
    2dc0:	c6 01       	movw	r24, r12
    2dc2:	0e 94 1c 18 	call	0x3038	; 0x3038 <strnlen>
    2dc6:	8c 01       	movw	r16, r24
    2dc8:	5f e7       	ldi	r21, 0x7F	; 127
    2dca:	f5 22       	and	r15, r21
    2dcc:	14 c0       	rjmp	.+40     	; 0x2df6 <vfprintf+0x18e>
    2dce:	f5 01       	movw	r30, r10
    2dd0:	c0 80       	ld	r12, Z
    2dd2:	d1 80       	ldd	r13, Z+1	; 0x01
    2dd4:	f6 fc       	sbrc	r15, 6
    2dd6:	03 c0       	rjmp	.+6      	; 0x2dde <vfprintf+0x176>
    2dd8:	6f ef       	ldi	r22, 0xFF	; 255
    2dda:	7f ef       	ldi	r23, 0xFF	; 255
    2ddc:	02 c0       	rjmp	.+4      	; 0x2de2 <vfprintf+0x17a>
    2dde:	69 2d       	mov	r22, r9
    2de0:	70 e0       	ldi	r23, 0x00	; 0
    2de2:	42 e0       	ldi	r20, 0x02	; 2
    2de4:	50 e0       	ldi	r21, 0x00	; 0
    2de6:	a4 0e       	add	r10, r20
    2de8:	b5 1e       	adc	r11, r21
    2dea:	c6 01       	movw	r24, r12
    2dec:	0e 94 11 18 	call	0x3022	; 0x3022 <strnlen_P>
    2df0:	8c 01       	movw	r16, r24
    2df2:	50 e8       	ldi	r21, 0x80	; 128
    2df4:	f5 2a       	or	r15, r21
    2df6:	f3 fe       	sbrs	r15, 3
    2df8:	07 c0       	rjmp	.+14     	; 0x2e08 <vfprintf+0x1a0>
    2dfa:	1a c0       	rjmp	.+52     	; 0x2e30 <vfprintf+0x1c8>
    2dfc:	80 e2       	ldi	r24, 0x20	; 32
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	b3 01       	movw	r22, r6
    2e02:	0e 94 27 18 	call	0x304e	; 0x304e <fputc>
    2e06:	ea 94       	dec	r14
    2e08:	8e 2d       	mov	r24, r14
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	08 17       	cp	r16, r24
    2e0e:	19 07       	cpc	r17, r25
    2e10:	a8 f3       	brcs	.-22     	; 0x2dfc <vfprintf+0x194>
    2e12:	0e c0       	rjmp	.+28     	; 0x2e30 <vfprintf+0x1c8>
    2e14:	f6 01       	movw	r30, r12
    2e16:	f7 fc       	sbrc	r15, 7
    2e18:	85 91       	lpm	r24, Z+
    2e1a:	f7 fe       	sbrs	r15, 7
    2e1c:	81 91       	ld	r24, Z+
    2e1e:	6f 01       	movw	r12, r30
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	b3 01       	movw	r22, r6
    2e24:	0e 94 27 18 	call	0x304e	; 0x304e <fputc>
    2e28:	e1 10       	cpse	r14, r1
    2e2a:	ea 94       	dec	r14
    2e2c:	01 50       	subi	r16, 0x01	; 1
    2e2e:	10 40       	sbci	r17, 0x00	; 0
    2e30:	01 15       	cp	r16, r1
    2e32:	11 05       	cpc	r17, r1
    2e34:	79 f7       	brne	.-34     	; 0x2e14 <vfprintf+0x1ac>
    2e36:	ea c0       	rjmp	.+468    	; 0x300c <vfprintf+0x3a4>
    2e38:	94 36       	cpi	r25, 0x64	; 100
    2e3a:	11 f0       	breq	.+4      	; 0x2e40 <vfprintf+0x1d8>
    2e3c:	99 36       	cpi	r25, 0x69	; 105
    2e3e:	69 f5       	brne	.+90     	; 0x2e9a <vfprintf+0x232>
    2e40:	f7 fe       	sbrs	r15, 7
    2e42:	08 c0       	rjmp	.+16     	; 0x2e54 <vfprintf+0x1ec>
    2e44:	f5 01       	movw	r30, r10
    2e46:	20 81       	ld	r18, Z
    2e48:	31 81       	ldd	r19, Z+1	; 0x01
    2e4a:	42 81       	ldd	r20, Z+2	; 0x02
    2e4c:	53 81       	ldd	r21, Z+3	; 0x03
    2e4e:	84 e0       	ldi	r24, 0x04	; 4
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	0a c0       	rjmp	.+20     	; 0x2e68 <vfprintf+0x200>
    2e54:	f5 01       	movw	r30, r10
    2e56:	80 81       	ld	r24, Z
    2e58:	91 81       	ldd	r25, Z+1	; 0x01
    2e5a:	9c 01       	movw	r18, r24
    2e5c:	44 27       	eor	r20, r20
    2e5e:	37 fd       	sbrc	r19, 7
    2e60:	40 95       	com	r20
    2e62:	54 2f       	mov	r21, r20
    2e64:	82 e0       	ldi	r24, 0x02	; 2
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	a8 0e       	add	r10, r24
    2e6a:	b9 1e       	adc	r11, r25
    2e6c:	9f e6       	ldi	r25, 0x6F	; 111
    2e6e:	f9 22       	and	r15, r25
    2e70:	57 ff       	sbrs	r21, 7
    2e72:	09 c0       	rjmp	.+18     	; 0x2e86 <vfprintf+0x21e>
    2e74:	50 95       	com	r21
    2e76:	40 95       	com	r20
    2e78:	30 95       	com	r19
    2e7a:	21 95       	neg	r18
    2e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e7e:	4f 4f       	sbci	r20, 0xFF	; 255
    2e80:	5f 4f       	sbci	r21, 0xFF	; 255
    2e82:	e0 e8       	ldi	r30, 0x80	; 128
    2e84:	fe 2a       	or	r15, r30
    2e86:	ca 01       	movw	r24, r20
    2e88:	b9 01       	movw	r22, r18
    2e8a:	a1 01       	movw	r20, r2
    2e8c:	2a e0       	ldi	r18, 0x0A	; 10
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	0e 94 53 18 	call	0x30a6	; 0x30a6 <__ultoa_invert>
    2e94:	d8 2e       	mov	r13, r24
    2e96:	d2 18       	sub	r13, r2
    2e98:	40 c0       	rjmp	.+128    	; 0x2f1a <vfprintf+0x2b2>
    2e9a:	95 37       	cpi	r25, 0x75	; 117
    2e9c:	29 f4       	brne	.+10     	; 0x2ea8 <vfprintf+0x240>
    2e9e:	1f 2d       	mov	r17, r15
    2ea0:	1f 7e       	andi	r17, 0xEF	; 239
    2ea2:	2a e0       	ldi	r18, 0x0A	; 10
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	1d c0       	rjmp	.+58     	; 0x2ee2 <vfprintf+0x27a>
    2ea8:	1f 2d       	mov	r17, r15
    2eaa:	19 7f       	andi	r17, 0xF9	; 249
    2eac:	9f 36       	cpi	r25, 0x6F	; 111
    2eae:	61 f0       	breq	.+24     	; 0x2ec8 <vfprintf+0x260>
    2eb0:	90 37       	cpi	r25, 0x70	; 112
    2eb2:	20 f4       	brcc	.+8      	; 0x2ebc <vfprintf+0x254>
    2eb4:	98 35       	cpi	r25, 0x58	; 88
    2eb6:	09 f0       	breq	.+2      	; 0x2eba <vfprintf+0x252>
    2eb8:	ac c0       	rjmp	.+344    	; 0x3012 <vfprintf+0x3aa>
    2eba:	0f c0       	rjmp	.+30     	; 0x2eda <vfprintf+0x272>
    2ebc:	90 37       	cpi	r25, 0x70	; 112
    2ebe:	39 f0       	breq	.+14     	; 0x2ece <vfprintf+0x266>
    2ec0:	98 37       	cpi	r25, 0x78	; 120
    2ec2:	09 f0       	breq	.+2      	; 0x2ec6 <vfprintf+0x25e>
    2ec4:	a6 c0       	rjmp	.+332    	; 0x3012 <vfprintf+0x3aa>
    2ec6:	04 c0       	rjmp	.+8      	; 0x2ed0 <vfprintf+0x268>
    2ec8:	28 e0       	ldi	r18, 0x08	; 8
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	0a c0       	rjmp	.+20     	; 0x2ee2 <vfprintf+0x27a>
    2ece:	10 61       	ori	r17, 0x10	; 16
    2ed0:	14 fd       	sbrc	r17, 4
    2ed2:	14 60       	ori	r17, 0x04	; 4
    2ed4:	20 e1       	ldi	r18, 0x10	; 16
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	04 c0       	rjmp	.+8      	; 0x2ee2 <vfprintf+0x27a>
    2eda:	14 fd       	sbrc	r17, 4
    2edc:	16 60       	ori	r17, 0x06	; 6
    2ede:	20 e1       	ldi	r18, 0x10	; 16
    2ee0:	32 e0       	ldi	r19, 0x02	; 2
    2ee2:	17 ff       	sbrs	r17, 7
    2ee4:	08 c0       	rjmp	.+16     	; 0x2ef6 <vfprintf+0x28e>
    2ee6:	f5 01       	movw	r30, r10
    2ee8:	60 81       	ld	r22, Z
    2eea:	71 81       	ldd	r23, Z+1	; 0x01
    2eec:	82 81       	ldd	r24, Z+2	; 0x02
    2eee:	93 81       	ldd	r25, Z+3	; 0x03
    2ef0:	44 e0       	ldi	r20, 0x04	; 4
    2ef2:	50 e0       	ldi	r21, 0x00	; 0
    2ef4:	08 c0       	rjmp	.+16     	; 0x2f06 <vfprintf+0x29e>
    2ef6:	f5 01       	movw	r30, r10
    2ef8:	80 81       	ld	r24, Z
    2efa:	91 81       	ldd	r25, Z+1	; 0x01
    2efc:	bc 01       	movw	r22, r24
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	42 e0       	ldi	r20, 0x02	; 2
    2f04:	50 e0       	ldi	r21, 0x00	; 0
    2f06:	a4 0e       	add	r10, r20
    2f08:	b5 1e       	adc	r11, r21
    2f0a:	a1 01       	movw	r20, r2
    2f0c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <__ultoa_invert>
    2f10:	d8 2e       	mov	r13, r24
    2f12:	d2 18       	sub	r13, r2
    2f14:	8f e7       	ldi	r24, 0x7F	; 127
    2f16:	f8 2e       	mov	r15, r24
    2f18:	f1 22       	and	r15, r17
    2f1a:	f6 fe       	sbrs	r15, 6
    2f1c:	0b c0       	rjmp	.+22     	; 0x2f34 <vfprintf+0x2cc>
    2f1e:	5e ef       	ldi	r21, 0xFE	; 254
    2f20:	f5 22       	and	r15, r21
    2f22:	d9 14       	cp	r13, r9
    2f24:	38 f4       	brcc	.+14     	; 0x2f34 <vfprintf+0x2cc>
    2f26:	f4 fe       	sbrs	r15, 4
    2f28:	07 c0       	rjmp	.+14     	; 0x2f38 <vfprintf+0x2d0>
    2f2a:	f2 fc       	sbrc	r15, 2
    2f2c:	05 c0       	rjmp	.+10     	; 0x2f38 <vfprintf+0x2d0>
    2f2e:	8f ee       	ldi	r24, 0xEF	; 239
    2f30:	f8 22       	and	r15, r24
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <vfprintf+0x2d0>
    2f34:	1d 2d       	mov	r17, r13
    2f36:	01 c0       	rjmp	.+2      	; 0x2f3a <vfprintf+0x2d2>
    2f38:	19 2d       	mov	r17, r9
    2f3a:	f4 fe       	sbrs	r15, 4
    2f3c:	0d c0       	rjmp	.+26     	; 0x2f58 <vfprintf+0x2f0>
    2f3e:	fe 01       	movw	r30, r28
    2f40:	ed 0d       	add	r30, r13
    2f42:	f1 1d       	adc	r31, r1
    2f44:	80 81       	ld	r24, Z
    2f46:	80 33       	cpi	r24, 0x30	; 48
    2f48:	19 f4       	brne	.+6      	; 0x2f50 <vfprintf+0x2e8>
    2f4a:	99 ee       	ldi	r25, 0xE9	; 233
    2f4c:	f9 22       	and	r15, r25
    2f4e:	08 c0       	rjmp	.+16     	; 0x2f60 <vfprintf+0x2f8>
    2f50:	1f 5f       	subi	r17, 0xFF	; 255
    2f52:	f2 fe       	sbrs	r15, 2
    2f54:	05 c0       	rjmp	.+10     	; 0x2f60 <vfprintf+0x2f8>
    2f56:	03 c0       	rjmp	.+6      	; 0x2f5e <vfprintf+0x2f6>
    2f58:	8f 2d       	mov	r24, r15
    2f5a:	86 78       	andi	r24, 0x86	; 134
    2f5c:	09 f0       	breq	.+2      	; 0x2f60 <vfprintf+0x2f8>
    2f5e:	1f 5f       	subi	r17, 0xFF	; 255
    2f60:	0f 2d       	mov	r16, r15
    2f62:	f3 fc       	sbrc	r15, 3
    2f64:	14 c0       	rjmp	.+40     	; 0x2f8e <vfprintf+0x326>
    2f66:	f0 fe       	sbrs	r15, 0
    2f68:	0f c0       	rjmp	.+30     	; 0x2f88 <vfprintf+0x320>
    2f6a:	1e 15       	cp	r17, r14
    2f6c:	10 f0       	brcs	.+4      	; 0x2f72 <vfprintf+0x30a>
    2f6e:	9d 2c       	mov	r9, r13
    2f70:	0b c0       	rjmp	.+22     	; 0x2f88 <vfprintf+0x320>
    2f72:	9d 2c       	mov	r9, r13
    2f74:	9e 0c       	add	r9, r14
    2f76:	91 1a       	sub	r9, r17
    2f78:	1e 2d       	mov	r17, r14
    2f7a:	06 c0       	rjmp	.+12     	; 0x2f88 <vfprintf+0x320>
    2f7c:	80 e2       	ldi	r24, 0x20	; 32
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	b3 01       	movw	r22, r6
    2f82:	0e 94 27 18 	call	0x304e	; 0x304e <fputc>
    2f86:	1f 5f       	subi	r17, 0xFF	; 255
    2f88:	1e 15       	cp	r17, r14
    2f8a:	c0 f3       	brcs	.-16     	; 0x2f7c <vfprintf+0x314>
    2f8c:	04 c0       	rjmp	.+8      	; 0x2f96 <vfprintf+0x32e>
    2f8e:	1e 15       	cp	r17, r14
    2f90:	10 f4       	brcc	.+4      	; 0x2f96 <vfprintf+0x32e>
    2f92:	e1 1a       	sub	r14, r17
    2f94:	01 c0       	rjmp	.+2      	; 0x2f98 <vfprintf+0x330>
    2f96:	ee 24       	eor	r14, r14
    2f98:	04 ff       	sbrs	r16, 4
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <vfprintf+0x352>
    2f9c:	80 e3       	ldi	r24, 0x30	; 48
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	b3 01       	movw	r22, r6
    2fa2:	0e 94 27 18 	call	0x304e	; 0x304e <fputc>
    2fa6:	02 ff       	sbrs	r16, 2
    2fa8:	1d c0       	rjmp	.+58     	; 0x2fe4 <vfprintf+0x37c>
    2faa:	01 fd       	sbrc	r16, 1
    2fac:	03 c0       	rjmp	.+6      	; 0x2fb4 <vfprintf+0x34c>
    2fae:	88 e7       	ldi	r24, 0x78	; 120
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	0e c0       	rjmp	.+28     	; 0x2fd0 <vfprintf+0x368>
    2fb4:	88 e5       	ldi	r24, 0x58	; 88
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	0b c0       	rjmp	.+22     	; 0x2fd0 <vfprintf+0x368>
    2fba:	80 2f       	mov	r24, r16
    2fbc:	86 78       	andi	r24, 0x86	; 134
    2fbe:	91 f0       	breq	.+36     	; 0x2fe4 <vfprintf+0x37c>
    2fc0:	01 ff       	sbrs	r16, 1
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <vfprintf+0x360>
    2fc4:	8b e2       	ldi	r24, 0x2B	; 43
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <vfprintf+0x362>
    2fc8:	80 e2       	ldi	r24, 0x20	; 32
    2fca:	f7 fc       	sbrc	r15, 7
    2fcc:	8d e2       	ldi	r24, 0x2D	; 45
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	b3 01       	movw	r22, r6
    2fd2:	0e 94 27 18 	call	0x304e	; 0x304e <fputc>
    2fd6:	06 c0       	rjmp	.+12     	; 0x2fe4 <vfprintf+0x37c>
    2fd8:	80 e3       	ldi	r24, 0x30	; 48
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	b3 01       	movw	r22, r6
    2fde:	0e 94 27 18 	call	0x304e	; 0x304e <fputc>
    2fe2:	9a 94       	dec	r9
    2fe4:	d9 14       	cp	r13, r9
    2fe6:	c0 f3       	brcs	.-16     	; 0x2fd8 <vfprintf+0x370>
    2fe8:	da 94       	dec	r13
    2fea:	f1 01       	movw	r30, r2
    2fec:	ed 0d       	add	r30, r13
    2fee:	f1 1d       	adc	r31, r1
    2ff0:	80 81       	ld	r24, Z
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	b3 01       	movw	r22, r6
    2ff6:	0e 94 27 18 	call	0x304e	; 0x304e <fputc>
    2ffa:	dd 20       	and	r13, r13
    2ffc:	a9 f7       	brne	.-22     	; 0x2fe8 <vfprintf+0x380>
    2ffe:	06 c0       	rjmp	.+12     	; 0x300c <vfprintf+0x3a4>
    3000:	80 e2       	ldi	r24, 0x20	; 32
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	b3 01       	movw	r22, r6
    3006:	0e 94 27 18 	call	0x304e	; 0x304e <fputc>
    300a:	ea 94       	dec	r14
    300c:	ee 20       	and	r14, r14
    300e:	c1 f7       	brne	.-16     	; 0x3000 <vfprintf+0x398>
    3010:	43 ce       	rjmp	.-890    	; 0x2c98 <vfprintf+0x30>
    3012:	f3 01       	movw	r30, r6
    3014:	66 81       	ldd	r22, Z+6	; 0x06
    3016:	77 81       	ldd	r23, Z+7	; 0x07
    3018:	cb 01       	movw	r24, r22
    301a:	2b 96       	adiw	r28, 0x0b	; 11
    301c:	e2 e1       	ldi	r30, 0x12	; 18
    301e:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__epilogue_restores__>

00003022 <strnlen_P>:
    3022:	fc 01       	movw	r30, r24
    3024:	05 90       	lpm	r0, Z+
    3026:	61 50       	subi	r22, 0x01	; 1
    3028:	70 40       	sbci	r23, 0x00	; 0
    302a:	01 10       	cpse	r0, r1
    302c:	d8 f7       	brcc	.-10     	; 0x3024 <strnlen_P+0x2>
    302e:	80 95       	com	r24
    3030:	90 95       	com	r25
    3032:	8e 0f       	add	r24, r30
    3034:	9f 1f       	adc	r25, r31
    3036:	08 95       	ret

00003038 <strnlen>:
    3038:	fc 01       	movw	r30, r24
    303a:	61 50       	subi	r22, 0x01	; 1
    303c:	70 40       	sbci	r23, 0x00	; 0
    303e:	01 90       	ld	r0, Z+
    3040:	01 10       	cpse	r0, r1
    3042:	d8 f7       	brcc	.-10     	; 0x303a <strnlen+0x2>
    3044:	80 95       	com	r24
    3046:	90 95       	com	r25
    3048:	8e 0f       	add	r24, r30
    304a:	9f 1f       	adc	r25, r31
    304c:	08 95       	ret

0000304e <fputc>:
    304e:	0f 93       	push	r16
    3050:	1f 93       	push	r17
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
    3056:	8c 01       	movw	r16, r24
    3058:	eb 01       	movw	r28, r22
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	81 ff       	sbrs	r24, 1
    305e:	1b c0       	rjmp	.+54     	; 0x3096 <fputc+0x48>
    3060:	82 ff       	sbrs	r24, 2
    3062:	0d c0       	rjmp	.+26     	; 0x307e <fputc+0x30>
    3064:	2e 81       	ldd	r18, Y+6	; 0x06
    3066:	3f 81       	ldd	r19, Y+7	; 0x07
    3068:	8c 81       	ldd	r24, Y+4	; 0x04
    306a:	9d 81       	ldd	r25, Y+5	; 0x05
    306c:	28 17       	cp	r18, r24
    306e:	39 07       	cpc	r19, r25
    3070:	64 f4       	brge	.+24     	; 0x308a <fputc+0x3c>
    3072:	e8 81       	ld	r30, Y
    3074:	f9 81       	ldd	r31, Y+1	; 0x01
    3076:	01 93       	st	Z+, r16
    3078:	f9 83       	std	Y+1, r31	; 0x01
    307a:	e8 83       	st	Y, r30
    307c:	06 c0       	rjmp	.+12     	; 0x308a <fputc+0x3c>
    307e:	e8 85       	ldd	r30, Y+8	; 0x08
    3080:	f9 85       	ldd	r31, Y+9	; 0x09
    3082:	80 2f       	mov	r24, r16
    3084:	09 95       	icall
    3086:	89 2b       	or	r24, r25
    3088:	31 f4       	brne	.+12     	; 0x3096 <fputc+0x48>
    308a:	8e 81       	ldd	r24, Y+6	; 0x06
    308c:	9f 81       	ldd	r25, Y+7	; 0x07
    308e:	01 96       	adiw	r24, 0x01	; 1
    3090:	9f 83       	std	Y+7, r25	; 0x07
    3092:	8e 83       	std	Y+6, r24	; 0x06
    3094:	02 c0       	rjmp	.+4      	; 0x309a <fputc+0x4c>
    3096:	0f ef       	ldi	r16, 0xFF	; 255
    3098:	1f ef       	ldi	r17, 0xFF	; 255
    309a:	c8 01       	movw	r24, r16
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	1f 91       	pop	r17
    30a2:	0f 91       	pop	r16
    30a4:	08 95       	ret

000030a6 <__ultoa_invert>:
    30a6:	fa 01       	movw	r30, r20
    30a8:	aa 27       	eor	r26, r26
    30aa:	28 30       	cpi	r18, 0x08	; 8
    30ac:	51 f1       	breq	.+84     	; 0x3102 <__ultoa_invert+0x5c>
    30ae:	20 31       	cpi	r18, 0x10	; 16
    30b0:	81 f1       	breq	.+96     	; 0x3112 <__ultoa_invert+0x6c>
    30b2:	e8 94       	clt
    30b4:	6f 93       	push	r22
    30b6:	6e 7f       	andi	r22, 0xFE	; 254
    30b8:	6e 5f       	subi	r22, 0xFE	; 254
    30ba:	7f 4f       	sbci	r23, 0xFF	; 255
    30bc:	8f 4f       	sbci	r24, 0xFF	; 255
    30be:	9f 4f       	sbci	r25, 0xFF	; 255
    30c0:	af 4f       	sbci	r26, 0xFF	; 255
    30c2:	b1 e0       	ldi	r27, 0x01	; 1
    30c4:	3e d0       	rcall	.+124    	; 0x3142 <__ultoa_invert+0x9c>
    30c6:	b4 e0       	ldi	r27, 0x04	; 4
    30c8:	3c d0       	rcall	.+120    	; 0x3142 <__ultoa_invert+0x9c>
    30ca:	67 0f       	add	r22, r23
    30cc:	78 1f       	adc	r23, r24
    30ce:	89 1f       	adc	r24, r25
    30d0:	9a 1f       	adc	r25, r26
    30d2:	a1 1d       	adc	r26, r1
    30d4:	68 0f       	add	r22, r24
    30d6:	79 1f       	adc	r23, r25
    30d8:	8a 1f       	adc	r24, r26
    30da:	91 1d       	adc	r25, r1
    30dc:	a1 1d       	adc	r26, r1
    30de:	6a 0f       	add	r22, r26
    30e0:	71 1d       	adc	r23, r1
    30e2:	81 1d       	adc	r24, r1
    30e4:	91 1d       	adc	r25, r1
    30e6:	a1 1d       	adc	r26, r1
    30e8:	20 d0       	rcall	.+64     	; 0x312a <__ultoa_invert+0x84>
    30ea:	09 f4       	brne	.+2      	; 0x30ee <__ultoa_invert+0x48>
    30ec:	68 94       	set
    30ee:	3f 91       	pop	r19
    30f0:	2a e0       	ldi	r18, 0x0A	; 10
    30f2:	26 9f       	mul	r18, r22
    30f4:	11 24       	eor	r1, r1
    30f6:	30 19       	sub	r19, r0
    30f8:	30 5d       	subi	r19, 0xD0	; 208
    30fa:	31 93       	st	Z+, r19
    30fc:	de f6       	brtc	.-74     	; 0x30b4 <__ultoa_invert+0xe>
    30fe:	cf 01       	movw	r24, r30
    3100:	08 95       	ret
    3102:	46 2f       	mov	r20, r22
    3104:	47 70       	andi	r20, 0x07	; 7
    3106:	40 5d       	subi	r20, 0xD0	; 208
    3108:	41 93       	st	Z+, r20
    310a:	b3 e0       	ldi	r27, 0x03	; 3
    310c:	0f d0       	rcall	.+30     	; 0x312c <__ultoa_invert+0x86>
    310e:	c9 f7       	brne	.-14     	; 0x3102 <__ultoa_invert+0x5c>
    3110:	f6 cf       	rjmp	.-20     	; 0x30fe <__ultoa_invert+0x58>
    3112:	46 2f       	mov	r20, r22
    3114:	4f 70       	andi	r20, 0x0F	; 15
    3116:	40 5d       	subi	r20, 0xD0	; 208
    3118:	4a 33       	cpi	r20, 0x3A	; 58
    311a:	18 f0       	brcs	.+6      	; 0x3122 <__ultoa_invert+0x7c>
    311c:	49 5d       	subi	r20, 0xD9	; 217
    311e:	31 fd       	sbrc	r19, 1
    3120:	40 52       	subi	r20, 0x20	; 32
    3122:	41 93       	st	Z+, r20
    3124:	02 d0       	rcall	.+4      	; 0x312a <__ultoa_invert+0x84>
    3126:	a9 f7       	brne	.-22     	; 0x3112 <__ultoa_invert+0x6c>
    3128:	ea cf       	rjmp	.-44     	; 0x30fe <__ultoa_invert+0x58>
    312a:	b4 e0       	ldi	r27, 0x04	; 4
    312c:	a6 95       	lsr	r26
    312e:	97 95       	ror	r25
    3130:	87 95       	ror	r24
    3132:	77 95       	ror	r23
    3134:	67 95       	ror	r22
    3136:	ba 95       	dec	r27
    3138:	c9 f7       	brne	.-14     	; 0x312c <__ultoa_invert+0x86>
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	61 05       	cpc	r22, r1
    313e:	71 05       	cpc	r23, r1
    3140:	08 95       	ret
    3142:	9b 01       	movw	r18, r22
    3144:	ac 01       	movw	r20, r24
    3146:	0a 2e       	mov	r0, r26
    3148:	06 94       	lsr	r0
    314a:	57 95       	ror	r21
    314c:	47 95       	ror	r20
    314e:	37 95       	ror	r19
    3150:	27 95       	ror	r18
    3152:	ba 95       	dec	r27
    3154:	c9 f7       	brne	.-14     	; 0x3148 <__ultoa_invert+0xa2>
    3156:	62 0f       	add	r22, r18
    3158:	73 1f       	adc	r23, r19
    315a:	84 1f       	adc	r24, r20
    315c:	95 1f       	adc	r25, r21
    315e:	a0 1d       	adc	r26, r0
    3160:	08 95       	ret

00003162 <_exit>:
    3162:	f8 94       	cli

00003164 <__stop_program>:
    3164:	ff cf       	rjmp	.-2      	; 0x3164 <__stop_program>
