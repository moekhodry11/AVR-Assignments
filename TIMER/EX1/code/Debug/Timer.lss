
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  000034f0  00003584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800174  00800174  00003698  2**0
                  ALLOC
  3 .stab         00002964  00000000  00000000  00003698  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013a3  00000000  00000000  00005ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000739f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000751f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  000076f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00009700  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000a861  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b864  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000ba04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000bcc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_1>
       8:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__vector_2>
       c:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__vector_10>
      2c:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <main>
      8a:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__fixsfsi+0x80>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__fixsfsi+0x80>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__fixsfsi+0x8a>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__fixsfsi+0x94>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__fixsfsi+0x80>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__fixsfsi+0x8a>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__fixsfsi+0x94>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__fixsfsi+0x68>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__fixsfsi+0x60>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__fixsfsi+0x9c>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__fixsfsi+0x9c>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__fixsfsi+0x9c>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__fixsfsi+0x9c>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e4 59       	subi	r30, 0x94	; 148
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit         (void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
     ca8:	ea e3       	ldi	r30, 0x3A	; 58
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	8e e0       	ldi	r24, 0x0E	; 14
     cae:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
     cb0:	e7 e3       	ldi	r30, 0x37	; 55
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	87 e0       	ldi	r24, 0x07	; 7
     cb6:	80 83       	st	Z, r24
						   DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
     cb8:	e4 e3       	ldi	r30, 0x34	; 52
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	87 e0       	ldi	r24, 0x07	; 7
     cbe:	80 83       	st	Z, r24
						   DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
     cc6:	80 83       	st	Z, r24
						   DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);						   

	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
     cc8:	eb e3       	ldi	r30, 0x3B	; 59
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	8e ef       	ldi	r24, 0xFE	; 254
     cce:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);
											                    
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
     cd0:	e8 e3       	ldi	r30, 0x38	; 56
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	10 82       	st	Z, r1
						   DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);
											 
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
     cd6:	e5 e3       	ldi	r30, 0x35	; 53
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	10 82       	st	Z, r1
						   DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);
											 
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
     cdc:	e2 e3       	ldi	r30, 0x32	; 50
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	10 82       	st	Z, r1
						   DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <DIO_u8SetPinDirection>:

u8  DIO_u8SetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinDirection)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	2e 97       	sbiw	r28, 0x0e	; 14
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	6b 83       	std	Y+3, r22	; 0x03
     d00:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))		
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	84 30       	cpi	r24, 0x04	; 4
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <DIO_u8SetPinDirection+0x26>
     d0c:	0c c1       	rjmp	.+536    	; 0xf26 <DIO_u8SetPinDirection+0x23e>
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	88 30       	cpi	r24, 0x08	; 8
     d12:	08 f0       	brcs	.+2      	; 0xd16 <DIO_u8SetPinDirection+0x2e>
     d14:	08 c1       	rjmp	.+528    	; 0xf26 <DIO_u8SetPinDirection+0x23e>
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	21 f0       	breq	.+8      	; 0xd24 <DIO_u8SetPinDirection+0x3c>
     d1c:	8c 81       	ldd	r24, Y+4	; 0x04
     d1e:	88 23       	and	r24, r24
     d20:	09 f0       	breq	.+2      	; 0xd24 <DIO_u8SetPinDirection+0x3c>
     d22:	01 c1       	rjmp	.+514    	; 0xf26 <DIO_u8SetPinDirection+0x23e>
	{
		switch (Copy_u8PortId)
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	3e 87       	std	Y+14, r19	; 0x0e
     d2c:	2d 87       	std	Y+13, r18	; 0x0d
     d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d30:	9e 85       	ldd	r25, Y+14	; 0x0e
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	91 05       	cpc	r25, r1
     d36:	09 f4       	brne	.+2      	; 0xd3a <DIO_u8SetPinDirection+0x52>
     d38:	4f c0       	rjmp	.+158    	; 0xdd8 <DIO_u8SetPinDirection+0xf0>
     d3a:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3c:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3e:	22 30       	cpi	r18, 0x02	; 2
     d40:	31 05       	cpc	r19, r1
     d42:	2c f4       	brge	.+10     	; 0xd4e <DIO_u8SetPinDirection+0x66>
     d44:	8d 85       	ldd	r24, Y+13	; 0x0d
     d46:	9e 85       	ldd	r25, Y+14	; 0x0e
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	71 f0       	breq	.+28     	; 0xd68 <DIO_u8SetPinDirection+0x80>
     d4c:	ed c0       	rjmp	.+474    	; 0xf28 <DIO_u8SetPinDirection+0x240>
     d4e:	2d 85       	ldd	r18, Y+13	; 0x0d
     d50:	3e 85       	ldd	r19, Y+14	; 0x0e
     d52:	22 30       	cpi	r18, 0x02	; 2
     d54:	31 05       	cpc	r19, r1
     d56:	09 f4       	brne	.+2      	; 0xd5a <DIO_u8SetPinDirection+0x72>
     d58:	77 c0       	rjmp	.+238    	; 0xe48 <DIO_u8SetPinDirection+0x160>
     d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5e:	83 30       	cpi	r24, 0x03	; 3
     d60:	91 05       	cpc	r25, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <DIO_u8SetPinDirection+0x7e>
     d64:	a9 c0       	rjmp	.+338    	; 0xeb8 <DIO_u8SetPinDirection+0x1d0>
     d66:	e0 c0       	rjmp	.+448    	; 0xf28 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinDirection)
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3c 87       	std	Y+12, r19	; 0x0c
     d70:	2b 87       	std	Y+11, r18	; 0x0b
     d72:	8b 85       	ldd	r24, Y+11	; 0x0b
     d74:	9c 85       	ldd	r25, Y+12	; 0x0c
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	d1 f0       	breq	.+52     	; 0xdae <DIO_u8SetPinDirection+0xc6>
     d7a:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7c:	3c 85       	ldd	r19, Y+12	; 0x0c
     d7e:	21 30       	cpi	r18, 0x01	; 1
     d80:	31 05       	cpc	r19, r1
     d82:	09 f0       	breq	.+2      	; 0xd86 <DIO_u8SetPinDirection+0x9e>
     d84:	d1 c0       	rjmp	.+418    	; 0xf28 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     d86:	aa e3       	ldi	r26, 0x3A	; 58
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	ea e3       	ldi	r30, 0x3A	; 58
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_u8SetPinDirection+0xbc>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_u8SetPinDirection+0xb8>
     da8:	84 2b       	or	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	bd c0       	rjmp	.+378    	; 0xf28 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     dae:	aa e3       	ldi	r26, 0x3A	; 58
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ea e3       	ldi	r30, 0x3A	; 58
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_u8SetPinDirection+0xe4>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_u8SetPinDirection+0xe0>
     dd0:	80 95       	com	r24
     dd2:	84 23       	and	r24, r20
     dd4:	8c 93       	st	X, r24
     dd6:	a8 c0       	rjmp	.+336    	; 0xf28 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinDirection)
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	3a 87       	std	Y+10, r19	; 0x0a
     de0:	29 87       	std	Y+9, r18	; 0x09
     de2:	89 85       	ldd	r24, Y+9	; 0x09
     de4:	9a 85       	ldd	r25, Y+10	; 0x0a
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	d1 f0       	breq	.+52     	; 0xe1e <DIO_u8SetPinDirection+0x136>
     dea:	29 85       	ldd	r18, Y+9	; 0x09
     dec:	3a 85       	ldd	r19, Y+10	; 0x0a
     dee:	21 30       	cpi	r18, 0x01	; 1
     df0:	31 05       	cpc	r19, r1
     df2:	09 f0       	breq	.+2      	; 0xdf6 <DIO_u8SetPinDirection+0x10e>
     df4:	99 c0       	rjmp	.+306    	; 0xf28 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     df6:	a7 e3       	ldi	r26, 0x37	; 55
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e7 e3       	ldi	r30, 0x37	; 55
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_u8SetPinDirection+0x12c>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_u8SetPinDirection+0x128>
     e18:	84 2b       	or	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	85 c0       	rjmp	.+266    	; 0xf28 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     e1e:	a7 e3       	ldi	r26, 0x37	; 55
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e7 e3       	ldi	r30, 0x37	; 55
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_u8SetPinDirection+0x154>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_u8SetPinDirection+0x150>
     e40:	80 95       	com	r24
     e42:	84 23       	and	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	70 c0       	rjmp	.+224    	; 0xf28 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinDirection)
     e48:	8c 81       	ldd	r24, Y+4	; 0x04
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	38 87       	std	Y+8, r19	; 0x08
     e50:	2f 83       	std	Y+7, r18	; 0x07
     e52:	8f 81       	ldd	r24, Y+7	; 0x07
     e54:	98 85       	ldd	r25, Y+8	; 0x08
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	d1 f0       	breq	.+52     	; 0xe8e <DIO_u8SetPinDirection+0x1a6>
     e5a:	2f 81       	ldd	r18, Y+7	; 0x07
     e5c:	38 85       	ldd	r19, Y+8	; 0x08
     e5e:	21 30       	cpi	r18, 0x01	; 1
     e60:	31 05       	cpc	r19, r1
     e62:	09 f0       	breq	.+2      	; 0xe66 <DIO_u8SetPinDirection+0x17e>
     e64:	61 c0       	rjmp	.+194    	; 0xf28 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e66:	a4 e3       	ldi	r26, 0x34	; 52
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e4 e3       	ldi	r30, 0x34	; 52
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_u8SetPinDirection+0x19c>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_u8SetPinDirection+0x198>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	4d c0       	rjmp	.+154    	; 0xf28 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e8e:	a4 e3       	ldi	r26, 0x34	; 52
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e4 e3       	ldi	r30, 0x34	; 52
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_u8SetPinDirection+0x1c4>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_u8SetPinDirection+0x1c0>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	38 c0       	rjmp	.+112    	; 0xf28 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinDirection)
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	3e 83       	std	Y+6, r19	; 0x06
     ec0:	2d 83       	std	Y+5, r18	; 0x05
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	9e 81       	ldd	r25, Y+6	; 0x06
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	c9 f0       	breq	.+50     	; 0xefc <DIO_u8SetPinDirection+0x214>
     eca:	2d 81       	ldd	r18, Y+5	; 0x05
     ecc:	3e 81       	ldd	r19, Y+6	; 0x06
     ece:	21 30       	cpi	r18, 0x01	; 1
     ed0:	31 05       	cpc	r19, r1
     ed2:	51 f5       	brne	.+84     	; 0xf28 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     ed4:	a1 e3       	ldi	r26, 0x31	; 49
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e1 e3       	ldi	r30, 0x31	; 49
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_u8SetPinDirection+0x20a>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_u8SetPinDirection+0x206>
     ef6:	84 2b       	or	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	16 c0       	rjmp	.+44     	; 0xf28 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     efc:	a1 e3       	ldi	r26, 0x31	; 49
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e1 e3       	ldi	r30, 0x31	; 49
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_u8SetPinDirection+0x232>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_u8SetPinDirection+0x22e>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <DIO_u8SetPinDirection+0x240>
			break;			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f26:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2a:	2e 96       	adiw	r28, 0x0e	; 14
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <DIO_u8SetPinValue>:

u8  DIO_u8SetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinValue)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	2e 97       	sbiw	r28, 0x0e	; 14
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	8a 83       	std	Y+2, r24	; 0x02
     f52:	6b 83       	std	Y+3, r22	; 0x03
     f54:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	88 30       	cpi	r24, 0x08	; 8
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <DIO_u8SetPinValue+0x26>
     f60:	08 c1       	rjmp	.+528    	; 0x1172 <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	3e 87       	std	Y+14, r19	; 0x0e
     f6a:	2d 87       	std	Y+13, r18	; 0x0d
     f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	91 05       	cpc	r25, r1
     f74:	09 f4       	brne	.+2      	; 0xf78 <DIO_u8SetPinValue+0x3c>
     f76:	50 c0       	rjmp	.+160    	; 0x1018 <DIO_u8SetPinValue+0xdc>
     f78:	2d 85       	ldd	r18, Y+13	; 0x0d
     f7a:	3e 85       	ldd	r19, Y+14	; 0x0e
     f7c:	22 30       	cpi	r18, 0x02	; 2
     f7e:	31 05       	cpc	r19, r1
     f80:	2c f4       	brge	.+10     	; 0xf8c <DIO_u8SetPinValue+0x50>
     f82:	8d 85       	ldd	r24, Y+13	; 0x0d
     f84:	9e 85       	ldd	r25, Y+14	; 0x0e
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	71 f0       	breq	.+28     	; 0xfa6 <DIO_u8SetPinValue+0x6a>
     f8a:	f1 c0       	rjmp	.+482    	; 0x116e <DIO_u8SetPinValue+0x232>
     f8c:	2d 85       	ldd	r18, Y+13	; 0x0d
     f8e:	3e 85       	ldd	r19, Y+14	; 0x0e
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <DIO_u8SetPinValue+0x5c>
     f96:	79 c0       	rjmp	.+242    	; 0x108a <DIO_u8SetPinValue+0x14e>
     f98:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <DIO_u8SetPinValue+0x68>
     fa2:	ac c0       	rjmp	.+344    	; 0x10fc <DIO_u8SetPinValue+0x1c0>
     fa4:	e4 c0       	rjmp	.+456    	; 0x116e <DIO_u8SetPinValue+0x232>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinValue)
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	3c 87       	std	Y+12, r19	; 0x0c
     fae:	2b 87       	std	Y+11, r18	; 0x0b
     fb0:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb2:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	c9 f0       	breq	.+50     	; 0xfea <DIO_u8SetPinValue+0xae>
     fb8:	2b 85       	ldd	r18, Y+11	; 0x0b
     fba:	3c 85       	ldd	r19, Y+12	; 0x0c
     fbc:	21 30       	cpi	r18, 0x01	; 1
     fbe:	31 05       	cpc	r19, r1
     fc0:	49 f5       	brne	.+82     	; 0x1014 <DIO_u8SetPinValue+0xd8>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fc2:	ab e3       	ldi	r26, 0x3B	; 59
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	eb e3       	ldi	r30, 0x3B	; 59
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_u8SetPinValue+0xa4>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_u8SetPinValue+0xa0>
     fe4:	84 2b       	or	r24, r20
     fe6:	8c 93       	st	X, r24
     fe8:	c5 c0       	rjmp	.+394    	; 0x1174 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fea:	ab e3       	ldi	r26, 0x3B	; 59
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	eb e3       	ldi	r30, 0x3B	; 59
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_u8SetPinValue+0xcc>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_u8SetPinValue+0xc8>
    100c:	80 95       	com	r24
    100e:	84 23       	and	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	b0 c0       	rjmp	.+352    	; 0x1174 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    1014:	19 82       	std	Y+1, r1	; 0x01
    1016:	ae c0       	rjmp	.+348    	; 0x1174 <DIO_u8SetPinValue+0x238>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinValue)
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3a 87       	std	Y+10, r19	; 0x0a
    1020:	29 87       	std	Y+9, r18	; 0x09
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	9a 85       	ldd	r25, Y+10	; 0x0a
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	c9 f0       	breq	.+50     	; 0x105c <DIO_u8SetPinValue+0x120>
    102a:	29 85       	ldd	r18, Y+9	; 0x09
    102c:	3a 85       	ldd	r19, Y+10	; 0x0a
    102e:	21 30       	cpi	r18, 0x01	; 1
    1030:	31 05       	cpc	r19, r1
    1032:	49 f5       	brne	.+82     	; 0x1086 <DIO_u8SetPinValue+0x14a>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1034:	a8 e3       	ldi	r26, 0x38	; 56
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e8 e3       	ldi	r30, 0x38	; 56
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_u8SetPinValue+0x116>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_u8SetPinValue+0x112>
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	8c c0       	rjmp	.+280    	; 0x1174 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    105c:	a8 e3       	ldi	r26, 0x38	; 56
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e8 e3       	ldi	r30, 0x38	; 56
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_u8SetPinValue+0x13e>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_u8SetPinValue+0x13a>
    107e:	80 95       	com	r24
    1080:	84 23       	and	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	77 c0       	rjmp	.+238    	; 0x1174 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    1086:	19 82       	std	Y+1, r1	; 0x01
    1088:	75 c0       	rjmp	.+234    	; 0x1174 <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinValue)
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	38 87       	std	Y+8, r19	; 0x08
    1092:	2f 83       	std	Y+7, r18	; 0x07
    1094:	8f 81       	ldd	r24, Y+7	; 0x07
    1096:	98 85       	ldd	r25, Y+8	; 0x08
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	c9 f0       	breq	.+50     	; 0x10ce <DIO_u8SetPinValue+0x192>
    109c:	2f 81       	ldd	r18, Y+7	; 0x07
    109e:	38 85       	ldd	r19, Y+8	; 0x08
    10a0:	21 30       	cpi	r18, 0x01	; 1
    10a2:	31 05       	cpc	r19, r1
    10a4:	49 f5       	brne	.+82     	; 0x10f8 <DIO_u8SetPinValue+0x1bc>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10a6:	a5 e3       	ldi	r26, 0x35	; 53
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e5 e3       	ldi	r30, 0x35	; 53
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_u8SetPinValue+0x188>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_u8SetPinValue+0x184>
    10c8:	84 2b       	or	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	53 c0       	rjmp	.+166    	; 0x1174 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10ce:	a5 e3       	ldi	r26, 0x35	; 53
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e5 e3       	ldi	r30, 0x35	; 53
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_u8SetPinValue+0x1b0>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_u8SetPinValue+0x1ac>
    10f0:	80 95       	com	r24
    10f2:	84 23       	and	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	3e c0       	rjmp	.+124    	; 0x1174 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    10f8:	19 82       	std	Y+1, r1	; 0x01
    10fa:	3c c0       	rjmp	.+120    	; 0x1174 <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinValue)
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3e 83       	std	Y+6, r19	; 0x06
    1104:	2d 83       	std	Y+5, r18	; 0x05
    1106:	8d 81       	ldd	r24, Y+5	; 0x05
    1108:	9e 81       	ldd	r25, Y+6	; 0x06
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	c9 f0       	breq	.+50     	; 0x1140 <DIO_u8SetPinValue+0x204>
    110e:	2d 81       	ldd	r18, Y+5	; 0x05
    1110:	3e 81       	ldd	r19, Y+6	; 0x06
    1112:	21 30       	cpi	r18, 0x01	; 1
    1114:	31 05       	cpc	r19, r1
    1116:	49 f5       	brne	.+82     	; 0x116a <DIO_u8SetPinValue+0x22e>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1118:	a2 e3       	ldi	r26, 0x32	; 50
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e2 e3       	ldi	r30, 0x32	; 50
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_u8SetPinValue+0x1fa>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_u8SetPinValue+0x1f6>
    113a:	84 2b       	or	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	1a c0       	rjmp	.+52     	; 0x1174 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1140:	a2 e3       	ldi	r26, 0x32	; 50
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e2 e3       	ldi	r30, 0x32	; 50
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_u8SetPinValue+0x222>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_u8SetPinValue+0x21e>
    1162:	80 95       	com	r24
    1164:	84 23       	and	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	05 c0       	rjmp	.+10     	; 0x1174 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    116a:	19 82       	std	Y+1, r1	; 0x01
    116c:	03 c0       	rjmp	.+6      	; 0x1174 <DIO_u8SetPinValue+0x238>
				}		
			break;
			default :
				Local_u8ErrorState = STD_TYPES_NOK;
    116e:	19 82       	std	Y+1, r1	; 0x01
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <DIO_u8SetPinValue+0x238>
		}
			
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1172:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
}
    1176:	2e 96       	adiw	r28, 0x0e	; 14
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <DIO_u8GetPinValue>:

u8  DIO_u8GetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 * Copy_pu8ReturnedPinValue)
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	28 97       	sbiw	r28, 0x08	; 8
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	8b 83       	std	Y+3, r24	; 0x03
    119e:	6c 83       	std	Y+4, r22	; 0x04
    11a0:	5e 83       	std	Y+6, r21	; 0x06
    11a2:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	84 30       	cpi	r24, 0x04	; 4
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <DIO_u8GetPinValue+0x28>
    11ae:	9f c0       	rjmp	.+318    	; 0x12ee <DIO_u8GetPinValue+0x166>
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	88 30       	cpi	r24, 0x08	; 8
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <DIO_u8GetPinValue+0x30>
    11b6:	9b c0       	rjmp	.+310    	; 0x12ee <DIO_u8GetPinValue+0x166>
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	09 f4       	brne	.+2      	; 0x11c2 <DIO_u8GetPinValue+0x3a>
    11c0:	96 c0       	rjmp	.+300    	; 0x12ee <DIO_u8GetPinValue+0x166>
	{
		switch (Copy_u8PortId)
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	38 87       	std	Y+8, r19	; 0x08
    11ca:	2f 83       	std	Y+7, r18	; 0x07
    11cc:	4f 81       	ldd	r20, Y+7	; 0x07
    11ce:	58 85       	ldd	r21, Y+8	; 0x08
    11d0:	41 30       	cpi	r20, 0x01	; 1
    11d2:	51 05       	cpc	r21, r1
    11d4:	a9 f1       	breq	.+106    	; 0x1240 <DIO_u8GetPinValue+0xb8>
    11d6:	8f 81       	ldd	r24, Y+7	; 0x07
    11d8:	98 85       	ldd	r25, Y+8	; 0x08
    11da:	82 30       	cpi	r24, 0x02	; 2
    11dc:	91 05       	cpc	r25, r1
    11de:	34 f4       	brge	.+12     	; 0x11ec <DIO_u8GetPinValue+0x64>
    11e0:	2f 81       	ldd	r18, Y+7	; 0x07
    11e2:	38 85       	ldd	r19, Y+8	; 0x08
    11e4:	21 15       	cp	r18, r1
    11e6:	31 05       	cpc	r19, r1
    11e8:	71 f0       	breq	.+28     	; 0x1206 <DIO_u8GetPinValue+0x7e>
    11ea:	82 c0       	rjmp	.+260    	; 0x12f0 <DIO_u8GetPinValue+0x168>
    11ec:	4f 81       	ldd	r20, Y+7	; 0x07
    11ee:	58 85       	ldd	r21, Y+8	; 0x08
    11f0:	42 30       	cpi	r20, 0x02	; 2
    11f2:	51 05       	cpc	r21, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <DIO_u8GetPinValue+0x70>
    11f6:	41 c0       	rjmp	.+130    	; 0x127a <DIO_u8GetPinValue+0xf2>
    11f8:	8f 81       	ldd	r24, Y+7	; 0x07
    11fa:	98 85       	ldd	r25, Y+8	; 0x08
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <DIO_u8GetPinValue+0x7c>
    1202:	58 c0       	rjmp	.+176    	; 0x12b4 <DIO_u8GetPinValue+0x12c>
    1204:	75 c0       	rjmp	.+234    	; 0x12f0 <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA:
				Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    1206:	e9 e3       	ldi	r30, 0x39	; 57
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a9 01       	movw	r20, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_u8GetPinValue+0x96>
    121a:	55 95       	asr	r21
    121c:	47 95       	ror	r20
    121e:	8a 95       	dec	r24
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_u8GetPinValue+0x92>
    1222:	ca 01       	movw	r24, r20
    1224:	81 70       	andi	r24, 0x01	; 1
    1226:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	88 23       	and	r24, r24
    122c:	21 f4       	brne	.+8      	; 0x1236 <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    122e:	ed 81       	ldd	r30, Y+5	; 0x05
    1230:	fe 81       	ldd	r31, Y+6	; 0x06
    1232:	10 82       	st	Z, r1
    1234:	5d c0       	rjmp	.+186    	; 0x12f0 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1236:	ed 81       	ldd	r30, Y+5	; 0x05
    1238:	fe 81       	ldd	r31, Y+6	; 0x06
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	80 83       	st	Z, r24
    123e:	58 c0       	rjmp	.+176    	; 0x12f0 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTB:
				Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    1240:	e6 e3       	ldi	r30, 0x36	; 54
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_u8GetPinValue+0xd0>
    1254:	55 95       	asr	r21
    1256:	47 95       	ror	r20
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_u8GetPinValue+0xcc>
    125c:	ca 01       	movw	r24, r20
    125e:	81 70       	andi	r24, 0x01	; 1
    1260:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	88 23       	and	r24, r24
    1266:	21 f4       	brne	.+8      	; 0x1270 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1268:	ed 81       	ldd	r30, Y+5	; 0x05
    126a:	fe 81       	ldd	r31, Y+6	; 0x06
    126c:	10 82       	st	Z, r1
    126e:	40 c0       	rjmp	.+128    	; 0x12f0 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1270:	ed 81       	ldd	r30, Y+5	; 0x05
    1272:	fe 81       	ldd	r31, Y+6	; 0x06
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 83       	st	Z, r24
    1278:	3b c0       	rjmp	.+118    	; 0x12f0 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTC:
				Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    127a:	e3 e3       	ldi	r30, 0x33	; 51
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a9 01       	movw	r20, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_u8GetPinValue+0x10a>
    128e:	55 95       	asr	r21
    1290:	47 95       	ror	r20
    1292:	8a 95       	dec	r24
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_u8GetPinValue+0x106>
    1296:	ca 01       	movw	r24, r20
    1298:	81 70       	andi	r24, 0x01	; 1
    129a:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	88 23       	and	r24, r24
    12a0:	21 f4       	brne	.+8      	; 0x12aa <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12a2:	ed 81       	ldd	r30, Y+5	; 0x05
    12a4:	fe 81       	ldd	r31, Y+6	; 0x06
    12a6:	10 82       	st	Z, r1
    12a8:	23 c0       	rjmp	.+70     	; 0x12f0 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12aa:	ed 81       	ldd	r30, Y+5	; 0x05
    12ac:	fe 81       	ldd	r31, Y+6	; 0x06
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	80 83       	st	Z, r24
    12b2:	1e c0       	rjmp	.+60     	; 0x12f0 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTD:
				Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    12b4:	e0 e3       	ldi	r30, 0x30	; 48
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a9 01       	movw	r20, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_u8GetPinValue+0x144>
    12c8:	55 95       	asr	r21
    12ca:	47 95       	ror	r20
    12cc:	8a 95       	dec	r24
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_u8GetPinValue+0x140>
    12d0:	ca 01       	movw	r24, r20
    12d2:	81 70       	andi	r24, 0x01	; 1
    12d4:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	88 23       	and	r24, r24
    12da:	21 f4       	brne	.+8      	; 0x12e4 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12dc:	ed 81       	ldd	r30, Y+5	; 0x05
    12de:	fe 81       	ldd	r31, Y+6	; 0x06
    12e0:	10 82       	st	Z, r1
    12e2:	06 c0       	rjmp	.+12     	; 0x12f0 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12e4:	ed 81       	ldd	r30, Y+5	; 0x05
    12e6:	fe 81       	ldd	r31, Y+6	; 0x06
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	80 83       	st	Z, r24
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <DIO_u8GetPinValue+0x168>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12ee:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12f2:	28 96       	adiw	r28, 0x08	; 8
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <DIO_u8SetPortDirection>:

u8  DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	2d 97       	sbiw	r28, 0x0d	; 13
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	8a 83       	std	Y+2, r24	; 0x02
    131a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	21 f0       	breq	.+8      	; 0x132e <DIO_u8SetPortDirection+0x2a>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	88 23       	and	r24, r24
    132a:	09 f0       	breq	.+2      	; 0x132e <DIO_u8SetPortDirection+0x2a>
    132c:	7f c0       	rjmp	.+254    	; 0x142c <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3d 87       	std	Y+13, r19	; 0x0d
    1336:	2c 87       	std	Y+12, r18	; 0x0c
    1338:	8c 85       	ldd	r24, Y+12	; 0x0c
    133a:	9d 85       	ldd	r25, Y+13	; 0x0d
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	91 05       	cpc	r25, r1
    1340:	71 f1       	breq	.+92     	; 0x139e <DIO_u8SetPortDirection+0x9a>
    1342:	2c 85       	ldd	r18, Y+12	; 0x0c
    1344:	3d 85       	ldd	r19, Y+13	; 0x0d
    1346:	22 30       	cpi	r18, 0x02	; 2
    1348:	31 05       	cpc	r19, r1
    134a:	2c f4       	brge	.+10     	; 0x1356 <DIO_u8SetPortDirection+0x52>
    134c:	8c 85       	ldd	r24, Y+12	; 0x0c
    134e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	69 f0       	breq	.+26     	; 0x136e <DIO_u8SetPortDirection+0x6a>
    1354:	69 c0       	rjmp	.+210    	; 0x1428 <DIO_u8SetPortDirection+0x124>
    1356:	2c 85       	ldd	r18, Y+12	; 0x0c
    1358:	3d 85       	ldd	r19, Y+13	; 0x0d
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	b1 f1       	breq	.+108    	; 0x13cc <DIO_u8SetPortDirection+0xc8>
    1360:	8c 85       	ldd	r24, Y+12	; 0x0c
    1362:	9d 85       	ldd	r25, Y+13	; 0x0d
    1364:	83 30       	cpi	r24, 0x03	; 3
    1366:	91 05       	cpc	r25, r1
    1368:	09 f4       	brne	.+2      	; 0x136c <DIO_u8SetPortDirection+0x68>
    136a:	47 c0       	rjmp	.+142    	; 0x13fa <DIO_u8SetPortDirection+0xf6>
    136c:	5d c0       	rjmp	.+186    	; 0x1428 <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PortDirection)
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3b 87       	std	Y+11, r19	; 0x0b
    1376:	2a 87       	std	Y+10, r18	; 0x0a
    1378:	8a 85       	ldd	r24, Y+10	; 0x0a
    137a:	9b 85       	ldd	r25, Y+11	; 0x0b
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	59 f0       	breq	.+22     	; 0x1396 <DIO_u8SetPortDirection+0x92>
    1380:	2a 85       	ldd	r18, Y+10	; 0x0a
    1382:	3b 85       	ldd	r19, Y+11	; 0x0b
    1384:	21 30       	cpi	r18, 0x01	; 1
    1386:	31 05       	cpc	r19, r1
    1388:	09 f0       	breq	.+2      	; 0x138c <DIO_u8SetPortDirection+0x88>
    138a:	51 c0       	rjmp	.+162    	; 0x142e <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xff;break;
    138c:	ea e3       	ldi	r30, 0x3A	; 58
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8f ef       	ldi	r24, 0xFF	; 255
    1392:	80 83       	st	Z, r24
    1394:	4c c0       	rjmp	.+152    	; 0x142e <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break;
    1396:	ea e3       	ldi	r30, 0x3A	; 58
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	10 82       	st	Z, r1
    139c:	48 c0       	rjmp	.+144    	; 0x142e <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PortDirection)
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	39 87       	std	Y+9, r19	; 0x09
    13a6:	28 87       	std	Y+8, r18	; 0x08
    13a8:	88 85       	ldd	r24, Y+8	; 0x08
    13aa:	99 85       	ldd	r25, Y+9	; 0x09
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	51 f0       	breq	.+20     	; 0x13c4 <DIO_u8SetPortDirection+0xc0>
    13b0:	28 85       	ldd	r18, Y+8	; 0x08
    13b2:	39 85       	ldd	r19, Y+9	; 0x09
    13b4:	21 30       	cpi	r18, 0x01	; 1
    13b6:	31 05       	cpc	r19, r1
    13b8:	d1 f5       	brne	.+116    	; 0x142e <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xff;break;
    13ba:	e7 e3       	ldi	r30, 0x37	; 55
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	80 83       	st	Z, r24
    13c2:	35 c0       	rjmp	.+106    	; 0x142e <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break;
    13c4:	e7 e3       	ldi	r30, 0x37	; 55
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	10 82       	st	Z, r1
    13ca:	31 c0       	rjmp	.+98     	; 0x142e <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PortDirection)
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	3f 83       	std	Y+7, r19	; 0x07
    13d4:	2e 83       	std	Y+6, r18	; 0x06
    13d6:	8e 81       	ldd	r24, Y+6	; 0x06
    13d8:	9f 81       	ldd	r25, Y+7	; 0x07
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	51 f0       	breq	.+20     	; 0x13f2 <DIO_u8SetPortDirection+0xee>
    13de:	2e 81       	ldd	r18, Y+6	; 0x06
    13e0:	3f 81       	ldd	r19, Y+7	; 0x07
    13e2:	21 30       	cpi	r18, 0x01	; 1
    13e4:	31 05       	cpc	r19, r1
    13e6:	19 f5       	brne	.+70     	; 0x142e <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xff;break;
    13e8:	e4 e3       	ldi	r30, 0x34	; 52
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	80 83       	st	Z, r24
    13f0:	1e c0       	rjmp	.+60     	; 0x142e <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break;
    13f2:	e4 e3       	ldi	r30, 0x34	; 52
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	10 82       	st	Z, r1
    13f8:	1a c0       	rjmp	.+52     	; 0x142e <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PortDirection)
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3d 83       	std	Y+5, r19	; 0x05
    1402:	2c 83       	std	Y+4, r18	; 0x04
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	51 f0       	breq	.+20     	; 0x1420 <DIO_u8SetPortDirection+0x11c>
    140c:	2c 81       	ldd	r18, Y+4	; 0x04
    140e:	3d 81       	ldd	r19, Y+5	; 0x05
    1410:	21 30       	cpi	r18, 0x01	; 1
    1412:	31 05       	cpc	r19, r1
    1414:	61 f4       	brne	.+24     	; 0x142e <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xff;break;
    1416:	e1 e3       	ldi	r30, 0x31	; 49
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	8f ef       	ldi	r24, 0xFF	; 255
    141c:	80 83       	st	Z, r24
    141e:	07 c0       	rjmp	.+14     	; 0x142e <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break;
    1420:	e1 e3       	ldi	r30, 0x31	; 49
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	10 82       	st	Z, r1
    1426:	03 c0       	rjmp	.+6      	; 0x142e <DIO_u8SetPortDirection+0x12a>
				}
			break;
			default :Local_u8ErrorState = STD_TYPES_NOK;
    1428:	19 82       	std	Y+1, r1	; 0x01
    142a:	01 c0       	rjmp	.+2      	; 0x142e <DIO_u8SetPortDirection+0x12a>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    142c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    142e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1430:	2d 96       	adiw	r28, 0x0d	; 13
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <DIO_u8SetPortValue>:

u8  DIO_u8SetPortValue    (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <DIO_u8SetPortValue+0x6>
    1448:	00 d0       	rcall	.+0      	; 0x144a <DIO_u8SetPortValue+0x8>
    144a:	0f 92       	push	r0
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	8a 83       	std	Y+2, r24	; 0x02
    1452:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3d 83       	std	Y+5, r19	; 0x05
    1460:	2c 83       	std	Y+4, r18	; 0x04
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	9d 81       	ldd	r25, Y+5	; 0x05
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	91 05       	cpc	r25, r1
    146a:	d1 f0       	breq	.+52     	; 0x14a0 <DIO_u8SetPortValue+0x5e>
    146c:	2c 81       	ldd	r18, Y+4	; 0x04
    146e:	3d 81       	ldd	r19, Y+5	; 0x05
    1470:	22 30       	cpi	r18, 0x02	; 2
    1472:	31 05       	cpc	r19, r1
    1474:	2c f4       	brge	.+10     	; 0x1480 <DIO_u8SetPortValue+0x3e>
    1476:	8c 81       	ldd	r24, Y+4	; 0x04
    1478:	9d 81       	ldd	r25, Y+5	; 0x05
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	61 f0       	breq	.+24     	; 0x1496 <DIO_u8SetPortValue+0x54>
    147e:	1f c0       	rjmp	.+62     	; 0x14be <DIO_u8SetPortValue+0x7c>
    1480:	2c 81       	ldd	r18, Y+4	; 0x04
    1482:	3d 81       	ldd	r19, Y+5	; 0x05
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	81 f0       	breq	.+32     	; 0x14aa <DIO_u8SetPortValue+0x68>
    148a:	8c 81       	ldd	r24, Y+4	; 0x04
    148c:	9d 81       	ldd	r25, Y+5	; 0x05
    148e:	83 30       	cpi	r24, 0x03	; 3
    1490:	91 05       	cpc	r25, r1
    1492:	81 f0       	breq	.+32     	; 0x14b4 <DIO_u8SetPortValue+0x72>
    1494:	14 c0       	rjmp	.+40     	; 0x14be <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    1496:	eb e3       	ldi	r30, 0x3B	; 59
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	80 83       	st	Z, r24
    149e:	10 c0       	rjmp	.+32     	; 0x14c0 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    14a0:	e8 e3       	ldi	r30, 0x38	; 56
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	80 83       	st	Z, r24
    14a8:	0b c0       	rjmp	.+22     	; 0x14c0 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    14aa:	e5 e3       	ldi	r30, 0x35	; 53
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	80 83       	st	Z, r24
    14b2:	06 c0       	rjmp	.+12     	; 0x14c0 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    14b4:	e2 e3       	ldi	r30, 0x32	; 50
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	80 83       	st	Z, r24
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState = STD_TYPES_NOK;
    14be:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <DIO_u8GetPortValue>:

u8  DIO_u8GetPortValue    (u8 Copy_u8PortId, u8 * Copy_pu8ReturnedPortValue)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <DIO_u8GetPortValue+0x6>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <DIO_u8GetPortValue+0x8>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <DIO_u8GetPortValue+0xa>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	7c 83       	std	Y+4, r23	; 0x04
    14e4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_pu8ReturnedPortValue != NULL)
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	e9 f1       	breq	.+122    	; 0x156c <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	3e 83       	std	Y+6, r19	; 0x06
    14fa:	2d 83       	std	Y+5, r18	; 0x05
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	91 05       	cpc	r25, r1
    1504:	e1 f0       	breq	.+56     	; 0x153e <DIO_u8GetPortValue+0x6c>
    1506:	2d 81       	ldd	r18, Y+5	; 0x05
    1508:	3e 81       	ldd	r19, Y+6	; 0x06
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	2c f4       	brge	.+10     	; 0x151a <DIO_u8GetPortValue+0x48>
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	61 f0       	breq	.+24     	; 0x1530 <DIO_u8GetPortValue+0x5e>
    1518:	27 c0       	rjmp	.+78     	; 0x1568 <DIO_u8GetPortValue+0x96>
    151a:	2d 81       	ldd	r18, Y+5	; 0x05
    151c:	3e 81       	ldd	r19, Y+6	; 0x06
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	a1 f0       	breq	.+40     	; 0x154c <DIO_u8GetPortValue+0x7a>
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	b1 f0       	breq	.+44     	; 0x155a <DIO_u8GetPortValue+0x88>
    152e:	1c c0       	rjmp	.+56     	; 0x1568 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    1530:	e9 e3       	ldi	r30, 0x39	; 57
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	eb 81       	ldd	r30, Y+3	; 0x03
    1538:	fc 81       	ldd	r31, Y+4	; 0x04
    153a:	80 83       	st	Z, r24
    153c:	18 c0       	rjmp	.+48     	; 0x156e <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    153e:	e6 e3       	ldi	r30, 0x36	; 54
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	eb 81       	ldd	r30, Y+3	; 0x03
    1546:	fc 81       	ldd	r31, Y+4	; 0x04
    1548:	80 83       	st	Z, r24
    154a:	11 c0       	rjmp	.+34     	; 0x156e <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    154c:	e3 e3       	ldi	r30, 0x33	; 51
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	eb 81       	ldd	r30, Y+3	; 0x03
    1554:	fc 81       	ldd	r31, Y+4	; 0x04
    1556:	80 83       	st	Z, r24
    1558:	0a c0       	rjmp	.+20     	; 0x156e <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    155a:	e0 e3       	ldi	r30, 0x30	; 48
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	eb 81       	ldd	r30, Y+3	; 0x03
    1562:	fc 81       	ldd	r31, Y+4	; 0x04
    1564:	80 83       	st	Z, r24
    1566:	03 c0       	rjmp	.+6      	; 0x156e <DIO_u8GetPortValue+0x9c>
			default : Local_u8ErrorState = STD_TYPES_NOK;
    1568:	19 82       	std	Y+1, r1	; 0x01
    156a:	01 c0       	rjmp	.+2      	; 0x156e <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    156c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	26 96       	adiw	r28, 0x06	; 6
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <EXTI_u8EXTIEnable>:

#include "EXTI_interface.h"
#include "EXTI_private.h"
#include "EXTI_config.h"

u8 EXTI_u8EXTIEnable(u8 Copy_u8EXTIIndix,u8 Copy_u8EdgeIndix){
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	2b 97       	sbiw	r28, 0x0b	; 11
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	8a 83       	std	Y+2, r24	; 0x02
    1598:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTIIndix){
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	3b 87       	std	Y+11, r19	; 0x0b
    15a6:	2a 87       	std	Y+10, r18	; 0x0a
    15a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	91 05       	cpc	r25, r1
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <EXTI_u8EXTIEnable+0x32>
    15b2:	85 c0       	rjmp	.+266    	; 0x16be <EXTI_u8EXTIEnable+0x13c>
    15b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    15b6:	3b 85       	ldd	r19, Y+11	; 0x0b
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <EXTI_u8EXTIEnable+0x3e>
    15be:	f9 c0       	rjmp	.+498    	; 0x17b2 <EXTI_u8EXTIEnable+0x230>
    15c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	09 f0       	breq	.+2      	; 0x15ca <EXTI_u8EXTIEnable+0x48>
    15c8:	23 c1       	rjmp	.+582    	; 0x1810 <EXTI_u8EXTIEnable+0x28e>
		case EXTI_u8_INT0:
			switch(Copy_u8EdgeIndix){
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	39 87       	std	Y+9, r19	; 0x09
    15d2:	28 87       	std	Y+8, r18	; 0x08
    15d4:	88 85       	ldd	r24, Y+8	; 0x08
    15d6:	99 85       	ldd	r25, Y+9	; 0x09
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	91 05       	cpc	r25, r1
    15dc:	61 f1       	breq	.+88     	; 0x1636 <EXTI_u8EXTIEnable+0xb4>
    15de:	28 85       	ldd	r18, Y+8	; 0x08
    15e0:	39 85       	ldd	r19, Y+9	; 0x09
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <EXTI_u8EXTIEnable+0x70>
    15e8:	88 85       	ldd	r24, Y+8	; 0x08
    15ea:	99 85       	ldd	r25, Y+9	; 0x09
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	69 f0       	breq	.+26     	; 0x160a <EXTI_u8EXTIEnable+0x88>
    15f0:	64 c0       	rjmp	.+200    	; 0x16ba <EXTI_u8EXTIEnable+0x138>
    15f2:	28 85       	ldd	r18, Y+8	; 0x08
    15f4:	39 85       	ldd	r19, Y+9	; 0x09
    15f6:	22 30       	cpi	r18, 0x02	; 2
    15f8:	31 05       	cpc	r19, r1
    15fa:	99 f1       	breq	.+102    	; 0x1662 <EXTI_u8EXTIEnable+0xe0>
    15fc:	88 85       	ldd	r24, Y+8	; 0x08
    15fe:	99 85       	ldd	r25, Y+9	; 0x09
    1600:	83 30       	cpi	r24, 0x03	; 3
    1602:	91 05       	cpc	r25, r1
    1604:	09 f4       	brne	.+2      	; 0x1608 <EXTI_u8EXTIEnable+0x86>
    1606:	43 c0       	rjmp	.+134    	; 0x168e <EXTI_u8EXTIEnable+0x10c>
    1608:	58 c0       	rjmp	.+176    	; 0x16ba <EXTI_u8EXTIEnable+0x138>
				case EXTI_u8_RAISING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,1);
    160a:	a5 e5       	ldi	r26, 0x55	; 85
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e5 e5       	ldi	r30, 0x55	; 85
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	82 60       	ori	r24, 0x02	; 2
    1616:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,0);
    1618:	a5 e5       	ldi	r26, 0x55	; 85
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e5 e5       	ldi	r30, 0x55	; 85
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	81 60       	ori	r24, 0x01	; 1
    1624:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    1626:	ab e5       	ldi	r26, 0x5B	; 91
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	eb e5       	ldi	r30, 0x5B	; 91
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	80 64       	ori	r24, 0x40	; 64
    1632:	8c 93       	st	X, r24
    1634:	ee c0       	rjmp	.+476    	; 0x1812 <EXTI_u8EXTIEnable+0x290>
				break;
				
				case EXTI_u8_FALLING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,1);
    1636:	a5 e5       	ldi	r26, 0x55	; 85
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e5 e5       	ldi	r30, 0x55	; 85
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	82 60       	ori	r24, 0x02	; 2
    1642:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,0);
    1644:	a5 e5       	ldi	r26, 0x55	; 85
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e5 e5       	ldi	r30, 0x55	; 85
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	8e 7f       	andi	r24, 0xFE	; 254
    1650:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    1652:	ab e5       	ldi	r26, 0x5B	; 91
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	eb e5       	ldi	r30, 0x5B	; 91
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	80 64       	ori	r24, 0x40	; 64
    165e:	8c 93       	st	X, r24
    1660:	d8 c0       	rjmp	.+432    	; 0x1812 <EXTI_u8EXTIEnable+0x290>
				break;
				
				case EXTI_u8_ANY_LOGICAL_CHANGE:
					CLR_BIT(EXTI_u8_MCUCR,1);
    1662:	a5 e5       	ldi	r26, 0x55	; 85
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e5 e5       	ldi	r30, 0x55	; 85
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	8d 7f       	andi	r24, 0xFD	; 253
    166e:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,0);
    1670:	a5 e5       	ldi	r26, 0x55	; 85
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e5 e5       	ldi	r30, 0x55	; 85
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	81 60       	ori	r24, 0x01	; 1
    167c:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    167e:	ab e5       	ldi	r26, 0x5B	; 91
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	eb e5       	ldi	r30, 0x5B	; 91
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	80 64       	ori	r24, 0x40	; 64
    168a:	8c 93       	st	X, r24
    168c:	c2 c0       	rjmp	.+388    	; 0x1812 <EXTI_u8EXTIEnable+0x290>
				break;
				
				case EXTI_u8_LOW_LEVEL:
					CLR_BIT(EXTI_u8_MCUCR,1);
    168e:	a5 e5       	ldi	r26, 0x55	; 85
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e5 e5       	ldi	r30, 0x55	; 85
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	8d 7f       	andi	r24, 0xFD	; 253
    169a:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,0);
    169c:	a5 e5       	ldi	r26, 0x55	; 85
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e5 e5       	ldi	r30, 0x55	; 85
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8e 7f       	andi	r24, 0xFE	; 254
    16a8:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    16aa:	ab e5       	ldi	r26, 0x5B	; 91
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	eb e5       	ldi	r30, 0x5B	; 91
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	80 64       	ori	r24, 0x40	; 64
    16b6:	8c 93       	st	X, r24
    16b8:	ac c0       	rjmp	.+344    	; 0x1812 <EXTI_u8EXTIEnable+0x290>
				break;
				
				default : Local_u8ErrorState= STD_TYPES_NOK;
    16ba:	19 82       	std	Y+1, r1	; 0x01
    16bc:	aa c0       	rjmp	.+340    	; 0x1812 <EXTI_u8EXTIEnable+0x290>
			}
		break;
		
		case EXTI_u8_INT1:
			switch(Copy_u8EdgeIndix){
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	3f 83       	std	Y+7, r19	; 0x07
    16c6:	2e 83       	std	Y+6, r18	; 0x06
    16c8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ca:	9f 81       	ldd	r25, Y+7	; 0x07
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	91 05       	cpc	r25, r1
    16d0:	61 f1       	breq	.+88     	; 0x172a <EXTI_u8EXTIEnable+0x1a8>
    16d2:	2e 81       	ldd	r18, Y+6	; 0x06
    16d4:	3f 81       	ldd	r19, Y+7	; 0x07
    16d6:	22 30       	cpi	r18, 0x02	; 2
    16d8:	31 05       	cpc	r19, r1
    16da:	2c f4       	brge	.+10     	; 0x16e6 <EXTI_u8EXTIEnable+0x164>
    16dc:	8e 81       	ldd	r24, Y+6	; 0x06
    16de:	9f 81       	ldd	r25, Y+7	; 0x07
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	69 f0       	breq	.+26     	; 0x16fe <EXTI_u8EXTIEnable+0x17c>
    16e4:	64 c0       	rjmp	.+200    	; 0x17ae <EXTI_u8EXTIEnable+0x22c>
    16e6:	2e 81       	ldd	r18, Y+6	; 0x06
    16e8:	3f 81       	ldd	r19, Y+7	; 0x07
    16ea:	22 30       	cpi	r18, 0x02	; 2
    16ec:	31 05       	cpc	r19, r1
    16ee:	99 f1       	breq	.+102    	; 0x1756 <EXTI_u8EXTIEnable+0x1d4>
    16f0:	8e 81       	ldd	r24, Y+6	; 0x06
    16f2:	9f 81       	ldd	r25, Y+7	; 0x07
    16f4:	83 30       	cpi	r24, 0x03	; 3
    16f6:	91 05       	cpc	r25, r1
    16f8:	09 f4       	brne	.+2      	; 0x16fc <EXTI_u8EXTIEnable+0x17a>
    16fa:	43 c0       	rjmp	.+134    	; 0x1782 <EXTI_u8EXTIEnable+0x200>
    16fc:	58 c0       	rjmp	.+176    	; 0x17ae <EXTI_u8EXTIEnable+0x22c>
				case EXTI_u8_RAISING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,3);
    16fe:	a5 e5       	ldi	r26, 0x55	; 85
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e5 e5       	ldi	r30, 0x55	; 85
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	88 60       	ori	r24, 0x08	; 8
    170a:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,2);
    170c:	a5 e5       	ldi	r26, 0x55	; 85
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e5 e5       	ldi	r30, 0x55	; 85
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	84 60       	ori	r24, 0x04	; 4
    1718:	8c 93       	st	X, r24
					/* Enable EXTI1 */
					SET_BIT(EXTI_u8_GICR,7);
    171a:	ab e5       	ldi	r26, 0x5B	; 91
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	eb e5       	ldi	r30, 0x5B	; 91
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	80 68       	ori	r24, 0x80	; 128
    1726:	8c 93       	st	X, r24
    1728:	74 c0       	rjmp	.+232    	; 0x1812 <EXTI_u8EXTIEnable+0x290>
				break;
				
				case EXTI_u8_FALLING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,3);
    172a:	a5 e5       	ldi	r26, 0x55	; 85
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e5 e5       	ldi	r30, 0x55	; 85
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	88 60       	ori	r24, 0x08	; 8
    1736:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,2);
    1738:	a5 e5       	ldi	r26, 0x55	; 85
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e5 e5       	ldi	r30, 0x55	; 85
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	8b 7f       	andi	r24, 0xFB	; 251
    1744:	8c 93       	st	X, r24
					/* Enable EXTI1 */
					SET_BIT(EXTI_u8_GICR,7);
    1746:	ab e5       	ldi	r26, 0x5B	; 91
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	eb e5       	ldi	r30, 0x5B	; 91
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	80 68       	ori	r24, 0x80	; 128
    1752:	8c 93       	st	X, r24
    1754:	5e c0       	rjmp	.+188    	; 0x1812 <EXTI_u8EXTIEnable+0x290>
				break;
				
				case EXTI_u8_ANY_LOGICAL_CHANGE:
					CLR_BIT(EXTI_u8_MCUCR,3);
    1756:	a5 e5       	ldi	r26, 0x55	; 85
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e5 e5       	ldi	r30, 0x55	; 85
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	87 7f       	andi	r24, 0xF7	; 247
    1762:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,2);
    1764:	a5 e5       	ldi	r26, 0x55	; 85
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e5 e5       	ldi	r30, 0x55	; 85
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	84 60       	ori	r24, 0x04	; 4
    1770:	8c 93       	st	X, r24
					/* Enable EXTI1 */
					SET_BIT(EXTI_u8_GICR,7);
    1772:	ab e5       	ldi	r26, 0x5B	; 91
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	eb e5       	ldi	r30, 0x5B	; 91
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	80 68       	ori	r24, 0x80	; 128
    177e:	8c 93       	st	X, r24
    1780:	48 c0       	rjmp	.+144    	; 0x1812 <EXTI_u8EXTIEnable+0x290>
				break;
				
				case EXTI_u8_LOW_LEVEL:
					CLR_BIT(EXTI_u8_MCUCR,3);
    1782:	a5 e5       	ldi	r26, 0x55	; 85
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e5 e5       	ldi	r30, 0x55	; 85
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	87 7f       	andi	r24, 0xF7	; 247
    178e:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,2);
    1790:	a5 e5       	ldi	r26, 0x55	; 85
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e5 e5       	ldi	r30, 0x55	; 85
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8b 7f       	andi	r24, 0xFB	; 251
    179c:	8c 93       	st	X, r24
					/* Enable EXTI1 */
					SET_BIT(EXTI_u8_GICR,7);
    179e:	ab e5       	ldi	r26, 0x5B	; 91
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	eb e5       	ldi	r30, 0x5B	; 91
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	80 68       	ori	r24, 0x80	; 128
    17aa:	8c 93       	st	X, r24
    17ac:	32 c0       	rjmp	.+100    	; 0x1812 <EXTI_u8EXTIEnable+0x290>
				break;
				
				default : Local_u8ErrorState= STD_TYPES_NOK;
    17ae:	19 82       	std	Y+1, r1	; 0x01
    17b0:	30 c0       	rjmp	.+96     	; 0x1812 <EXTI_u8EXTIEnable+0x290>
			}
		break;
		
		case EXTI_u8_INT2:
			switch(Copy_u8EdgeIndix){
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3d 83       	std	Y+5, r19	; 0x05
    17ba:	2c 83       	std	Y+4, r18	; 0x04
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	31 f0       	breq	.+12     	; 0x17d0 <EXTI_u8EXTIEnable+0x24e>
    17c4:	2c 81       	ldd	r18, Y+4	; 0x04
    17c6:	3d 81       	ldd	r19, Y+5	; 0x05
    17c8:	21 30       	cpi	r18, 0x01	; 1
    17ca:	31 05       	cpc	r19, r1
    17cc:	81 f0       	breq	.+32     	; 0x17ee <EXTI_u8EXTIEnable+0x26c>
    17ce:	1e c0       	rjmp	.+60     	; 0x180c <EXTI_u8EXTIEnable+0x28a>
				case EXTI_u8_RAISING_EDGE:
					SET_BIT(EXTI_u8_MCUCSR,6);
    17d0:	a4 e5       	ldi	r26, 0x54	; 84
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e4 e5       	ldi	r30, 0x54	; 84
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	80 64       	ori	r24, 0x40	; 64
    17dc:	8c 93       	st	X, r24
					/* Enable EXTI1 */
					SET_BIT(EXTI_u8_GICR,5);
    17de:	ab e5       	ldi	r26, 0x5B	; 91
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	eb e5       	ldi	r30, 0x5B	; 91
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	80 62       	ori	r24, 0x20	; 32
    17ea:	8c 93       	st	X, r24
    17ec:	12 c0       	rjmp	.+36     	; 0x1812 <EXTI_u8EXTIEnable+0x290>
				break;
				
				case EXTI_u8_FALLING_EDGE:
					CLR_BIT(EXTI_u8_MCUCSR,6);
    17ee:	a4 e5       	ldi	r26, 0x54	; 84
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e4 e5       	ldi	r30, 0x54	; 84
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	8f 7b       	andi	r24, 0xBF	; 191
    17fa:	8c 93       	st	X, r24
					/* Enable EXTI1 */
					SET_BIT(EXTI_u8_GICR,5);
    17fc:	ab e5       	ldi	r26, 0x5B	; 91
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	eb e5       	ldi	r30, 0x5B	; 91
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	80 62       	ori	r24, 0x20	; 32
    1808:	8c 93       	st	X, r24
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <EXTI_u8EXTIEnable+0x290>
				break;
				
				default : Local_u8ErrorState= STD_TYPES_NOK;
    180c:	19 82       	std	Y+1, r1	; 0x01
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <EXTI_u8EXTIEnable+0x290>
			}
		break;
		default : Local_u8ErrorState= STD_TYPES_NOK;
    1810:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1812:	89 81       	ldd	r24, Y+1	; 0x01
}
    1814:	2b 96       	adiw	r28, 0x0b	; 11
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <EXTI_u8EXTISetCallBack>:
//}

/* Global Array pointer to function */
static void (*EXTI_ApfExti[3])(void)={NULL,NULL,NULL};

u8 EXTI_u8EXTISetCallBack(u8 Copy_u8EXTIIndix, void(*Copy_pf)(void)){
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <EXTI_u8EXTISetCallBack+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <EXTI_u8EXTISetCallBack+0x8>
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	8a 83       	std	Y+2, r24	; 0x02
    1834:	7c 83       	std	Y+4, r23	; 0x04
    1836:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= STD_TYPES_OK;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8EXTIIndix <= EXTI_u8_INT2) && (Copy_pf != NULL) ){
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	83 30       	cpi	r24, 0x03	; 3
    1840:	88 f4       	brcc	.+34     	; 0x1864 <EXTI_u8EXTISetCallBack+0x3e>
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	69 f0       	breq	.+26     	; 0x1864 <EXTI_u8EXTISetCallBack+0x3e>
		EXTI_ApfExti[Copy_u8EXTIIndix]=Copy_pf;
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	88 2f       	mov	r24, r24
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	fc 01       	movw	r30, r24
    1856:	ec 58       	subi	r30, 0x8C	; 140
    1858:	fe 4f       	sbci	r31, 0xFE	; 254
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	80 83       	st	Z, r24
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <EXTI_u8EXTISetCallBack+0x40>
	}else{
		Local_u8ErrorState= STD_TYPES_NOK;
    1864:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1866:	89 81       	ldd	r24, Y+1	; 0x01
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <__vector_1>:
	/* Tog_Led();//cant call a funcion from application layer
	so we have to use call back function (pointer to function)
	*/
/* Prototype for ISR of EXTI0 */
void __vector_1(void)			__attribute__((signal));
void __vector_1(void){
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	0f 92       	push	r0
    187e:	11 24       	eor	r1, r1
    1880:	2f 93       	push	r18
    1882:	3f 93       	push	r19
    1884:	4f 93       	push	r20
    1886:	5f 93       	push	r21
    1888:	6f 93       	push	r22
    188a:	7f 93       	push	r23
    188c:	8f 93       	push	r24
    188e:	9f 93       	push	r25
    1890:	af 93       	push	r26
    1892:	bf 93       	push	r27
    1894:	ef 93       	push	r30
    1896:	ff 93       	push	r31
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfExti[EXTI_u8_INT0] != NULL){
    18a0:	80 91 74 01 	lds	r24, 0x0174
    18a4:	90 91 75 01 	lds	r25, 0x0175
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	29 f0       	breq	.+10     	; 0x18b6 <__vector_1+0x40>
		EXTI_ApfExti[EXTI_u8_INT0]();
    18ac:	e0 91 74 01 	lds	r30, 0x0174
    18b0:	f0 91 75 01 	lds	r31, 0x0175
    18b4:	09 95       	icall
	}
}
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	ff 91       	pop	r31
    18bc:	ef 91       	pop	r30
    18be:	bf 91       	pop	r27
    18c0:	af 91       	pop	r26
    18c2:	9f 91       	pop	r25
    18c4:	8f 91       	pop	r24
    18c6:	7f 91       	pop	r23
    18c8:	6f 91       	pop	r22
    18ca:	5f 91       	pop	r21
    18cc:	4f 91       	pop	r20
    18ce:	3f 91       	pop	r19
    18d0:	2f 91       	pop	r18
    18d2:	0f 90       	pop	r0
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	0f 90       	pop	r0
    18d8:	1f 90       	pop	r1
    18da:	18 95       	reti

000018dc <__vector_2>:

/* Prototype for ISR of EXTI1 */
void __vector_2(void)			__attribute__((signal));
void __vector_2(void){
    18dc:	1f 92       	push	r1
    18de:	0f 92       	push	r0
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	0f 92       	push	r0
    18e4:	11 24       	eor	r1, r1
    18e6:	2f 93       	push	r18
    18e8:	3f 93       	push	r19
    18ea:	4f 93       	push	r20
    18ec:	5f 93       	push	r21
    18ee:	6f 93       	push	r22
    18f0:	7f 93       	push	r23
    18f2:	8f 93       	push	r24
    18f4:	9f 93       	push	r25
    18f6:	af 93       	push	r26
    18f8:	bf 93       	push	r27
    18fa:	ef 93       	push	r30
    18fc:	ff 93       	push	r31
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfExti[EXTI_u8_INT1] != NULL){
    1906:	80 91 76 01 	lds	r24, 0x0176
    190a:	90 91 77 01 	lds	r25, 0x0177
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	29 f0       	breq	.+10     	; 0x191c <__vector_2+0x40>
		EXTI_ApfExti[EXTI_u8_INT1]();
    1912:	e0 91 76 01 	lds	r30, 0x0176
    1916:	f0 91 77 01 	lds	r31, 0x0177
    191a:	09 95       	icall
	}
}
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	ff 91       	pop	r31
    1922:	ef 91       	pop	r30
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	7f 91       	pop	r23
    192e:	6f 91       	pop	r22
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <__vector_3>:

/* Prototype for ISR of EXTI2 */
void __vector_3(void)			__attribute__((signal));
void __vector_3(void){
    1942:	1f 92       	push	r1
    1944:	0f 92       	push	r0
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	0f 92       	push	r0
    194a:	11 24       	eor	r1, r1
    194c:	2f 93       	push	r18
    194e:	3f 93       	push	r19
    1950:	4f 93       	push	r20
    1952:	5f 93       	push	r21
    1954:	6f 93       	push	r22
    1956:	7f 93       	push	r23
    1958:	8f 93       	push	r24
    195a:	9f 93       	push	r25
    195c:	af 93       	push	r26
    195e:	bf 93       	push	r27
    1960:	ef 93       	push	r30
    1962:	ff 93       	push	r31
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfExti[EXTI_u8_INT2] != NULL){
    196c:	80 91 78 01 	lds	r24, 0x0178
    1970:	90 91 79 01 	lds	r25, 0x0179
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	29 f0       	breq	.+10     	; 0x1982 <__vector_3+0x40>
		EXTI_ApfExti[EXTI_u8_INT2]();
    1978:	e0 91 78 01 	lds	r30, 0x0178
    197c:	f0 91 79 01 	lds	r31, 0x0179
    1980:	09 95       	icall
	}
}
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	ff 91       	pop	r31
    1988:	ef 91       	pop	r30
    198a:	bf 91       	pop	r27
    198c:	af 91       	pop	r26
    198e:	9f 91       	pop	r25
    1990:	8f 91       	pop	r24
    1992:	7f 91       	pop	r23
    1994:	6f 91       	pop	r22
    1996:	5f 91       	pop	r21
    1998:	4f 91       	pop	r20
    199a:	3f 91       	pop	r19
    199c:	2f 91       	pop	r18
    199e:	0f 90       	pop	r0
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	0f 90       	pop	r0
    19a4:	1f 90       	pop	r1
    19a6:	18 95       	reti

000019a8 <GI_voidEnable>:

#include "GI_interface.h"

#define SREG	*((volatile u8 *)0x5F)

void GI_voidEnable(void){
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    19b0:	af e5       	ldi	r26, 0x5F	; 95
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ef e5       	ldi	r30, 0x5F	; 95
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 68       	ori	r24, 0x80	; 128
    19bc:	8c 93       	st	X, r24
};
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <GI_voidDisable>:

void GI_voidDisable(void){
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    19cc:	af e5       	ldi	r26, 0x5F	; 95
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	ef e5       	ldi	r30, 0x5F	; 95
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	8f 77       	andi	r24, 0x7F	; 127
    19d8:	8c 93       	st	X, r24
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <LCD_voidInit>:
/***************************************************************************************/
/* Description! Apply initialization sequence for LCD module                           */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidInit(void) {
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	c4 55       	subi	r28, 0x54	; 84
    19ee:	d0 40       	sbci	r29, 0x00	; 0
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	fe 01       	movw	r30, r28
    19fc:	ef 5a       	subi	r30, 0xAF	; 175
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a0 ef       	ldi	r26, 0xF0	; 240
    1a06:	b1 e4       	ldi	r27, 0x41	; 65
    1a08:	80 83       	st	Z, r24
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	a2 83       	std	Z+2, r26	; 0x02
    1a0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a10:	8e 01       	movw	r16, r28
    1a12:	03 5b       	subi	r16, 0xB3	; 179
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	fe 01       	movw	r30, r28
    1a18:	ef 5a       	subi	r30, 0xAF	; 175
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	60 81       	ld	r22, Z
    1a1e:	71 81       	ldd	r23, Z+1	; 0x01
    1a20:	82 81       	ldd	r24, Z+2	; 0x02
    1a22:	93 81       	ldd	r25, Z+3	; 0x03
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	4a ef       	ldi	r20, 0xFA	; 250
    1a2a:	54 e4       	ldi	r21, 0x44	; 68
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	f8 01       	movw	r30, r16
    1a36:	80 83       	st	Z, r24
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	a2 83       	std	Z+2, r26	; 0x02
    1a3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e3 5b       	subi	r30, 0xB3	; 179
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e8       	ldi	r20, 0x80	; 128
    1a52:	5f e3       	ldi	r21, 0x3F	; 63
    1a54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a58:	88 23       	and	r24, r24
    1a5a:	44 f4       	brge	.+16     	; 0x1a6c <LCD_voidInit+0x8c>
		__ticks = 1;
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e5 5b       	subi	r30, 0xB5	; 181
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
    1a6a:	64 c0       	rjmp	.+200    	; 0x1b34 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e3 5b       	subi	r30, 0xB3	; 179
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	60 81       	ld	r22, Z
    1a74:	71 81       	ldd	r23, Z+1	; 0x01
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	93 81       	ldd	r25, Z+3	; 0x03
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	57 e4       	ldi	r21, 0x47	; 71
    1a82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	0c f0       	brlt	.+2      	; 0x1a8c <LCD_voidInit+0xac>
    1a8a:	43 c0       	rjmp	.+134    	; 0x1b12 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	ef 5a       	subi	r30, 0xAF	; 175
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e2       	ldi	r20, 0x20	; 32
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	8e 01       	movw	r16, r28
    1aac:	05 5b       	subi	r16, 0xB5	; 181
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	f8 01       	movw	r30, r16
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
    1ac2:	1f c0       	rjmp	.+62     	; 0x1b02 <LCD_voidInit+0x122>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e7 5b       	subi	r30, 0xB7	; 183
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	88 ec       	ldi	r24, 0xC8	; 200
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e7 5b       	subi	r30, 0xB7	; 183
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	80 81       	ld	r24, Z
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <LCD_voidInit+0xfc>
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e7 5b       	subi	r30, 0xB7	; 183
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aea:	de 01       	movw	r26, r28
    1aec:	a5 5b       	subi	r26, 0xB5	; 181
    1aee:	bf 4f       	sbci	r27, 0xFF	; 255
    1af0:	fe 01       	movw	r30, r28
    1af2:	e5 5b       	subi	r30, 0xB5	; 181
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	11 96       	adiw	r26, 0x01	; 1
    1afe:	9c 93       	st	X, r25
    1b00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b02:	fe 01       	movw	r30, r28
    1b04:	e5 5b       	subi	r30, 0xB5	; 181
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 81       	ld	r24, Z
    1b0a:	91 81       	ldd	r25, Z+1	; 0x01
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	d1 f6       	brne	.-76     	; 0x1ac4 <LCD_voidInit+0xe4>
    1b10:	27 c0       	rjmp	.+78     	; 0x1b60 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	8e 01       	movw	r16, r28
    1b14:	05 5b       	subi	r16, 0xB5	; 181
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	fe 01       	movw	r30, r28
    1b1a:	e3 5b       	subi	r30, 0xB3	; 179
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	f8 01       	movw	r30, r16
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
    1b34:	de 01       	movw	r26, r28
    1b36:	a9 5b       	subi	r26, 0xB9	; 185
    1b38:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e5 5b       	subi	r30, 0xB5	; 181
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 81       	ld	r24, Z
    1b42:	91 81       	ldd	r25, Z+1	; 0x01
    1b44:	8d 93       	st	X+, r24
    1b46:	9c 93       	st	X, r25
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e9 5b       	subi	r30, 0xB9	; 185
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	80 81       	ld	r24, Z
    1b50:	91 81       	ldd	r25, Z+1	; 0x01
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCD_voidInit+0x172>
    1b56:	fe 01       	movw	r30, r28
    1b58:	e9 5b       	subi	r30, 0xB9	; 185
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	80 83       	st	Z, r24
#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Return Home  */
	LCD_voidSendCmnd(lcd_Home);
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidSendCmnd>
    1b66:	fe 01       	movw	r30, r28
    1b68:	ed 5b       	subi	r30, 0xBD	; 189
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	a0 e7       	ldi	r26, 0x70	; 112
    1b72:	b1 e4       	ldi	r27, 0x41	; 65
    1b74:	80 83       	st	Z, r24
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	a2 83       	std	Z+2, r26	; 0x02
    1b7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7c:	8e 01       	movw	r16, r28
    1b7e:	01 5c       	subi	r16, 0xC1	; 193
    1b80:	1f 4f       	sbci	r17, 0xFF	; 255
    1b82:	fe 01       	movw	r30, r28
    1b84:	ed 5b       	subi	r30, 0xBD	; 189
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	60 81       	ld	r22, Z
    1b8a:	71 81       	ldd	r23, Z+1	; 0x01
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	93 81       	ldd	r25, Z+3	; 0x03
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	4a ef       	ldi	r20, 0xFA	; 250
    1b96:	54 e4       	ldi	r21, 0x44	; 68
    1b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	80 83       	st	Z, r24
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	a2 83       	std	Z+2, r26	; 0x02
    1ba8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1baa:	fe 01       	movw	r30, r28
    1bac:	ff 96       	adiw	r30, 0x3f	; 63
    1bae:	60 81       	ld	r22, Z
    1bb0:	71 81       	ldd	r23, Z+1	; 0x01
    1bb2:	82 81       	ldd	r24, Z+2	; 0x02
    1bb4:	93 81       	ldd	r25, Z+3	; 0x03
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <LCD_voidInit+0x1f0>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9e af       	std	Y+62, r25	; 0x3e
    1bcc:	8d af       	std	Y+61, r24	; 0x3d
    1bce:	46 c0       	rjmp	.+140    	; 0x1c5c <LCD_voidInit+0x27c>
	else if (__tmp > 65535)
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	ff 96       	adiw	r30, 0x3f	; 63
    1bd4:	60 81       	ld	r22, Z
    1bd6:	71 81       	ldd	r23, Z+1	; 0x01
    1bd8:	82 81       	ldd	r24, Z+2	; 0x02
    1bda:	93 81       	ldd	r25, Z+3	; 0x03
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	3f ef       	ldi	r19, 0xFF	; 255
    1be0:	4f e7       	ldi	r20, 0x7F	; 127
    1be2:	57 e4       	ldi	r21, 0x47	; 71
    1be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be8:	18 16       	cp	r1, r24
    1bea:	64 f5       	brge	.+88     	; 0x1c44 <LCD_voidInit+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bec:	fe 01       	movw	r30, r28
    1bee:	ed 5b       	subi	r30, 0xBD	; 189
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	60 81       	ld	r22, Z
    1bf4:	71 81       	ldd	r23, Z+1	; 0x01
    1bf6:	82 81       	ldd	r24, Z+2	; 0x02
    1bf8:	93 81       	ldd	r25, Z+3	; 0x03
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e2       	ldi	r20, 0x20	; 32
    1c00:	51 e4       	ldi	r21, 0x41	; 65
    1c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	9e af       	std	Y+62, r25	; 0x3e
    1c18:	8d af       	std	Y+61, r24	; 0x3d
    1c1a:	0f c0       	rjmp	.+30     	; 0x1c3a <LCD_voidInit+0x25a>
    1c1c:	88 ec       	ldi	r24, 0xC8	; 200
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9c af       	std	Y+60, r25	; 0x3c
    1c22:	8b af       	std	Y+59, r24	; 0x3b
    1c24:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c26:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <LCD_voidInit+0x248>
    1c2c:	9c af       	std	Y+60, r25	; 0x3c
    1c2e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c30:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c32:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	9e af       	std	Y+62, r25	; 0x3e
    1c38:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	69 f7       	brne	.-38     	; 0x1c1c <LCD_voidInit+0x23c>
    1c42:	16 c0       	rjmp	.+44     	; 0x1c70 <LCD_voidInit+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c44:	fe 01       	movw	r30, r28
    1c46:	ff 96       	adiw	r30, 0x3f	; 63
    1c48:	60 81       	ld	r22, Z
    1c4a:	71 81       	ldd	r23, Z+1	; 0x01
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	9e af       	std	Y+62, r25	; 0x3e
    1c5a:	8d af       	std	Y+61, r24	; 0x3d
    1c5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c60:	9a af       	std	Y+58, r25	; 0x3a
    1c62:	89 af       	std	Y+57, r24	; 0x39
    1c64:	89 ad       	ldd	r24, Y+57	; 0x39
    1c66:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <LCD_voidInit+0x288>
    1c6c:	9a af       	std	Y+58, r25	; 0x3a
    1c6e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	/* Function Set  */
	LCD_voidSendCmnd(lcd_FunctionSet4bit);
    1c70:	8f e2       	ldi	r24, 0x2F	; 47
    1c72:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidSendCmnd>
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a0 e8       	ldi	r26, 0x80	; 128
    1c7c:	bf e3       	ldi	r27, 0x3F	; 63
    1c7e:	8d ab       	std	Y+53, r24	; 0x35
    1c80:	9e ab       	std	Y+54, r25	; 0x36
    1c82:	af ab       	std	Y+55, r26	; 0x37
    1c84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c86:	6d a9       	ldd	r22, Y+53	; 0x35
    1c88:	7e a9       	ldd	r23, Y+54	; 0x36
    1c8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a ef       	ldi	r20, 0xFA	; 250
    1c94:	54 e4       	ldi	r21, 0x44	; 68
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	89 ab       	std	Y+49, r24	; 0x31
    1ca0:	9a ab       	std	Y+50, r25	; 0x32
    1ca2:	ab ab       	std	Y+51, r26	; 0x33
    1ca4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ca6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca8:	7a a9       	ldd	r23, Y+50	; 0x32
    1caa:	8b a9       	ldd	r24, Y+51	; 0x33
    1cac:	9c a9       	ldd	r25, Y+52	; 0x34
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e8       	ldi	r20, 0x80	; 128
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cba:	88 23       	and	r24, r24
    1cbc:	2c f4       	brge	.+10     	; 0x1cc8 <LCD_voidInit+0x2e8>
		__ticks = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	98 ab       	std	Y+48, r25	; 0x30
    1cc4:	8f a7       	std	Y+47, r24	; 0x2f
    1cc6:	3f c0       	rjmp	.+126    	; 0x1d46 <LCD_voidInit+0x366>
	else if (__tmp > 65535)
    1cc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cca:	7a a9       	ldd	r23, Y+50	; 0x32
    1ccc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cce:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	3f ef       	ldi	r19, 0xFF	; 255
    1cd4:	4f e7       	ldi	r20, 0x7F	; 127
    1cd6:	57 e4       	ldi	r21, 0x47	; 71
    1cd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	4c f5       	brge	.+82     	; 0x1d32 <LCD_voidInit+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ce2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ce4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ce6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e2       	ldi	r20, 0x20	; 32
    1cee:	51 e4       	ldi	r21, 0x41	; 65
    1cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	98 ab       	std	Y+48, r25	; 0x30
    1d06:	8f a7       	std	Y+47, r24	; 0x2f
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <LCD_voidInit+0x348>
    1d0a:	88 ec       	ldi	r24, 0xC8	; 200
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9e a7       	std	Y+46, r25	; 0x2e
    1d10:	8d a7       	std	Y+45, r24	; 0x2d
    1d12:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d14:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_voidInit+0x336>
    1d1a:	9e a7       	std	Y+46, r25	; 0x2e
    1d1c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d20:	98 a9       	ldd	r25, Y+48	; 0x30
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	98 ab       	std	Y+48, r25	; 0x30
    1d26:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	69 f7       	brne	.-38     	; 0x1d0a <LCD_voidInit+0x32a>
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <LCD_voidInit+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d32:	69 a9       	ldd	r22, Y+49	; 0x31
    1d34:	7a a9       	ldd	r23, Y+50	; 0x32
    1d36:	8b a9       	ldd	r24, Y+51	; 0x33
    1d38:	9c a9       	ldd	r25, Y+52	; 0x34
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	98 ab       	std	Y+48, r25	; 0x30
    1d44:	8f a7       	std	Y+47, r24	; 0x2f
    1d46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d48:	98 a9       	ldd	r25, Y+48	; 0x30
    1d4a:	9c a7       	std	Y+44, r25	; 0x2c
    1d4c:	8b a7       	std	Y+43, r24	; 0x2b
    1d4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d50:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <LCD_voidInit+0x372>
    1d56:	9c a7       	std	Y+44, r25	; 0x2c
    1d58:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Display ON OFF Control */
	LCD_voidSendCmnd(lcd_DisplayOn);
    1d5a:	8c e0       	ldi	r24, 0x0C	; 12
    1d5c:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidSendCmnd>
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a0 e8       	ldi	r26, 0x80	; 128
    1d66:	bf e3       	ldi	r27, 0x3F	; 63
    1d68:	8f a3       	std	Y+39, r24	; 0x27
    1d6a:	98 a7       	std	Y+40, r25	; 0x28
    1d6c:	a9 a7       	std	Y+41, r26	; 0x29
    1d6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d70:	6f a1       	ldd	r22, Y+39	; 0x27
    1d72:	78 a5       	ldd	r23, Y+40	; 0x28
    1d74:	89 a5       	ldd	r24, Y+41	; 0x29
    1d76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	4a ef       	ldi	r20, 0xFA	; 250
    1d7e:	54 e4       	ldi	r21, 0x44	; 68
    1d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	8b a3       	std	Y+35, r24	; 0x23
    1d8a:	9c a3       	std	Y+36, r25	; 0x24
    1d8c:	ad a3       	std	Y+37, r26	; 0x25
    1d8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d90:	6b a1       	ldd	r22, Y+35	; 0x23
    1d92:	7c a1       	ldd	r23, Y+36	; 0x24
    1d94:	8d a1       	ldd	r24, Y+37	; 0x25
    1d96:	9e a1       	ldd	r25, Y+38	; 0x26
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e8       	ldi	r20, 0x80	; 128
    1d9e:	5f e3       	ldi	r21, 0x3F	; 63
    1da0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da4:	88 23       	and	r24, r24
    1da6:	2c f4       	brge	.+10     	; 0x1db2 <LCD_voidInit+0x3d2>
		__ticks = 1;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	9a a3       	std	Y+34, r25	; 0x22
    1dae:	89 a3       	std	Y+33, r24	; 0x21
    1db0:	3f c0       	rjmp	.+126    	; 0x1e30 <LCD_voidInit+0x450>
	else if (__tmp > 65535)
    1db2:	6b a1       	ldd	r22, Y+35	; 0x23
    1db4:	7c a1       	ldd	r23, Y+36	; 0x24
    1db6:	8d a1       	ldd	r24, Y+37	; 0x25
    1db8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	3f ef       	ldi	r19, 0xFF	; 255
    1dbe:	4f e7       	ldi	r20, 0x7F	; 127
    1dc0:	57 e4       	ldi	r21, 0x47	; 71
    1dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc6:	18 16       	cp	r1, r24
    1dc8:	4c f5       	brge	.+82     	; 0x1e1c <LCD_voidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dca:	6f a1       	ldd	r22, Y+39	; 0x27
    1dcc:	78 a5       	ldd	r23, Y+40	; 0x28
    1dce:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e2       	ldi	r20, 0x20	; 32
    1dd8:	51 e4       	ldi	r21, 0x41	; 65
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9a a3       	std	Y+34, r25	; 0x22
    1df0:	89 a3       	std	Y+33, r24	; 0x21
    1df2:	0f c0       	rjmp	.+30     	; 0x1e12 <LCD_voidInit+0x432>
    1df4:	88 ec       	ldi	r24, 0xC8	; 200
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	98 a3       	std	Y+32, r25	; 0x20
    1dfa:	8f 8f       	std	Y+31, r24	; 0x1f
    1dfc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dfe:	98 a1       	ldd	r25, Y+32	; 0x20
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <LCD_voidInit+0x420>
    1e04:	98 a3       	std	Y+32, r25	; 0x20
    1e06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e08:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	9a a3       	std	Y+34, r25	; 0x22
    1e10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e12:	89 a1       	ldd	r24, Y+33	; 0x21
    1e14:	9a a1       	ldd	r25, Y+34	; 0x22
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	69 f7       	brne	.-38     	; 0x1df4 <LCD_voidInit+0x414>
    1e1a:	14 c0       	rjmp	.+40     	; 0x1e44 <LCD_voidInit+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e20:	8d a1       	ldd	r24, Y+37	; 0x25
    1e22:	9e a1       	ldd	r25, Y+38	; 0x26
    1e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	9a a3       	std	Y+34, r25	; 0x22
    1e2e:	89 a3       	std	Y+33, r24	; 0x21
    1e30:	89 a1       	ldd	r24, Y+33	; 0x21
    1e32:	9a a1       	ldd	r25, Y+34	; 0x22
    1e34:	9e 8f       	std	Y+30, r25	; 0x1e
    1e36:	8d 8f       	std	Y+29, r24	; 0x1d
    1e38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <LCD_voidInit+0x45c>
    1e40:	9e 8f       	std	Y+30, r25	; 0x1e
    1e42:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display */
	LCD_voidSendCmnd(lcd_Clear);
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidSendCmnd>
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a0 e7       	ldi	r26, 0x70	; 112
    1e50:	b1 e4       	ldi	r27, 0x41	; 65
    1e52:	89 8f       	std	Y+25, r24	; 0x19
    1e54:	9a 8f       	std	Y+26, r25	; 0x1a
    1e56:	ab 8f       	std	Y+27, r26	; 0x1b
    1e58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	4a ef       	ldi	r20, 0xFA	; 250
    1e68:	54 e4       	ldi	r21, 0x44	; 68
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	8d 8b       	std	Y+21, r24	; 0x15
    1e74:	9e 8b       	std	Y+22, r25	; 0x16
    1e76:	af 8b       	std	Y+23, r26	; 0x17
    1e78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e80:	98 8d       	ldd	r25, Y+24	; 0x18
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e8       	ldi	r20, 0x80	; 128
    1e88:	5f e3       	ldi	r21, 0x3F	; 63
    1e8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e8e:	88 23       	and	r24, r24
    1e90:	2c f4       	brge	.+10     	; 0x1e9c <LCD_voidInit+0x4bc>
		__ticks = 1;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	9c 8b       	std	Y+20, r25	; 0x14
    1e98:	8b 8b       	std	Y+19, r24	; 0x13
    1e9a:	3f c0       	rjmp	.+126    	; 0x1f1a <LCD_voidInit+0x53a>
	else if (__tmp > 65535)
    1e9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	3f ef       	ldi	r19, 0xFF	; 255
    1ea8:	4f e7       	ldi	r20, 0x7F	; 127
    1eaa:	57 e4       	ldi	r21, 0x47	; 71
    1eac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb0:	18 16       	cp	r1, r24
    1eb2:	4c f5       	brge	.+82     	; 0x1f06 <LCD_voidInit+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb4:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e2       	ldi	r20, 0x20	; 32
    1ec2:	51 e4       	ldi	r21, 0x41	; 65
    1ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	bc 01       	movw	r22, r24
    1ece:	cd 01       	movw	r24, r26
    1ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	9c 8b       	std	Y+20, r25	; 0x14
    1eda:	8b 8b       	std	Y+19, r24	; 0x13
    1edc:	0f c0       	rjmp	.+30     	; 0x1efc <LCD_voidInit+0x51c>
    1ede:	88 ec       	ldi	r24, 0xC8	; 200
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9a 8b       	std	Y+18, r25	; 0x12
    1ee4:	89 8b       	std	Y+17, r24	; 0x11
    1ee6:	89 89       	ldd	r24, Y+17	; 0x11
    1ee8:	9a 89       	ldd	r25, Y+18	; 0x12
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <LCD_voidInit+0x50a>
    1eee:	9a 8b       	std	Y+18, r25	; 0x12
    1ef0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	9c 8b       	std	Y+20, r25	; 0x14
    1efa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efc:	8b 89       	ldd	r24, Y+19	; 0x13
    1efe:	9c 89       	ldd	r25, Y+20	; 0x14
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	69 f7       	brne	.-38     	; 0x1ede <LCD_voidInit+0x4fe>
    1f04:	14 c0       	rjmp	.+40     	; 0x1f2e <LCD_voidInit+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f06:	6d 89       	ldd	r22, Y+21	; 0x15
    1f08:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	9c 8b       	std	Y+20, r25	; 0x14
    1f18:	8b 8b       	std	Y+19, r24	; 0x13
    1f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1e:	98 8b       	std	Y+16, r25	; 0x10
    1f20:	8f 87       	std	Y+15, r24	; 0x0f
    1f22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f24:	98 89       	ldd	r25, Y+16	; 0x10
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <LCD_voidInit+0x546>
    1f2a:	98 8b       	std	Y+16, r25	; 0x10
    1f2c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);

	/* Entry Mode Set  */
	LCD_voidSendCmnd(lcd_EntryMode);
    1f2e:	86 e0       	ldi	r24, 0x06	; 6
    1f30:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidSendCmnd>
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	a0 e0       	ldi	r26, 0x00	; 0
    1f3a:	b0 e4       	ldi	r27, 0x40	; 64
    1f3c:	8b 87       	std	Y+11, r24	; 0x0b
    1f3e:	9c 87       	std	Y+12, r25	; 0x0c
    1f40:	ad 87       	std	Y+13, r26	; 0x0d
    1f42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	4a ef       	ldi	r20, 0xFA	; 250
    1f52:	54 e4       	ldi	r21, 0x44	; 68
    1f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	8f 83       	std	Y+7, r24	; 0x07
    1f5e:	98 87       	std	Y+8, r25	; 0x08
    1f60:	a9 87       	std	Y+9, r26	; 0x09
    1f62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f64:	6f 81       	ldd	r22, Y+7	; 0x07
    1f66:	78 85       	ldd	r23, Y+8	; 0x08
    1f68:	89 85       	ldd	r24, Y+9	; 0x09
    1f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e8       	ldi	r20, 0x80	; 128
    1f72:	5f e3       	ldi	r21, 0x3F	; 63
    1f74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f78:	88 23       	and	r24, r24
    1f7a:	2c f4       	brge	.+10     	; 0x1f86 <LCD_voidInit+0x5a6>
		__ticks = 1;
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	9e 83       	std	Y+6, r25	; 0x06
    1f82:	8d 83       	std	Y+5, r24	; 0x05
    1f84:	3f c0       	rjmp	.+126    	; 0x2004 <LCD_voidInit+0x624>
	else if (__tmp > 65535)
    1f86:	6f 81       	ldd	r22, Y+7	; 0x07
    1f88:	78 85       	ldd	r23, Y+8	; 0x08
    1f8a:	89 85       	ldd	r24, Y+9	; 0x09
    1f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	3f ef       	ldi	r19, 0xFF	; 255
    1f92:	4f e7       	ldi	r20, 0x7F	; 127
    1f94:	57 e4       	ldi	r21, 0x47	; 71
    1f96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f9a:	18 16       	cp	r1, r24
    1f9c:	4c f5       	brge	.+82     	; 0x1ff0 <LCD_voidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e2       	ldi	r20, 0x20	; 32
    1fac:	51 e4       	ldi	r21, 0x41	; 65
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
    1fc6:	0f c0       	rjmp	.+30     	; 0x1fe6 <LCD_voidInit+0x606>
    1fc8:	88 ec       	ldi	r24, 0xC8	; 200
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	9c 83       	std	Y+4, r25	; 0x04
    1fce:	8b 83       	std	Y+3, r24	; 0x03
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <LCD_voidInit+0x5f4>
    1fd8:	9c 83       	std	Y+4, r25	; 0x04
    1fda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fde:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	9e 83       	std	Y+6, r25	; 0x06
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	69 f7       	brne	.-38     	; 0x1fc8 <LCD_voidInit+0x5e8>
    1fee:	14 c0       	rjmp	.+40     	; 0x2018 <LCD_voidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff2:	78 85       	ldd	r23, Y+8	; 0x08
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	9e 83       	std	Y+6, r25	; 0x06
    2002:	8d 83       	std	Y+5, r24	; 0x05
    2004:	8d 81       	ldd	r24, Y+5	; 0x05
    2006:	9e 81       	ldd	r25, Y+6	; 0x06
    2008:	9a 83       	std	Y+2, r25	; 0x02
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <LCD_voidInit+0x630>
    2014:	9a 83       	std	Y+2, r25	; 0x02
    2016:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    2018:	cc 5a       	subi	r28, 0xAC	; 172
    201a:	df 4f       	sbci	r29, 0xFF	; 255
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	08 95       	ret

00002030 <LCD_voidSendCmnd>:
/***************************************************************************************/
/* Description! Interface to send the configuration commands to the LCD Driver         */
/* Input      ! Command number                                                         */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendCmnd(u8 Copy_u8Cmnd) {
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	6d 97       	sbiw	r28, 0x1d	; 29
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
    2044:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);

#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT

	/* Set RS to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RS_PIN, DIO_u8_LOW);
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>

	/* Set R/W to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>

	/* Load Command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd);
    205a:	83 e0       	ldi	r24, 0x03	; 3
    205c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    205e:	0e 94 21 0a 	call	0x1442	; 0x1442 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_HIGH  */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	62 e0       	ldi	r22, 0x02	; 2
    2066:	41 e0       	ldi	r20, 0x01	; 1
    2068:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e8       	ldi	r26, 0x80	; 128
    2072:	bf e3       	ldi	r27, 0x3F	; 63
    2074:	89 8f       	std	Y+25, r24	; 0x19
    2076:	9a 8f       	std	Y+26, r25	; 0x1a
    2078:	ab 8f       	std	Y+27, r26	; 0x1b
    207a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	69 8d       	ldd	r22, Y+25	; 0x19
    207e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a ef       	ldi	r20, 0xFA	; 250
    208a:	54 e4       	ldi	r21, 0x44	; 68
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8d 8b       	std	Y+21, r24	; 0x15
    2096:	9e 8b       	std	Y+22, r25	; 0x16
    2098:	af 8b       	std	Y+23, r26	; 0x17
    209a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    209c:	6d 89       	ldd	r22, Y+21	; 0x15
    209e:	7e 89       	ldd	r23, Y+22	; 0x16
    20a0:	8f 89       	ldd	r24, Y+23	; 0x17
    20a2:	98 8d       	ldd	r25, Y+24	; 0x18
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <LCD_voidSendCmnd+0x8e>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9c 8b       	std	Y+20, r25	; 0x14
    20ba:	8b 8b       	std	Y+19, r24	; 0x13
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <LCD_voidSendCmnd+0x10c>
	else if (__tmp > 65535)
    20be:	6d 89       	ldd	r22, Y+21	; 0x15
    20c0:	7e 89       	ldd	r23, Y+22	; 0x16
    20c2:	8f 89       	ldd	r24, Y+23	; 0x17
    20c4:	98 8d       	ldd	r25, Y+24	; 0x18
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <LCD_voidSendCmnd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	69 8d       	ldd	r22, Y+25	; 0x19
    20d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9c 8b       	std	Y+20, r25	; 0x14
    20fc:	8b 8b       	std	Y+19, r24	; 0x13
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <LCD_voidSendCmnd+0xee>
    2100:	88 ec       	ldi	r24, 0xC8	; 200
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9a 8b       	std	Y+18, r25	; 0x12
    2106:	89 8b       	std	Y+17, r24	; 0x11
    2108:	89 89       	ldd	r24, Y+17	; 0x11
    210a:	9a 89       	ldd	r25, Y+18	; 0x12
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_voidSendCmnd+0xdc>
    2110:	9a 8b       	std	Y+18, r25	; 0x12
    2112:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	8b 89       	ldd	r24, Y+19	; 0x13
    2116:	9c 89       	ldd	r25, Y+20	; 0x14
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9c 8b       	std	Y+20, r25	; 0x14
    211c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	8b 89       	ldd	r24, Y+19	; 0x13
    2120:	9c 89       	ldd	r25, Y+20	; 0x14
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <LCD_voidSendCmnd+0xd0>
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <LCD_voidSendCmnd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	6d 89       	ldd	r22, Y+21	; 0x15
    212a:	7e 89       	ldd	r23, Y+22	; 0x16
    212c:	8f 89       	ldd	r24, Y+23	; 0x17
    212e:	98 8d       	ldd	r25, Y+24	; 0x18
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9c 8b       	std	Y+20, r25	; 0x14
    213a:	8b 8b       	std	Y+19, r24	; 0x13
    213c:	8b 89       	ldd	r24, Y+19	; 0x13
    213e:	9c 89       	ldd	r25, Y+20	; 0x14
    2140:	98 8b       	std	Y+16, r25	; 0x10
    2142:	8f 87       	std	Y+15, r24	; 0x0f
    2144:	8f 85       	ldd	r24, Y+15	; 0x0f
    2146:	98 89       	ldd	r25, Y+16	; 0x10
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_voidSendCmnd+0x118>
    214c:	98 8b       	std	Y+16, r25	; 0x10
    214e:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(1);

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	62 e0       	ldi	r22, 0x02	; 2
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>

	/*write the rest of the command */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd << 4);
    215a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    215c:	98 2f       	mov	r25, r24
    215e:	92 95       	swap	r25
    2160:	90 7f       	andi	r25, 0xF0	; 240
    2162:	83 e0       	ldi	r24, 0x03	; 3
    2164:	69 2f       	mov	r22, r25
    2166:	0e 94 21 0a 	call	0x1442	; 0x1442 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_HIGH  */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	62 e0       	ldi	r22, 0x02	; 2
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	a0 e8       	ldi	r26, 0x80	; 128
    217a:	bf e3       	ldi	r27, 0x3F	; 63
    217c:	8b 87       	std	Y+11, r24	; 0x0b
    217e:	9c 87       	std	Y+12, r25	; 0x0c
    2180:	ad 87       	std	Y+13, r26	; 0x0d
    2182:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	6b 85       	ldd	r22, Y+11	; 0x0b
    2186:	7c 85       	ldd	r23, Y+12	; 0x0c
    2188:	8d 85       	ldd	r24, Y+13	; 0x0d
    218a:	9e 85       	ldd	r25, Y+14	; 0x0e
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	4a ef       	ldi	r20, 0xFA	; 250
    2192:	54 e4       	ldi	r21, 0x44	; 68
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	8f 83       	std	Y+7, r24	; 0x07
    219e:	98 87       	std	Y+8, r25	; 0x08
    21a0:	a9 87       	std	Y+9, r26	; 0x09
    21a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21a4:	6f 81       	ldd	r22, Y+7	; 0x07
    21a6:	78 85       	ldd	r23, Y+8	; 0x08
    21a8:	89 85       	ldd	r24, Y+9	; 0x09
    21aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <LCD_voidSendCmnd+0x196>
		__ticks = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	3f c0       	rjmp	.+126    	; 0x2244 <LCD_voidSendCmnd+0x214>
	else if (__tmp > 65535)
    21c6:	6f 81       	ldd	r22, Y+7	; 0x07
    21c8:	78 85       	ldd	r23, Y+8	; 0x08
    21ca:	89 85       	ldd	r24, Y+9	; 0x09
    21cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21da:	18 16       	cp	r1, r24
    21dc:	4c f5       	brge	.+82     	; 0x2230 <LCD_voidSendCmnd+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21de:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9e 83       	std	Y+6, r25	; 0x06
    2204:	8d 83       	std	Y+5, r24	; 0x05
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <LCD_voidSendCmnd+0x1f6>
    2208:	88 ec       	ldi	r24, 0xC8	; 200
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9c 83       	std	Y+4, r25	; 0x04
    220e:	8b 83       	std	Y+3, r24	; 0x03
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <LCD_voidSendCmnd+0x1e4>
    2218:	9c 83       	std	Y+4, r25	; 0x04
    221a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	9e 83       	std	Y+6, r25	; 0x06
    2224:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	8d 81       	ldd	r24, Y+5	; 0x05
    2228:	9e 81       	ldd	r25, Y+6	; 0x06
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	69 f7       	brne	.-38     	; 0x2208 <LCD_voidSendCmnd+0x1d8>
    222e:	14 c0       	rjmp	.+40     	; 0x2258 <LCD_voidSendCmnd+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2230:	6f 81       	ldd	r22, Y+7	; 0x07
    2232:	78 85       	ldd	r23, Y+8	; 0x08
    2234:	89 85       	ldd	r24, Y+9	; 0x09
    2236:	9a 85       	ldd	r25, Y+10	; 0x0a
    2238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	8d 81       	ldd	r24, Y+5	; 0x05
    2246:	9e 81       	ldd	r25, Y+6	; 0x06
    2248:	9a 83       	std	Y+2, r25	; 0x02
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	9a 81       	ldd	r25, Y+2	; 0x02
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LCD_voidSendCmnd+0x220>
    2254:	9a 83       	std	Y+2, r25	; 0x02
    2256:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for E to settle */
	_delay_ms(1);

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	62 e0       	ldi	r22, 0x02	; 2
    225c:	40 e0       	ldi	r20, 0x00	; 0
    225e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
#endif

}
    2262:	6d 96       	adiw	r28, 0x1d	; 29
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <LCD_voidSendChar>:
/***************************************************************************************/
/* Description! Interface to write character on LCD screen                             */
/* Input      ! Data to send                                                           */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendChar(u8 Copy_u8Data) {
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	ab 97       	sbiw	r28, 0x2b	; 43
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	8b a7       	std	Y+43, r24	; 0x2b
	/* Delay to let the LCD Display the character */
	_delay_ms(2);

#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	/* Set RS to HIG */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RS_PIN, DIO_u8_HIGH);
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	41 e0       	ldi	r20, 0x01	; 1
    2290:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>

	/* Set R/W to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	61 e0       	ldi	r22, 0x01	; 1
    2298:	40 e0       	ldi	r20, 0x00	; 0
    229a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	62 e0       	ldi	r22, 0x02	; 2
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>

	/* Load Command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Data);
    22a8:	83 e0       	ldi	r24, 0x03	; 3
    22aa:	6b a5       	ldd	r22, Y+43	; 0x2b
    22ac:	0e 94 21 0a 	call	0x1442	; 0x1442 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	62 e0       	ldi	r22, 0x02	; 2
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a0 e8       	ldi	r26, 0x80	; 128
    22c0:	bf e3       	ldi	r27, 0x3F	; 63
    22c2:	8f a3       	std	Y+39, r24	; 0x27
    22c4:	98 a7       	std	Y+40, r25	; 0x28
    22c6:	a9 a7       	std	Y+41, r26	; 0x29
    22c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ca:	6f a1       	ldd	r22, Y+39	; 0x27
    22cc:	78 a5       	ldd	r23, Y+40	; 0x28
    22ce:	89 a5       	ldd	r24, Y+41	; 0x29
    22d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4a ef       	ldi	r20, 0xFA	; 250
    22d8:	54 e4       	ldi	r21, 0x44	; 68
    22da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	8b a3       	std	Y+35, r24	; 0x23
    22e4:	9c a3       	std	Y+36, r25	; 0x24
    22e6:	ad a3       	std	Y+37, r26	; 0x25
    22e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22ea:	6b a1       	ldd	r22, Y+35	; 0x23
    22ec:	7c a1       	ldd	r23, Y+36	; 0x24
    22ee:	8d a1       	ldd	r24, Y+37	; 0x25
    22f0:	9e a1       	ldd	r25, Y+38	; 0x26
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	2c f4       	brge	.+10     	; 0x230c <LCD_voidSendChar+0x98>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9a a3       	std	Y+34, r25	; 0x22
    2308:	89 a3       	std	Y+33, r24	; 0x21
    230a:	3f c0       	rjmp	.+126    	; 0x238a <LCD_voidSendChar+0x116>
	else if (__tmp > 65535)
    230c:	6b a1       	ldd	r22, Y+35	; 0x23
    230e:	7c a1       	ldd	r23, Y+36	; 0x24
    2310:	8d a1       	ldd	r24, Y+37	; 0x25
    2312:	9e a1       	ldd	r25, Y+38	; 0x26
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	4c f5       	brge	.+82     	; 0x2376 <LCD_voidSendChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	6f a1       	ldd	r22, Y+39	; 0x27
    2326:	78 a5       	ldd	r23, Y+40	; 0x28
    2328:	89 a5       	ldd	r24, Y+41	; 0x29
    232a:	9a a5       	ldd	r25, Y+42	; 0x2a
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9a a3       	std	Y+34, r25	; 0x22
    234a:	89 a3       	std	Y+33, r24	; 0x21
    234c:	0f c0       	rjmp	.+30     	; 0x236c <LCD_voidSendChar+0xf8>
    234e:	88 ec       	ldi	r24, 0xC8	; 200
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	98 a3       	std	Y+32, r25	; 0x20
    2354:	8f 8f       	std	Y+31, r24	; 0x1f
    2356:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2358:	98 a1       	ldd	r25, Y+32	; 0x20
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <LCD_voidSendChar+0xe6>
    235e:	98 a3       	std	Y+32, r25	; 0x20
    2360:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	89 a1       	ldd	r24, Y+33	; 0x21
    2364:	9a a1       	ldd	r25, Y+34	; 0x22
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9a a3       	std	Y+34, r25	; 0x22
    236a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	89 a1       	ldd	r24, Y+33	; 0x21
    236e:	9a a1       	ldd	r25, Y+34	; 0x22
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <LCD_voidSendChar+0xda>
    2374:	14 c0       	rjmp	.+40     	; 0x239e <LCD_voidSendChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	6b a1       	ldd	r22, Y+35	; 0x23
    2378:	7c a1       	ldd	r23, Y+36	; 0x24
    237a:	8d a1       	ldd	r24, Y+37	; 0x25
    237c:	9e a1       	ldd	r25, Y+38	; 0x26
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9a a3       	std	Y+34, r25	; 0x22
    2388:	89 a3       	std	Y+33, r24	; 0x21
    238a:	89 a1       	ldd	r24, Y+33	; 0x21
    238c:	9a a1       	ldd	r25, Y+34	; 0x22
    238e:	9e 8f       	std	Y+30, r25	; 0x1e
    2390:	8d 8f       	std	Y+29, r24	; 0x1d
    2392:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2394:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LCD_voidSendChar+0x122>
    239a:	9e 8f       	std	Y+30, r25	; 0x1e
    239c:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Wait for E to settle */
	_delay_ms(1);

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	62 e0       	ldi	r22, 0x02	; 2
    23a2:	41 e0       	ldi	r20, 0x01	; 1
    23a4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>

	/*Load the rest of the command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Data << 4);
    23a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    23aa:	98 2f       	mov	r25, r24
    23ac:	92 95       	swap	r25
    23ae:	90 7f       	andi	r25, 0xF0	; 240
    23b0:	83 e0       	ldi	r24, 0x03	; 3
    23b2:	69 2f       	mov	r22, r25
    23b4:	0e 94 21 0a 	call	0x1442	; 0x1442 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	62 e0       	ldi	r22, 0x02	; 2
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	a0 e8       	ldi	r26, 0x80	; 128
    23c8:	bf e3       	ldi	r27, 0x3F	; 63
    23ca:	89 8f       	std	Y+25, r24	; 0x19
    23cc:	9a 8f       	std	Y+26, r25	; 0x1a
    23ce:	ab 8f       	std	Y+27, r26	; 0x1b
    23d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d2:	69 8d       	ldd	r22, Y+25	; 0x19
    23d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	4a ef       	ldi	r20, 0xFA	; 250
    23e0:	54 e4       	ldi	r21, 0x44	; 68
    23e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	8d 8b       	std	Y+21, r24	; 0x15
    23ec:	9e 8b       	std	Y+22, r25	; 0x16
    23ee:	af 8b       	std	Y+23, r26	; 0x17
    23f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23f2:	6d 89       	ldd	r22, Y+21	; 0x15
    23f4:	7e 89       	ldd	r23, Y+22	; 0x16
    23f6:	8f 89       	ldd	r24, Y+23	; 0x17
    23f8:	98 8d       	ldd	r25, Y+24	; 0x18
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e8       	ldi	r20, 0x80	; 128
    2400:	5f e3       	ldi	r21, 0x3F	; 63
    2402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2406:	88 23       	and	r24, r24
    2408:	2c f4       	brge	.+10     	; 0x2414 <LCD_voidSendChar+0x1a0>
		__ticks = 1;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9c 8b       	std	Y+20, r25	; 0x14
    2410:	8b 8b       	std	Y+19, r24	; 0x13
    2412:	3f c0       	rjmp	.+126    	; 0x2492 <LCD_voidSendChar+0x21e>
	else if (__tmp > 65535)
    2414:	6d 89       	ldd	r22, Y+21	; 0x15
    2416:	7e 89       	ldd	r23, Y+22	; 0x16
    2418:	8f 89       	ldd	r24, Y+23	; 0x17
    241a:	98 8d       	ldd	r25, Y+24	; 0x18
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	3f ef       	ldi	r19, 0xFF	; 255
    2420:	4f e7       	ldi	r20, 0x7F	; 127
    2422:	57 e4       	ldi	r21, 0x47	; 71
    2424:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2428:	18 16       	cp	r1, r24
    242a:	4c f5       	brge	.+82     	; 0x247e <LCD_voidSendChar+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242c:	69 8d       	ldd	r22, Y+25	; 0x19
    242e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e2       	ldi	r20, 0x20	; 32
    243a:	51 e4       	ldi	r21, 0x41	; 65
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9c 8b       	std	Y+20, r25	; 0x14
    2452:	8b 8b       	std	Y+19, r24	; 0x13
    2454:	0f c0       	rjmp	.+30     	; 0x2474 <LCD_voidSendChar+0x200>
    2456:	88 ec       	ldi	r24, 0xC8	; 200
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9a 8b       	std	Y+18, r25	; 0x12
    245c:	89 8b       	std	Y+17, r24	; 0x11
    245e:	89 89       	ldd	r24, Y+17	; 0x11
    2460:	9a 89       	ldd	r25, Y+18	; 0x12
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <LCD_voidSendChar+0x1ee>
    2466:	9a 8b       	std	Y+18, r25	; 0x12
    2468:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246a:	8b 89       	ldd	r24, Y+19	; 0x13
    246c:	9c 89       	ldd	r25, Y+20	; 0x14
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	9c 8b       	std	Y+20, r25	; 0x14
    2472:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2474:	8b 89       	ldd	r24, Y+19	; 0x13
    2476:	9c 89       	ldd	r25, Y+20	; 0x14
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	69 f7       	brne	.-38     	; 0x2456 <LCD_voidSendChar+0x1e2>
    247c:	14 c0       	rjmp	.+40     	; 0x24a6 <LCD_voidSendChar+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247e:	6d 89       	ldd	r22, Y+21	; 0x15
    2480:	7e 89       	ldd	r23, Y+22	; 0x16
    2482:	8f 89       	ldd	r24, Y+23	; 0x17
    2484:	98 8d       	ldd	r25, Y+24	; 0x18
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9c 8b       	std	Y+20, r25	; 0x14
    2490:	8b 8b       	std	Y+19, r24	; 0x13
    2492:	8b 89       	ldd	r24, Y+19	; 0x13
    2494:	9c 89       	ldd	r25, Y+20	; 0x14
    2496:	98 8b       	std	Y+16, r25	; 0x10
    2498:	8f 87       	std	Y+15, r24	; 0x0f
    249a:	8f 85       	ldd	r24, Y+15	; 0x0f
    249c:	98 89       	ldd	r25, Y+16	; 0x10
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <LCD_voidSendChar+0x22a>
    24a2:	98 8b       	std	Y+16, r25	; 0x10
    24a4:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(1);

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	62 e0       	ldi	r22, 0x02	; 2
    24aa:	41 e0       	ldi	r20, 0x01	; 1
    24ac:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a0 e8       	ldi	r26, 0x80	; 128
    24b6:	bf e3       	ldi	r27, 0x3F	; 63
    24b8:	8b 87       	std	Y+11, r24	; 0x0b
    24ba:	9c 87       	std	Y+12, r25	; 0x0c
    24bc:	ad 87       	std	Y+13, r26	; 0x0d
    24be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	4a ef       	ldi	r20, 0xFA	; 250
    24ce:	54 e4       	ldi	r21, 0x44	; 68
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	8f 83       	std	Y+7, r24	; 0x07
    24da:	98 87       	std	Y+8, r25	; 0x08
    24dc:	a9 87       	std	Y+9, r26	; 0x09
    24de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24e0:	6f 81       	ldd	r22, Y+7	; 0x07
    24e2:	78 85       	ldd	r23, Y+8	; 0x08
    24e4:	89 85       	ldd	r24, Y+9	; 0x09
    24e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	2c f4       	brge	.+10     	; 0x2502 <LCD_voidSendChar+0x28e>
		__ticks = 1;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	3f c0       	rjmp	.+126    	; 0x2580 <LCD_voidSendChar+0x30c>
	else if (__tmp > 65535)
    2502:	6f 81       	ldd	r22, Y+7	; 0x07
    2504:	78 85       	ldd	r23, Y+8	; 0x08
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	3f ef       	ldi	r19, 0xFF	; 255
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	57 e4       	ldi	r21, 0x47	; 71
    2512:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	4c f5       	brge	.+82     	; 0x256c <LCD_voidSendChar+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251a:	6b 85       	ldd	r22, Y+11	; 0x0b
    251c:	7c 85       	ldd	r23, Y+12	; 0x0c
    251e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2520:	9e 85       	ldd	r25, Y+14	; 0x0e
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e2       	ldi	r20, 0x20	; 32
    2528:	51 e4       	ldi	r21, 0x41	; 65
    252a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	0f c0       	rjmp	.+30     	; 0x2562 <LCD_voidSendChar+0x2ee>
    2544:	88 ec       	ldi	r24, 0xC8	; 200
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9c 83       	std	Y+4, r25	; 0x04
    254a:	8b 83       	std	Y+3, r24	; 0x03
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <LCD_voidSendChar+0x2dc>
    2554:	9c 83       	std	Y+4, r25	; 0x04
    2556:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2558:	8d 81       	ldd	r24, Y+5	; 0x05
    255a:	9e 81       	ldd	r25, Y+6	; 0x06
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2562:	8d 81       	ldd	r24, Y+5	; 0x05
    2564:	9e 81       	ldd	r25, Y+6	; 0x06
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	69 f7       	brne	.-38     	; 0x2544 <LCD_voidSendChar+0x2d0>
    256a:	14 c0       	rjmp	.+40     	; 0x2594 <LCD_voidSendChar+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256c:	6f 81       	ldd	r22, Y+7	; 0x07
    256e:	78 85       	ldd	r23, Y+8	; 0x08
    2570:	89 85       	ldd	r24, Y+9	; 0x09
    2572:	9a 85       	ldd	r25, Y+10	; 0x0a
    2574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	9a 83       	std	Y+2, r25	; 0x02
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	9a 81       	ldd	r25, Y+2	; 0x02
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <LCD_voidSendChar+0x318>
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01
	/* Delay to let the LCD Display the character */
	_delay_ms(1);

#endif

}
    2594:	ab 96       	adiw	r28, 0x2b	; 43
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61
    25a0:	cf 91       	pop	r28
    25a2:	df 91       	pop	r29
    25a4:	08 95       	ret

000025a6 <LCD_voidSendString>:
/***************************************************************************************/
/* Description! Interface to write string on LCD screen                                */
/* Input      ! Pointer to the string                                                  */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendString(u8 *Copy_pu8String) {
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <LCD_voidSendString+0x6>
    25ac:	0f 92       	push	r0
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	9b 83       	std	Y+3, r25	; 0x03
    25b4:	8a 83       	std	Y+2, r24	; 0x02

	//	/* Local loop index */
	//	u8 u8Index = 0;
	u8 iteration = 0;
    25b6:	19 82       	std	Y+1, r1	; 0x01
	//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration = 0; Copy_pu8String[iteration] != '\0'; iteration++) {
    25b8:	19 82       	std	Y+1, r1	; 0x01
    25ba:	0e c0       	rjmp	.+28     	; 0x25d8 <LCD_voidSendString+0x32>
		/* Write Character on LCD */
		LCD_voidSendChar(Copy_pu8String[iteration]);
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	9b 81       	ldd	r25, Y+3	; 0x03
    25c6:	fc 01       	movw	r30, r24
    25c8:	e2 0f       	add	r30, r18
    25ca:	f3 1f       	adc	r31, r19
    25cc:	80 81       	ld	r24, Z
    25ce:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_voidSendChar>

	//	/* Local loop index */
	//	u8 u8Index = 0;
	u8 iteration = 0;
	//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration = 0; Copy_pu8String[iteration] != '\0'; iteration++) {
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	8f 5f       	subi	r24, 0xFF	; 255
    25d6:	89 83       	std	Y+1, r24	; 0x01
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	28 2f       	mov	r18, r24
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	9b 81       	ldd	r25, Y+3	; 0x03
    25e2:	fc 01       	movw	r30, r24
    25e4:	e2 0f       	add	r30, r18
    25e6:	f3 1f       	adc	r31, r19
    25e8:	80 81       	ld	r24, Z
    25ea:	88 23       	and	r24, r24
    25ec:	39 f7       	brne	.-50     	; 0x25bc <LCD_voidSendString+0x16>
		LCD_voidSendChar(Copy_pu8String[iteration]);

		//		/* Increment local loop index */
		//		u8Index++;
	}
}
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <LCD_voidSendIntger>:

void LCD_voidSendIntger(s32 Copy_s32Data) {
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	ac 97       	sbiw	r28, 0x2c	; 44
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	69 a7       	std	Y+41, r22	; 0x29
    2610:	7a a7       	std	Y+42, r23	; 0x2a
    2612:	8b a7       	std	Y+43, r24	; 0x2b
    2614:	9c a7       	std	Y+44, r25	; 0x2c
	u32 str[10];
	// Converts Int to String
	sprintf(str, "%ld", Copy_s32Data);
    2616:	ce 01       	movw	r24, r28
    2618:	01 96       	adiw	r24, 0x01	; 1
    261a:	2d b7       	in	r18, 0x3d	; 61
    261c:	3e b7       	in	r19, 0x3e	; 62
    261e:	28 50       	subi	r18, 0x08	; 8
    2620:	30 40       	sbci	r19, 0x00	; 0
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	3e bf       	out	0x3e, r19	; 62
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	2d bf       	out	0x3d, r18	; 61
    262c:	ed b7       	in	r30, 0x3d	; 61
    262e:	fe b7       	in	r31, 0x3e	; 62
    2630:	31 96       	adiw	r30, 0x01	; 1
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	80 83       	st	Z, r24
    2636:	80 e6       	ldi	r24, 0x60	; 96
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	93 83       	std	Z+3, r25	; 0x03
    263c:	82 83       	std	Z+2, r24	; 0x02
    263e:	89 a5       	ldd	r24, Y+41	; 0x29
    2640:	9a a5       	ldd	r25, Y+42	; 0x2a
    2642:	ab a5       	ldd	r26, Y+43	; 0x2b
    2644:	bc a5       	ldd	r27, Y+44	; 0x2c
    2646:	84 83       	std	Z+4, r24	; 0x04
    2648:	95 83       	std	Z+5, r25	; 0x05
    264a:	a6 83       	std	Z+6, r26	; 0x06
    264c:	b7 83       	std	Z+7, r27	; 0x07
    264e:	0e 94 d5 17 	call	0x2faa	; 0x2faa <sprintf>
    2652:	8d b7       	in	r24, 0x3d	; 61
    2654:	9e b7       	in	r25, 0x3e	; 62
    2656:	08 96       	adiw	r24, 0x08	; 8
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	f8 94       	cli
    265c:	9e bf       	out	0x3e, r25	; 62
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	8d bf       	out	0x3d, r24	; 61
	LCD_voidSendString(str);
    2662:	ce 01       	movw	r24, r28
    2664:	01 96       	adiw	r24, 0x01	; 1
    2666:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <LCD_voidSendString>
}
    266a:	ac 96       	adiw	r28, 0x2c	; 44
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <LCD_voidSendFloat>:

void LCD_voidSendFloat(f64 Copy_f32Data) {
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
    2684:	2c 97       	sbiw	r28, 0x0c	; 12
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	69 87       	std	Y+9, r22	; 0x09
    2692:	7a 87       	std	Y+10, r23	; 0x0a
    2694:	8b 87       	std	Y+11, r24	; 0x0b
    2696:	9c 87       	std	Y+12, r25	; 0x0c
	s32 int_part;
	f32 frac_part;
	// separate integer and fractional parts
	int_part = (s32) Copy_f32Data;
    2698:	69 85       	ldd	r22, Y+9	; 0x09
    269a:	7a 85       	ldd	r23, Y+10	; 0x0a
    269c:	8b 85       	ldd	r24, Y+11	; 0x0b
    269e:	9c 85       	ldd	r25, Y+12	; 0x0c
    26a0:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	8d 83       	std	Y+5, r24	; 0x05
    26aa:	9e 83       	std	Y+6, r25	; 0x06
    26ac:	af 83       	std	Y+7, r26	; 0x07
    26ae:	b8 87       	std	Y+8, r27	; 0x08
	frac_part = Copy_f32Data - int_part;
    26b0:	6d 81       	ldd	r22, Y+5	; 0x05
    26b2:	7e 81       	ldd	r23, Y+6	; 0x06
    26b4:	8f 81       	ldd	r24, Y+7	; 0x07
    26b6:	98 85       	ldd	r25, Y+8	; 0x08
    26b8:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    26bc:	9b 01       	movw	r18, r22
    26be:	ac 01       	movw	r20, r24
    26c0:	69 85       	ldd	r22, Y+9	; 0x09
    26c2:	7a 85       	ldd	r23, Y+10	; 0x0a
    26c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    26c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    26c8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	89 83       	std	Y+1, r24	; 0x01
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	ab 83       	std	Y+3, r26	; 0x03
    26d6:	bc 83       	std	Y+4, r27	; 0x04
	frac_part = (s32) (frac_part * 1000);
    26d8:	69 81       	ldd	r22, Y+1	; 0x01
    26da:	7a 81       	ldd	r23, Y+2	; 0x02
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	9c 81       	ldd	r25, Y+4	; 0x04
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	4a e7       	ldi	r20, 0x7A	; 122
    26e6:	54 e4       	ldi	r21, 0x44	; 68
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	9a 83       	std	Y+2, r25	; 0x02
    270c:	ab 83       	std	Y+3, r26	; 0x03
    270e:	bc 83       	std	Y+4, r27	; 0x04
	LCD_voidSendIntger(int_part);
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
    2712:	9e 81       	ldd	r25, Y+6	; 0x06
    2714:	af 81       	ldd	r26, Y+7	; 0x07
    2716:	b8 85       	ldd	r27, Y+8	; 0x08
    2718:	bc 01       	movw	r22, r24
    271a:	cd 01       	movw	r24, r26
    271c:	0e 94 fd 12 	call	0x25fa	; 0x25fa <LCD_voidSendIntger>
	LCD_voidSendChar('.');
    2720:	8e e2       	ldi	r24, 0x2E	; 46
    2722:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_voidSendChar>
	LCD_voidSendIntger(frac_part);
    2726:	69 81       	ldd	r22, Y+1	; 0x01
    2728:	7a 81       	ldd	r23, Y+2	; 0x02
    272a:	8b 81       	ldd	r24, Y+3	; 0x03
    272c:	9c 81       	ldd	r25, Y+4	; 0x04
    272e:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	bc 01       	movw	r22, r24
    2738:	cd 01       	movw	r24, r26
    273a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <LCD_voidSendIntger>
}
    273e:	2c 96       	adiw	r28, 0x0c	; 12
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <LCD_voidGotoxy>:
/***************************************************************************************/
/* Description! Interface to start the writing process at certain digit in the LCD     */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidGotoxy(u8 Copy_u8Y, u8 Copy_u8X) {
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	00 d0       	rcall	.+0      	; 0x2756 <LCD_voidGotoxy+0x6>
    2756:	00 d0       	rcall	.+0      	; 0x2758 <LCD_voidGotoxy+0x8>
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	89 83       	std	Y+1, r24	; 0x01
    275e:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8X > 0 && Copy_u8X <= 16) {
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	88 23       	and	r24, r24
    2764:	e1 f0       	breq	.+56     	; 0x279e <LCD_voidGotoxy+0x4e>
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	81 31       	cpi	r24, 0x11	; 17
    276a:	c8 f4       	brcc	.+50     	; 0x279e <LCD_voidGotoxy+0x4e>
		switch (Copy_u8Y) {
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	3c 83       	std	Y+4, r19	; 0x04
    2774:	2b 83       	std	Y+3, r18	; 0x03
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	9c 81       	ldd	r25, Y+4	; 0x04
    277a:	81 30       	cpi	r24, 0x01	; 1
    277c:	91 05       	cpc	r25, r1
    277e:	31 f0       	breq	.+12     	; 0x278c <LCD_voidGotoxy+0x3c>
    2780:	2b 81       	ldd	r18, Y+3	; 0x03
    2782:	3c 81       	ldd	r19, Y+4	; 0x04
    2784:	22 30       	cpi	r18, 0x02	; 2
    2786:	31 05       	cpc	r19, r1
    2788:	31 f0       	breq	.+12     	; 0x2796 <LCD_voidGotoxy+0x46>
    278a:	09 c0       	rjmp	.+18     	; 0x279e <LCD_voidGotoxy+0x4e>
		case 1:
			LCD_voidSendCmnd(Copy_u8X + 127);
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	81 58       	subi	r24, 0x81	; 129
    2790:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidSendCmnd>
    2794:	04 c0       	rjmp	.+8      	; 0x279e <LCD_voidGotoxy+0x4e>
			break;
		case 2:
			LCD_voidSendCmnd(Copy_u8X + 191);
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	81 54       	subi	r24, 0x41	; 65
    279a:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidSendCmnd>
			break;
		default:
			break;
		}
	}
}
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	08 95       	ret

000027ac <LCD_voidSendExtraChar>:
/***************************************************************************************/
/* Description! Interface to write extra characters saved in the CGRAM                 */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendExtraChar(u8 Copy_u8Y, u8 Copy_u8X) {
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	62 97       	sbiw	r28, 0x12	; 18
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	89 8b       	std	Y+17, r24	; 0x11
    27c2:	6a 8b       	std	Y+18, r22	; 0x12
	u8 iteration1, iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCmnd(64);
    27c4:	80 e4       	ldi	r24, 0x40	; 64
    27c6:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidSendCmnd>
	for (iteration1 = 0; iteration1 < 64; iteration1++) {
    27ca:	18 8a       	std	Y+16, r1	; 0x10
    27cc:	0c c0       	rjmp	.+24     	; 0x27e6 <LCD_voidSendExtraChar+0x3a>
		LCD_voidSendChar(ExtraChar[iteration1]);
    27ce:	88 89       	ldd	r24, Y+16	; 0x10
    27d0:	88 2f       	mov	r24, r24
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	fc 01       	movw	r30, r24
    27d6:	e4 59       	subi	r30, 0x94	; 148
    27d8:	fe 4f       	sbci	r31, 0xFE	; 254
    27da:	80 81       	ld	r24, Z
    27dc:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_voidSendChar>
void LCD_voidSendExtraChar(u8 Copy_u8Y, u8 Copy_u8X) {
	u8 iteration1, iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCmnd(64);
	for (iteration1 = 0; iteration1 < 64; iteration1++) {
    27e0:	88 89       	ldd	r24, Y+16	; 0x10
    27e2:	8f 5f       	subi	r24, 0xFF	; 255
    27e4:	88 8b       	std	Y+16, r24	; 0x10
    27e6:	88 89       	ldd	r24, Y+16	; 0x10
    27e8:	80 34       	cpi	r24, 0x40	; 64
    27ea:	88 f3       	brcs	.-30     	; 0x27ce <LCD_voidSendExtraChar+0x22>
		LCD_voidSendChar(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_voidSendCmnd(128);
    27ec:	80 e8       	ldi	r24, 0x80	; 128
    27ee:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidSendCmnd>
	LCD_voidGotoxy(Copy_u8Y, Copy_u8X);
    27f2:	89 89       	ldd	r24, Y+17	; 0x11
    27f4:	6a 89       	ldd	r22, Y+18	; 0x12
    27f6:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_voidGotoxy>
	/*First eight character which saved at CGRAM*/
	for (iteration2 = 0; iteration2 <= 7; iteration2++) {
    27fa:	1f 86       	std	Y+15, r1	; 0x0f
    27fc:	78 c0       	rjmp	.+240    	; 0x28ee <LCD_voidSendExtraChar+0x142>
		/* Write bytes of DDRAM */
		LCD_voidSendChar(iteration2);
    27fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2800:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_voidSendChar>
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a0 ea       	ldi	r26, 0xA0	; 160
    280a:	b0 e4       	ldi	r27, 0x40	; 64
    280c:	8b 87       	std	Y+11, r24	; 0x0b
    280e:	9c 87       	std	Y+12, r25	; 0x0c
    2810:	ad 87       	std	Y+13, r26	; 0x0d
    2812:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2814:	6b 85       	ldd	r22, Y+11	; 0x0b
    2816:	7c 85       	ldd	r23, Y+12	; 0x0c
    2818:	8d 85       	ldd	r24, Y+13	; 0x0d
    281a:	9e 85       	ldd	r25, Y+14	; 0x0e
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	4a ef       	ldi	r20, 0xFA	; 250
    2822:	54 e4       	ldi	r21, 0x44	; 68
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	8f 83       	std	Y+7, r24	; 0x07
    282e:	98 87       	std	Y+8, r25	; 0x08
    2830:	a9 87       	std	Y+9, r26	; 0x09
    2832:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2834:	6f 81       	ldd	r22, Y+7	; 0x07
    2836:	78 85       	ldd	r23, Y+8	; 0x08
    2838:	89 85       	ldd	r24, Y+9	; 0x09
    283a:	9a 85       	ldd	r25, Y+10	; 0x0a
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2848:	88 23       	and	r24, r24
    284a:	2c f4       	brge	.+10     	; 0x2856 <LCD_voidSendExtraChar+0xaa>
		__ticks = 1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	9e 83       	std	Y+6, r25	; 0x06
    2852:	8d 83       	std	Y+5, r24	; 0x05
    2854:	3f c0       	rjmp	.+126    	; 0x28d4 <LCD_voidSendExtraChar+0x128>
	else if (__tmp > 65535)
    2856:	6f 81       	ldd	r22, Y+7	; 0x07
    2858:	78 85       	ldd	r23, Y+8	; 0x08
    285a:	89 85       	ldd	r24, Y+9	; 0x09
    285c:	9a 85       	ldd	r25, Y+10	; 0x0a
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	3f ef       	ldi	r19, 0xFF	; 255
    2862:	4f e7       	ldi	r20, 0x7F	; 127
    2864:	57 e4       	ldi	r21, 0x47	; 71
    2866:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    286a:	18 16       	cp	r1, r24
    286c:	4c f5       	brge	.+82     	; 0x28c0 <LCD_voidSendExtraChar+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2870:	7c 85       	ldd	r23, Y+12	; 0x0c
    2872:	8d 85       	ldd	r24, Y+13	; 0x0d
    2874:	9e 85       	ldd	r25, Y+14	; 0x0e
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e2       	ldi	r20, 0x20	; 32
    287c:	51 e4       	ldi	r21, 0x41	; 65
    287e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	9e 83       	std	Y+6, r25	; 0x06
    2894:	8d 83       	std	Y+5, r24	; 0x05
    2896:	0f c0       	rjmp	.+30     	; 0x28b6 <LCD_voidSendExtraChar+0x10a>
    2898:	88 ec       	ldi	r24, 0xC8	; 200
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	9c 83       	std	Y+4, r25	; 0x04
    289e:	8b 83       	std	Y+3, r24	; 0x03
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	9c 81       	ldd	r25, Y+4	; 0x04
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <LCD_voidSendExtraChar+0xf8>
    28a8:	9c 83       	std	Y+4, r25	; 0x04
    28aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ac:	8d 81       	ldd	r24, Y+5	; 0x05
    28ae:	9e 81       	ldd	r25, Y+6	; 0x06
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	9e 83       	std	Y+6, r25	; 0x06
    28b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b6:	8d 81       	ldd	r24, Y+5	; 0x05
    28b8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	69 f7       	brne	.-38     	; 0x2898 <LCD_voidSendExtraChar+0xec>
    28be:	14 c0       	rjmp	.+40     	; 0x28e8 <LCD_voidSendExtraChar+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c0:	6f 81       	ldd	r22, Y+7	; 0x07
    28c2:	78 85       	ldd	r23, Y+8	; 0x08
    28c4:	89 85       	ldd	r24, Y+9	; 0x09
    28c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	9e 81       	ldd	r25, Y+6	; 0x06
    28d8:	9a 83       	std	Y+2, r25	; 0x02
    28da:	89 83       	std	Y+1, r24	; 0x01
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	9a 81       	ldd	r25, Y+2	; 0x02
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <LCD_voidSendExtraChar+0x134>
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_voidSendCmnd(128);
	LCD_voidGotoxy(Copy_u8Y, Copy_u8X);
	/*First eight character which saved at CGRAM*/
	for (iteration2 = 0; iteration2 <= 7; iteration2++) {
    28e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ea:	8f 5f       	subi	r24, 0xFF	; 255
    28ec:	8f 87       	std	Y+15, r24	; 0x0f
    28ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f0:	88 30       	cpi	r24, 0x08	; 8
    28f2:	08 f4       	brcc	.+2      	; 0x28f6 <LCD_voidSendExtraChar+0x14a>
    28f4:	84 cf       	rjmp	.-248    	; 0x27fe <LCD_voidSendExtraChar+0x52>
		/* Write bytes of DDRAM */
		LCD_voidSendChar(iteration2);

		_delay_ms(5);
	}
}
    28f6:	62 96       	adiw	r28, 0x12	; 18
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <LCD_voidWriteSpecialCharacter>:

/*  New */
void LCD_voidWriteSpecialCharacter(u8 *Copy_pu8Pattern, u8 Copy_u8PatternNumber,
		u8 Copy_u8XPos, u8 Copy_u8YPos) {
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	27 97       	sbiw	r28, 0x07	; 7
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	de bf       	out	0x3e, r29	; 62
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	cd bf       	out	0x3d, r28	; 61
    291c:	9c 83       	std	Y+4, r25	; 0x04
    291e:	8b 83       	std	Y+3, r24	; 0x03
    2920:	6d 83       	std	Y+5, r22	; 0x05
    2922:	4e 83       	std	Y+6, r20	; 0x06
    2924:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address, Local_u8PatternCounter;

	/*1- Calculate the required address of CGRAM*/
	Local_u8Address = Copy_u8PatternNumber * 8;
    2926:	8d 81       	ldd	r24, Y+5	; 0x05
    2928:	88 2f       	mov	r24, r24
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	88 0f       	add	r24, r24
    292e:	99 1f       	adc	r25, r25
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	88 0f       	add	r24, r24
    2936:	99 1f       	adc	r25, r25
    2938:	8a 83       	std	Y+2, r24	; 0x02

	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	80 5c       	subi	r24, 0xC0	; 192
    293e:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_voidSendCmnd>

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
    2942:	19 82       	std	Y+1, r1	; 0x01
    2944:	0e c0       	rjmp	.+28     	; 0x2962 <LCD_voidWriteSpecialCharacter+0x5a>
			Local_u8PatternCounter++) {
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8PatternCounter]);
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	9c 81       	ldd	r25, Y+4	; 0x04
    2950:	fc 01       	movw	r30, r24
    2952:	e2 0f       	add	r30, r18
    2954:	f3 1f       	adc	r31, r19
    2956:	80 81       	ld	r24, Z
    2958:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_voidSendChar>
	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
			Local_u8PatternCounter++) {
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	8f 5f       	subi	r24, 0xFF	; 255
    2960:	89 83       	std	Y+1, r24	; 0x01

	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	88 30       	cpi	r24, 0x08	; 8
    2966:	78 f3       	brcs	.-34     	; 0x2946 <LCD_voidWriteSpecialCharacter+0x3e>
			Local_u8PatternCounter++) {
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8PatternCounter]);
	}

	/*4- shift the address counter to the DDRAM*/
	LCD_voidGotoxy(Copy_u8XPos, Copy_u8YPos);
    2968:	8e 81       	ldd	r24, Y+6	; 0x06
    296a:	6f 81       	ldd	r22, Y+7	; 0x07
    296c:	0e 94 a8 13 	call	0x2750	; 0x2750 <LCD_voidGotoxy>

	/*5- Display the CGRAM pattern on the LCD*/
	LCD_voidSendChar(Copy_u8PatternNumber);
    2970:	8d 81       	ldd	r24, Y+5	; 0x05
    2972:	0e 94 3a 11 	call	0x2274	; 0x2274 <LCD_voidSendChar>

}
    2976:	27 96       	adiw	r28, 0x07	; 7
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <delay_ms>:

/* HAL */
#include "LCD_interface.h"

/* delay function */
void delay_ms(uint16_t milliseconds) {
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	61 97       	sbiw	r28, 0x11	; 17
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	98 8b       	std	Y+16, r25	; 0x10
    299e:	8f 87       	std	Y+15, r24	; 0x0f
    29a0:	72 c0       	rjmp	.+228    	; 0x2a86 <delay_ms+0xfe>
	while (milliseconds--) {
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	a0 e8       	ldi	r26, 0x80	; 128
    29a8:	bf e3       	ldi	r27, 0x3F	; 63
    29aa:	8b 87       	std	Y+11, r24	; 0x0b
    29ac:	9c 87       	std	Y+12, r25	; 0x0c
    29ae:	ad 87       	std	Y+13, r26	; 0x0d
    29b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	4a ef       	ldi	r20, 0xFA	; 250
    29c0:	54 e4       	ldi	r21, 0x44	; 68
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	8f 83       	std	Y+7, r24	; 0x07
    29cc:	98 87       	std	Y+8, r25	; 0x08
    29ce:	a9 87       	std	Y+9, r26	; 0x09
    29d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29d2:	6f 81       	ldd	r22, Y+7	; 0x07
    29d4:	78 85       	ldd	r23, Y+8	; 0x08
    29d6:	89 85       	ldd	r24, Y+9	; 0x09
    29d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 e8       	ldi	r20, 0x80	; 128
    29e0:	5f e3       	ldi	r21, 0x3F	; 63
    29e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e6:	88 23       	and	r24, r24
    29e8:	2c f4       	brge	.+10     	; 0x29f4 <delay_ms+0x6c>
		__ticks = 1;
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	9e 83       	std	Y+6, r25	; 0x06
    29f0:	8d 83       	std	Y+5, r24	; 0x05
    29f2:	3f c0       	rjmp	.+126    	; 0x2a72 <delay_ms+0xea>
	else if (__tmp > 65535)
    29f4:	6f 81       	ldd	r22, Y+7	; 0x07
    29f6:	78 85       	ldd	r23, Y+8	; 0x08
    29f8:	89 85       	ldd	r24, Y+9	; 0x09
    29fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	3f ef       	ldi	r19, 0xFF	; 255
    2a00:	4f e7       	ldi	r20, 0x7F	; 127
    2a02:	57 e4       	ldi	r21, 0x47	; 71
    2a04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a08:	18 16       	cp	r1, r24
    2a0a:	4c f5       	brge	.+82     	; 0x2a5e <delay_ms+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e2       	ldi	r20, 0x20	; 32
    2a1a:	51 e4       	ldi	r21, 0x41	; 65
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
    2a34:	0f c0       	rjmp	.+30     	; 0x2a54 <delay_ms+0xcc>
    2a36:	88 ec       	ldi	r24, 0xC8	; 200
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	9c 83       	std	Y+4, r25	; 0x04
    2a3c:	8b 83       	std	Y+3, r24	; 0x03
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	9c 81       	ldd	r25, Y+4	; 0x04
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	f1 f7       	brne	.-4      	; 0x2a42 <delay_ms+0xba>
    2a46:	9c 83       	std	Y+4, r25	; 0x04
    2a48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	9e 83       	std	Y+6, r25	; 0x06
    2a52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a54:	8d 81       	ldd	r24, Y+5	; 0x05
    2a56:	9e 81       	ldd	r25, Y+6	; 0x06
    2a58:	00 97       	sbiw	r24, 0x00	; 0
    2a5a:	69 f7       	brne	.-38     	; 0x2a36 <delay_ms+0xae>
    2a5c:	14 c0       	rjmp	.+40     	; 0x2a86 <delay_ms+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a60:	78 85       	ldd	r23, Y+8	; 0x08
    2a62:	89 85       	ldd	r24, Y+9	; 0x09
    2a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9e 83       	std	Y+6, r25	; 0x06
    2a70:	8d 83       	std	Y+5, r24	; 0x05
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	9e 81       	ldd	r25, Y+6	; 0x06
    2a76:	9a 83       	std	Y+2, r25	; 0x02
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <delay_ms+0xf6>
    2a82:	9a 83       	std	Y+2, r25	; 0x02
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	19 8a       	std	Y+17, r1	; 0x11
    2a88:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a8a:	98 89       	ldd	r25, Y+16	; 0x10
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	11 f0       	breq	.+4      	; 0x2a94 <delay_ms+0x10c>
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	89 8b       	std	Y+17, r24	; 0x11
    2a94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a96:	98 89       	ldd	r25, Y+16	; 0x10
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	98 8b       	std	Y+16, r25	; 0x10
    2a9c:	8f 87       	std	Y+15, r24	; 0x0f
    2a9e:	89 89       	ldd	r24, Y+17	; 0x11
    2aa0:	88 23       	and	r24, r24
    2aa2:	09 f0       	breq	.+2      	; 0x2aa6 <delay_ms+0x11e>
    2aa4:	7e cf       	rjmp	.-260    	; 0x29a2 <delay_ms+0x1a>
		_delay_ms(1);
	}
}
    2aa6:	61 96       	adiw	r28, 0x11	; 17
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <main>:

/* Functions Declaration */
void App_voidTogLed(void);

int main(void) {
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62

	/* Initialization Functions */
	DIO_voidInit();
    2ac0:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_voidInit>
	LCD_voidInit();
    2ac4:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <LCD_voidInit>
	GI_voidEnable();
    2ac8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <GI_voidEnable>

	/* TIMER set call back */
	TIMER_u8Timer0SetCallBackOFV(&App_voidTogLed);
    2acc:	8d e6       	ldi	r24, 0x6D	; 109
    2ace:	95 e1       	ldi	r25, 0x15	; 21
    2ad0:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <TIMER_u8Timer0SetCallBackOFV>

	/* Start timer */
	TIMER_voidTimer0Init();
    2ad4:	0e 94 88 15 	call	0x2b10	; 0x2b10 <TIMER_voidTimer0Init>
    2ad8:	ff cf       	rjmp	.-2      	; 0x2ad8 <main+0x20>

00002ada <App_voidTogLed>:
	}

	return 0;
}

void App_voidTogLed(void) {
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
	static u8 flag = 0;
	if (flag == 0) {
    2ae2:	80 91 7a 01 	lds	r24, 0x017A
    2ae6:	88 23       	and	r24, r24
    2ae8:	49 f4       	brne	.+18     	; 0x2afc <App_voidTogLed+0x22>
		DIO_u8SetPinValue(DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_HIGH);
    2aea:	82 e0       	ldi	r24, 0x02	; 2
    2aec:	60 e0       	ldi	r22, 0x00	; 0
    2aee:	41 e0       	ldi	r20, 0x01	; 1
    2af0:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
		flag = 1;
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	80 93 7a 01 	sts	0x017A, r24
    2afa:	07 c0       	rjmp	.+14     	; 0x2b0a <App_voidTogLed+0x30>
	} else {
		DIO_u8SetPinValue(DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_LOW);
    2afc:	82 e0       	ldi	r24, 0x02	; 2
    2afe:	60 e0       	ldi	r22, 0x00	; 0
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
		flag = 0;
    2b06:	10 92 7a 01 	sts	0x017A, r1
	}
}
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	08 95       	ret

00002b10 <TIMER_voidTimer0Init>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns No thing                                				    **/
/* Desc:This Function initializes Timer0							       	    **/
/*********************************************************************************/
void TIMER_voidTimer0Init(void)
{
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
	#if WAVEFORM_GEN_MODE == NORMAL_MODE
	/*Set Timer 0 in NORMAL_MODE*/
	CLR_BIT(TIM0_u8_TCCR0_REG, TIM0_u8_TCCR0_WGM00);
    2b18:	a3 e5       	ldi	r26, 0x53	; 83
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e3 e5       	ldi	r30, 0x53	; 83
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	8f 7b       	andi	r24, 0xBF	; 191
    2b24:	8c 93       	st	X, r24
	CLR_BIT(TIM0_u8_TCCR0_REG, TIM0_u8_TCCR0_WGM01);
    2b26:	a3 e5       	ldi	r26, 0x53	; 83
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	e3 e5       	ldi	r30, 0x53	; 83
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 81       	ld	r24, Z
    2b30:	87 7f       	andi	r24, 0xF7	; 247
    2b32:	8c 93       	st	X, r24
	//set the value initialtion of counter 

        #if ISR_ENABLE == ENABLE 
		SET_BIT(TIM0_u8_TIMSK_REG,TIM0_u8_TIMSK_TOIE0);
    2b34:	a9 e5       	ldi	r26, 0x59	; 89
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	e9 e5       	ldi	r30, 0x59	; 89
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	81 60       	ori	r24, 0x01	; 1
    2b40:	8c 93       	st	X, r24
		#elif ISR_ENABLE == DISENABLE 
		CLR_BIT(TIM0_u8_TIMSK_REG,TIM0_u8_TIMSK_TOIE0);
		#endif
		TIM0_u8_TCNT0_REG=START_TICK;
    2b42:	e2 e5       	ldi	r30, 0x52	; 82
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 ec       	ldi	r24, 0xC0	; 192
    2b48:	80 83       	st	Z, r24
	TIM0_u8_OCR0_REG=VALUE_OCR;
	#endif

    
	/*Set The Prescaler to be 8*/
	TIM0_u8_TCCR0_REG &= PRESCALER_MASK;
    2b4a:	a3 e5       	ldi	r26, 0x53	; 83
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	e3 e5       	ldi	r30, 0x53	; 83
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	88 7f       	andi	r24, 0xF8	; 248
    2b56:	8c 93       	st	X, r24
	TIM0_u8_TCCR0_REG |= PRESCALER_TYPE;
    2b58:	a3 e5       	ldi	r26, 0x53	; 83
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	e3 e5       	ldi	r30, 0x53	; 83
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	82 60       	ori	r24, 0x02	; 2
    2b64:	8c 93       	st	X, r24
}
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <TIMER_u8Timer0SetCallBackOFV>:
/* I/P Parameters: 	Pointer to Function							          		    **/
/* Returns:it returns Error stutes                                 				    **/
/* Desc:This Function Timer0 ISR 							       	    **/
/*********************************************************************************/
u8 TIMER_u8Timer0SetCallBackOFV(void(*capy_pf)(void))  
{
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <TIMER_u8Timer0SetCallBackOFV+0x6>
    2b72:	0f 92       	push	r0
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	9b 83       	std	Y+3, r25	; 0x03
    2b7a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus =STD_TYPES_OK;
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	89 83       	std	Y+1, r24	; 0x01
	if(capy_pf!=NULL)
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	9b 81       	ldd	r25, Y+3	; 0x03
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	39 f0       	breq	.+14     	; 0x2b96 <TIMER_u8Timer0SetCallBackOFV+0x2a>
	{
		TIMER_pvTimer0ISROFV=capy_pf;
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b8c:	90 93 7c 01 	sts	0x017C, r25
    2b90:	80 93 7b 01 	sts	0x017B, r24
    2b94:	01 c0       	rjmp	.+2      	; 0x2b98 <TIMER_u8Timer0SetCallBackOFV+0x2c>

	}
	else 
	{
		Local_u8ErrorStatus =STD_TYPES_NOK;
    2b96:	19 82       	std	Y+1, r1	; 0x01

	}
	return Local_u8ErrorStatus ;
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
}    
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	08 95       	ret

00002ba6 <__vector_11>:
/* Desc:Function Sets the call back of Timer0 of over flow 	normal mode 						       	    **/
/*********************************************************************************/
/***********************************Timer0 ISR for over flow ***********************************/
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    2ba6:	1f 92       	push	r1
    2ba8:	0f 92       	push	r0
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	0f 92       	push	r0
    2bae:	11 24       	eor	r1, r1
    2bb0:	2f 93       	push	r18
    2bb2:	3f 93       	push	r19
    2bb4:	4f 93       	push	r20
    2bb6:	5f 93       	push	r21
    2bb8:	6f 93       	push	r22
    2bba:	7f 93       	push	r23
    2bbc:	8f 93       	push	r24
    2bbe:	9f 93       	push	r25
    2bc0:	af 93       	push	r26
    2bc2:	bf 93       	push	r27
    2bc4:	ef 93       	push	r30
    2bc6:	ff 93       	push	r31
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
	static u16 local_counter=0;
	local_counter++;
    2bd0:	80 91 81 01 	lds	r24, 0x0181
    2bd4:	90 91 82 01 	lds	r25, 0x0182
    2bd8:	01 96       	adiw	r24, 0x01	; 1
    2bda:	90 93 82 01 	sts	0x0182, r25
    2bde:	80 93 81 01 	sts	0x0181, r24
	if(local_counter==3907)
    2be2:	80 91 81 01 	lds	r24, 0x0181
    2be6:	90 91 82 01 	lds	r25, 0x0182
    2bea:	2f e0       	ldi	r18, 0x0F	; 15
    2bec:	83 34       	cpi	r24, 0x43	; 67
    2bee:	92 07       	cpc	r25, r18
    2bf0:	99 f4       	brne	.+38     	; 0x2c18 <__vector_11+0x72>
	{
		// clear countetr 
		local_counter=0;
    2bf2:	10 92 82 01 	sts	0x0182, r1
    2bf6:	10 92 81 01 	sts	0x0181, r1
		//update preload value
		TIM0_u8_TCNT0_REG=START_TICK;
    2bfa:	e2 e5       	ldi	r30, 0x52	; 82
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 ec       	ldi	r24, 0xC0	; 192
    2c00:	80 83       	st	Z, r24
		//call callback function from Applaction 
	    if(TIMER_pvTimer0ISROFV!=NULL)
    2c02:	80 91 7b 01 	lds	r24, 0x017B
    2c06:	90 91 7c 01 	lds	r25, 0x017C
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	29 f0       	breq	.+10     	; 0x2c18 <__vector_11+0x72>
	    {
		TIMER_pvTimer0ISROFV();	
    2c0e:	e0 91 7b 01 	lds	r30, 0x017B
    2c12:	f0 91 7c 01 	lds	r31, 0x017C
    2c16:	09 95       	icall
	    }
	}
}
    2c18:	cf 91       	pop	r28
    2c1a:	df 91       	pop	r29
    2c1c:	ff 91       	pop	r31
    2c1e:	ef 91       	pop	r30
    2c20:	bf 91       	pop	r27
    2c22:	af 91       	pop	r26
    2c24:	9f 91       	pop	r25
    2c26:	8f 91       	pop	r24
    2c28:	7f 91       	pop	r23
    2c2a:	6f 91       	pop	r22
    2c2c:	5f 91       	pop	r21
    2c2e:	4f 91       	pop	r20
    2c30:	3f 91       	pop	r19
    2c32:	2f 91       	pop	r18
    2c34:	0f 90       	pop	r0
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	0f 90       	pop	r0
    2c3a:	1f 90       	pop	r1
    2c3c:	18 95       	reti

00002c3e <TIMER_u8Timer0SetCallBackOCR>:
/* I/P Parameters: 	POinter to Function							          		    **/
/* Returns:it returns Error stutes                                				    **/
/* Desc:This Function Sets the call back of Timer0	CTC Mode  							       	    **/
/*********************************************************************************/
u8 TIMER_u8Timer0SetCallBackOCR(void(*capy_pf)(void))  
{
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	00 d0       	rcall	.+0      	; 0x2c44 <TIMER_u8Timer0SetCallBackOCR+0x6>
    2c44:	0f 92       	push	r0
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
    2c4a:	9b 83       	std	Y+3, r25	; 0x03
    2c4c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus =STD_TYPES_OK;
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	89 83       	std	Y+1, r24	; 0x01
	if(capy_pf!=NULL)
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	9b 81       	ldd	r25, Y+3	; 0x03
    2c56:	00 97       	sbiw	r24, 0x00	; 0
    2c58:	39 f0       	breq	.+14     	; 0x2c68 <TIMER_u8Timer0SetCallBackOCR+0x2a>
	{
		TIMER_pvTimer0ISROCR=capy_pf;
    2c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c5e:	90 93 7e 01 	sts	0x017E, r25
    2c62:	80 93 7d 01 	sts	0x017D, r24
    2c66:	01 c0       	rjmp	.+2      	; 0x2c6a <TIMER_u8Timer0SetCallBackOCR+0x2c>
	}
	else 
	{
		Local_u8ErrorStatus =STD_TYPES_NOK;
    2c68:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus ;
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <__vector_10>:
/* Desc:This Function Timer0 ISR  of  CTC Mode 							       	    **/
/*********************************************************************************/
/***********************************Timer0 ISR forCompare Match Event***********************************/
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    2c78:	1f 92       	push	r1
    2c7a:	0f 92       	push	r0
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	0f 92       	push	r0
    2c80:	11 24       	eor	r1, r1
    2c82:	2f 93       	push	r18
    2c84:	3f 93       	push	r19
    2c86:	4f 93       	push	r20
    2c88:	5f 93       	push	r21
    2c8a:	6f 93       	push	r22
    2c8c:	7f 93       	push	r23
    2c8e:	8f 93       	push	r24
    2c90:	9f 93       	push	r25
    2c92:	af 93       	push	r26
    2c94:	bf 93       	push	r27
    2c96:	ef 93       	push	r30
    2c98:	ff 93       	push	r31
    2c9a:	df 93       	push	r29
    2c9c:	cf 93       	push	r28
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
	static u16 local_counter=0;
	local_counter++;
    2ca2:	80 91 83 01 	lds	r24, 0x0183
    2ca6:	90 91 84 01 	lds	r25, 0x0184
    2caa:	01 96       	adiw	r24, 0x01	; 1
    2cac:	90 93 84 01 	sts	0x0184, r25
    2cb0:	80 93 83 01 	sts	0x0183, r24
	if(local_counter==10000)
    2cb4:	80 91 83 01 	lds	r24, 0x0183
    2cb8:	90 91 84 01 	lds	r25, 0x0184
    2cbc:	27 e2       	ldi	r18, 0x27	; 39
    2cbe:	80 31       	cpi	r24, 0x10	; 16
    2cc0:	92 07       	cpc	r25, r18
    2cc2:	79 f4       	brne	.+30     	; 0x2ce2 <__vector_10+0x6a>
	{
		// clear countetr 
		local_counter=0;
    2cc4:	10 92 84 01 	sts	0x0184, r1
    2cc8:	10 92 83 01 	sts	0x0183, r1
		
		//call callback function from Applaction 
	    if(TIMER_pvTimer0ISROCR!=NULL)
    2ccc:	80 91 7d 01 	lds	r24, 0x017D
    2cd0:	90 91 7e 01 	lds	r25, 0x017E
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	29 f0       	breq	.+10     	; 0x2ce2 <__vector_10+0x6a>
	    {
		TIMER_pvTimer0ISROCR();	
    2cd8:	e0 91 7d 01 	lds	r30, 0x017D
    2cdc:	f0 91 7e 01 	lds	r31, 0x017E
    2ce0:	09 95       	icall

	    }
	}
	
}
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	ff 91       	pop	r31
    2ce8:	ef 91       	pop	r30
    2cea:	bf 91       	pop	r27
    2cec:	af 91       	pop	r26
    2cee:	9f 91       	pop	r25
    2cf0:	8f 91       	pop	r24
    2cf2:	7f 91       	pop	r23
    2cf4:	6f 91       	pop	r22
    2cf6:	5f 91       	pop	r21
    2cf8:	4f 91       	pop	r20
    2cfa:	3f 91       	pop	r19
    2cfc:	2f 91       	pop	r18
    2cfe:	0f 90       	pop	r0
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	0f 90       	pop	r0
    2d04:	1f 90       	pop	r1
    2d06:	18 95       	reti

00002d08 <TIMER_voidTimer1Init>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns No thing                                				    **/
/* Desc:This Function initializes Timer1							       	    **/
/*********************************************************************************/
void TIMER_voidTimer1Init(void)
{
    2d08:	df 93       	push	r29
    2d0a:	cf 93       	push	r28
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
	#if  WAVEFORM_GEN_MODET1  == NORMAL_MODE
	/*Select The Normal Mode*/
	CLR_BIT(TIM1_u8_TCCR1A_REG, TIM1_u8_TCCR1A_WGM10);
    2d10:	af e4       	ldi	r26, 0x4F	; 79
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	ef e4       	ldi	r30, 0x4F	; 79
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	8e 7f       	andi	r24, 0xFE	; 254
    2d1c:	8c 93       	st	X, r24
	CLR_BIT(TIM1_u8_TCCR1A_REG, TIM1_u8_TCCR1A_WGM11);
    2d1e:	af e4       	ldi	r26, 0x4F	; 79
    2d20:	b0 e0       	ldi	r27, 0x00	; 0
    2d22:	ef e4       	ldi	r30, 0x4F	; 79
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	8d 7f       	andi	r24, 0xFD	; 253
    2d2a:	8c 93       	st	X, r24
	CLR_BIT(TIM1_u8_TCCR1B_REG, TIM1_u8_TCCR1B_WGM12);
    2d2c:	ae e4       	ldi	r26, 0x4E	; 78
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	ee e4       	ldi	r30, 0x4E	; 78
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	87 7f       	andi	r24, 0xF7	; 247
    2d38:	8c 93       	st	X, r24
	CLR_BIT(TIM1_u8_TCCR1B_REG, TIM1_u8_TCCR1B_WGM13);
    2d3a:	ae e4       	ldi	r26, 0x4E	; 78
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	ee e4       	ldi	r30, 0x4E	; 78
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	8f 7e       	andi	r24, 0xEF	; 239
    2d46:	8c 93       	st	X, r24
																		break;
			default: break;
			}

	/*Set Prescaler to be 8*/
	CLR_BIT(TIM1_u8_TCCR1B_REG, TIM1_u8_TCCR1B_CS10);
    2d48:	ae e4       	ldi	r26, 0x4E	; 78
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	ee e4       	ldi	r30, 0x4E	; 78
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	8e 7f       	andi	r24, 0xFE	; 254
    2d54:	8c 93       	st	X, r24
	SET_BIT(TIM1_u8_TCCR1B_REG, TIM1_u8_TCCR1B_CS11);
    2d56:	ae e4       	ldi	r26, 0x4E	; 78
    2d58:	b0 e0       	ldi	r27, 0x00	; 0
    2d5a:	ee e4       	ldi	r30, 0x4E	; 78
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	80 81       	ld	r24, Z
    2d60:	82 60       	ori	r24, 0x02	; 2
    2d62:	8c 93       	st	X, r24
	CLR_BIT(TIM1_u8_TCCR1B_REG, TIM1_u8_TCCR1B_CS12);
    2d64:	ae e4       	ldi	r26, 0x4E	; 78
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	ee e4       	ldi	r30, 0x4E	; 78
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	8b 7f       	andi	r24, 0xFB	; 251
    2d70:	8c 93       	st	X, r24

}
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	08 95       	ret

00002d78 <TIMER_voidTimer0SetCompareValue>:
/* Desc:This Function Sets the compare value of timer 0					       	**/
/*********************************************************************************/
/* Copy_u16CompareValue Options: Compare value assigned directly				**/
/*********************************************************************************/
void TIMER_voidTimer0SetCompareValue(u8 Copy_u8CompareValue)
{
    2d78:	df 93       	push	r29
    2d7a:	cf 93       	push	r28
    2d7c:	0f 92       	push	r0
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    2d82:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Compare Value to the OCR0 Register*/
	TIM0_u8_OCR0_REG = Copy_u8CompareValue;
    2d84:	ec e5       	ldi	r30, 0x5C	; 92
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	80 83       	st	Z, r24
}
    2d8c:	0f 90       	pop	r0
    2d8e:	cf 91       	pop	r28
    2d90:	df 91       	pop	r29
    2d92:	08 95       	ret

00002d94 <TIMER_voidTimer1ASetCompareValue>:
/* Desc:This Function Sets the compare value of timer 1 - A				       	**/
/*********************************************************************************/
/* Copy_u16CompareValue Options: Compare value assigned directly				**/
/*********************************************************************************/
void TIMER_voidTimer1ASetCompareValue(u16 Copy_u16CompareValue)
{
    2d94:	df 93       	push	r29
    2d96:	cf 93       	push	r28
    2d98:	00 d0       	rcall	.+0      	; 0x2d9a <TIMER_voidTimer1ASetCompareValue+0x6>
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	9a 83       	std	Y+2, r25	; 0x02
    2da0:	89 83       	std	Y+1, r24	; 0x01
	/* Set The Compare Value To OCR1 Channel A Register*/
	TIM1_u16_OCR1A_REG = Copy_u16CompareValue;
    2da2:	ea e4       	ldi	r30, 0x4A	; 74
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	9a 81       	ldd	r25, Y+2	; 0x02
    2daa:	91 83       	std	Z+1, r25	; 0x01
    2dac:	80 83       	st	Z, r24
}
    2dae:	0f 90       	pop	r0
    2db0:	0f 90       	pop	r0
    2db2:	cf 91       	pop	r28
    2db4:	df 91       	pop	r29
    2db6:	08 95       	ret

00002db8 <TIMER_voidTimer1BSetCompareValue>:
/* Desc:This Function Sets the compare value of timer 1 - B				       	**/
/*********************************************************************************/
/* Copy_u16CompareValue Options: Compare value assigned directly				**/
/*********************************************************************************/
void TIMER_voidTimer1BSetCompareValue(u16 Copy_u16CompareValue)
{
    2db8:	df 93       	push	r29
    2dba:	cf 93       	push	r28
    2dbc:	00 d0       	rcall	.+0      	; 0x2dbe <TIMER_voidTimer1BSetCompareValue+0x6>
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	9a 83       	std	Y+2, r25	; 0x02
    2dc4:	89 83       	std	Y+1, r24	; 0x01
	/* Set The Compare Value To OCR1 Channel B Register*/
	TIM1_u16_OCR1B_REG = Copy_u16CompareValue;
    2dc6:	e8 e4       	ldi	r30, 0x48	; 72
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dce:	91 83       	std	Z+1, r25	; 0x01
    2dd0:	80 83       	st	Z, r24
}
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <TIMER_voidTimer1SetInputCaptureValue>:
/* Desc:This Function Sets the input capture value of timer 1			       	**/
/*********************************************************************************/
/* Copy_u16CaptureValue Options: Capture value assigned directly				**/
/*********************************************************************************/
void TIMER_voidTimer1SetInputCaptureValue(u16 Copy_u16CaptureValue)
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <TIMER_voidTimer1SetInputCaptureValue+0x6>
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	9a 83       	std	Y+2, r25	; 0x02
    2de8:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Input Capture Value to ICR1 Register*/
	TIM1_u16_ICR1_REG = Copy_u16CaptureValue;
    2dea:	e6 e4       	ldi	r30, 0x46	; 70
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
    2df0:	9a 81       	ldd	r25, Y+2	; 0x02
    2df2:	91 83       	std	Z+1, r25	; 0x01
    2df4:	80 83       	st	Z, r24
}
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	08 95       	ret

00002e00 <ICU_voidInit>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns No thing                                				    **/
/* Desc:This Function initializes Input Capture unit				       	    **/
/*********************************************************************************/
void ICU_voidInit(void)
{
    2e00:	df 93       	push	r29
    2e02:	cf 93       	push	r28
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
	/*Set Trigger to rising edge initially*/
	SET_BIT(TIM1_u8_TCCR1B_REG,TIM1_u8_TCCR1B_ICES1);
    2e08:	ae e4       	ldi	r26, 0x4E	; 78
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	ee e4       	ldi	r30, 0x4E	; 78
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	80 64       	ori	r24, 0x40	; 64
    2e14:	8c 93       	st	X, r24

	/*Enable The ICU Interrupt*/
	SET_BIT(TIM0_u8_TIMSK_REG, TIM0_u8_TIMSK_TICIE1);
    2e16:	a9 e5       	ldi	r26, 0x59	; 89
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	e9 e5       	ldi	r30, 0x59	; 89
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	80 62       	ori	r24, 0x20	; 32
    2e22:	8c 93       	st	X, r24
}
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	08 95       	ret

00002e2a <ICU_voidSetTrigger>:
/* Desc:This Function sets the trigger source of Input Capture unit	    	    **/
/*********************************************************************************/
/* Copy_u8TriggerSource Options: RISING_EDGE, FALLING_EDGE						**/
/*********************************************************************************/
void ICU_voidSetTrigger(u8 Copy_u8TriggerSource)
{
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <ICU_voidSetTrigger+0x6>
    2e30:	0f 92       	push	r0
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8TriggerSource)
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	3b 83       	std	Y+3, r19	; 0x03
    2e40:	2a 83       	std	Y+2, r18	; 0x02
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	9b 81       	ldd	r25, Y+3	; 0x03
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	31 f0       	breq	.+12     	; 0x2e56 <ICU_voidSetTrigger+0x2c>
    2e4a:	2a 81       	ldd	r18, Y+2	; 0x02
    2e4c:	3b 81       	ldd	r19, Y+3	; 0x03
    2e4e:	21 30       	cpi	r18, 0x01	; 1
    2e50:	31 05       	cpc	r19, r1
    2e52:	49 f0       	breq	.+18     	; 0x2e66 <ICU_voidSetTrigger+0x3c>
    2e54:	0f c0       	rjmp	.+30     	; 0x2e74 <ICU_voidSetTrigger+0x4a>
	{
		case RISING_EDGE:
			/*Set The Rising Edge to be the trigger source*/
			SET_BIT(TIM1_u8_TCCR1B_REG, TIM1_u8_TCCR1B_ICES1);
    2e56:	ae e4       	ldi	r26, 0x4E	; 78
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	ee e4       	ldi	r30, 0x4E	; 78
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	80 81       	ld	r24, Z
    2e60:	80 64       	ori	r24, 0x40	; 64
    2e62:	8c 93       	st	X, r24
    2e64:	07 c0       	rjmp	.+14     	; 0x2e74 <ICU_voidSetTrigger+0x4a>
			break;
		case FALLING_EDGE:
			/*Set The Falling Edge to be the trigger source*/
			CLR_BIT(TIM1_u8_TCCR1B_REG, TIM1_u8_TCCR1B_ICES1);
    2e66:	ae e4       	ldi	r26, 0x4E	; 78
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	ee e4       	ldi	r30, 0x4E	; 78
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	8f 7b       	andi	r24, 0xBF	; 191
    2e72:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <ICU_u16ReadInputCapture>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns u16	                                				    **/
/* Desc:This Function reads the value captured by Input Capture unit    	    **/
/*********************************************************************************/
u16 ICU_u16ReadInputCapture(void)
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
	/*Get The Captured Value From ICR1 Register*/
	return TIM1_u16_ICR1_REG;
    2e88:	e6 e4       	ldi	r30, 0x46	; 70
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2e90:	cf 91       	pop	r28
    2e92:	df 91       	pop	r29
    2e94:	08 95       	ret

00002e96 <ICU_voidInterruptDisbale>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns Nothing                               				    **/
/* Desc:This Function disable the interrupt of Input Capture unit	    	    **/
/*********************************************************************************/
void ICU_voidInterruptDisbale(void)
{
    2e96:	df 93       	push	r29
    2e98:	cf 93       	push	r28
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
	/*Disable The ICU Interrupt*/
	CLR_BIT(TIM0_u8_TIMSK_REG, TIM0_u8_TIMSK_TICIE1);
    2e9e:	a9 e5       	ldi	r26, 0x59	; 89
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	e9 e5       	ldi	r30, 0x59	; 89
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	80 81       	ld	r24, Z
    2ea8:	8f 7d       	andi	r24, 0xDF	; 223
    2eaa:	8c 93       	st	X, r24
}
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	08 95       	ret

00002eb2 <ICU_voidSetCallBack>:
/* Desc:This Function Sets the call back of ICU								  	**/
/*********************************************************************************/
/* Copy_pvacationFunction Options: Address of the function to be executed	**/
/*********************************************************************************/
void ICU_voidSetCallBack(void (*Copy_pvacationFunction)(void))
{
    2eb2:	df 93       	push	r29
    2eb4:	cf 93       	push	r28
    2eb6:	00 d0       	rcall	.+0      	; 0x2eb8 <ICU_voidSetCallBack+0x6>
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	9a 83       	std	Y+2, r25	; 0x02
    2ebe:	89 83       	std	Y+1, r24	; 0x01
	TIMER_pvICUNotificationFunction = *Copy_pvacationFunction;
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec4:	90 93 80 01 	sts	0x0180, r25
    2ec8:	80 93 7f 01 	sts	0x017F, r24
}
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <__vector_6>:

/***********************************ISR for ICU Capture Event***********************************/
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    2ed6:	1f 92       	push	r1
    2ed8:	0f 92       	push	r0
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	0f 92       	push	r0
    2ede:	11 24       	eor	r1, r1
    2ee0:	2f 93       	push	r18
    2ee2:	3f 93       	push	r19
    2ee4:	4f 93       	push	r20
    2ee6:	5f 93       	push	r21
    2ee8:	6f 93       	push	r22
    2eea:	7f 93       	push	r23
    2eec:	8f 93       	push	r24
    2eee:	9f 93       	push	r25
    2ef0:	af 93       	push	r26
    2ef2:	bf 93       	push	r27
    2ef4:	ef 93       	push	r30
    2ef6:	ff 93       	push	r31
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_pvICUNotificationFunction != NULL)
    2f00:	80 91 7f 01 	lds	r24, 0x017F
    2f04:	90 91 80 01 	lds	r25, 0x0180
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	29 f0       	breq	.+10     	; 0x2f16 <__vector_6+0x40>
	{
		/*Execute the global pointer to function*/
		TIMER_pvICUNotificationFunction();
    2f0c:	e0 91 7f 01 	lds	r30, 0x017F
    2f10:	f0 91 80 01 	lds	r31, 0x0180
    2f14:	09 95       	icall
	}
	else
	{
		/*Do Nothing*/
	}
}
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	ff 91       	pop	r31
    2f1c:	ef 91       	pop	r30
    2f1e:	bf 91       	pop	r27
    2f20:	af 91       	pop	r26
    2f22:	9f 91       	pop	r25
    2f24:	8f 91       	pop	r24
    2f26:	7f 91       	pop	r23
    2f28:	6f 91       	pop	r22
    2f2a:	5f 91       	pop	r21
    2f2c:	4f 91       	pop	r20
    2f2e:	3f 91       	pop	r19
    2f30:	2f 91       	pop	r18
    2f32:	0f 90       	pop	r0
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	0f 90       	pop	r0
    2f38:	1f 90       	pop	r1
    2f3a:	18 95       	reti

00002f3c <__prologue_saves__>:
    2f3c:	2f 92       	push	r2
    2f3e:	3f 92       	push	r3
    2f40:	4f 92       	push	r4
    2f42:	5f 92       	push	r5
    2f44:	6f 92       	push	r6
    2f46:	7f 92       	push	r7
    2f48:	8f 92       	push	r8
    2f4a:	9f 92       	push	r9
    2f4c:	af 92       	push	r10
    2f4e:	bf 92       	push	r11
    2f50:	cf 92       	push	r12
    2f52:	df 92       	push	r13
    2f54:	ef 92       	push	r14
    2f56:	ff 92       	push	r15
    2f58:	0f 93       	push	r16
    2f5a:	1f 93       	push	r17
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
    2f64:	ca 1b       	sub	r28, r26
    2f66:	db 0b       	sbc	r29, r27
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	09 94       	ijmp

00002f74 <__epilogue_restores__>:
    2f74:	2a 88       	ldd	r2, Y+18	; 0x12
    2f76:	39 88       	ldd	r3, Y+17	; 0x11
    2f78:	48 88       	ldd	r4, Y+16	; 0x10
    2f7a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f7c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f7e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f80:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f82:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f84:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f86:	b9 84       	ldd	r11, Y+9	; 0x09
    2f88:	c8 84       	ldd	r12, Y+8	; 0x08
    2f8a:	df 80       	ldd	r13, Y+7	; 0x07
    2f8c:	ee 80       	ldd	r14, Y+6	; 0x06
    2f8e:	fd 80       	ldd	r15, Y+5	; 0x05
    2f90:	0c 81       	ldd	r16, Y+4	; 0x04
    2f92:	1b 81       	ldd	r17, Y+3	; 0x03
    2f94:	aa 81       	ldd	r26, Y+2	; 0x02
    2f96:	b9 81       	ldd	r27, Y+1	; 0x01
    2f98:	ce 0f       	add	r28, r30
    2f9a:	d1 1d       	adc	r29, r1
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
    2fa6:	ed 01       	movw	r28, r26
    2fa8:	08 95       	ret

00002faa <sprintf>:
    2faa:	ae e0       	ldi	r26, 0x0E	; 14
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	eb ed       	ldi	r30, 0xDB	; 219
    2fb0:	f7 e1       	ldi	r31, 0x17	; 23
    2fb2:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__prologue_saves__+0x1c>
    2fb6:	0d 89       	ldd	r16, Y+21	; 0x15
    2fb8:	1e 89       	ldd	r17, Y+22	; 0x16
    2fba:	86 e0       	ldi	r24, 0x06	; 6
    2fbc:	8c 83       	std	Y+4, r24	; 0x04
    2fbe:	1a 83       	std	Y+2, r17	; 0x02
    2fc0:	09 83       	std	Y+1, r16	; 0x01
    2fc2:	8f ef       	ldi	r24, 0xFF	; 255
    2fc4:	9f e7       	ldi	r25, 0x7F	; 127
    2fc6:	9e 83       	std	Y+6, r25	; 0x06
    2fc8:	8d 83       	std	Y+5, r24	; 0x05
    2fca:	9e 01       	movw	r18, r28
    2fcc:	27 5e       	subi	r18, 0xE7	; 231
    2fce:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	01 96       	adiw	r24, 0x01	; 1
    2fd4:	6f 89       	ldd	r22, Y+23	; 0x17
    2fd6:	78 8d       	ldd	r23, Y+24	; 0x18
    2fd8:	a9 01       	movw	r20, r18
    2fda:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <vfprintf>
    2fde:	2f 81       	ldd	r18, Y+7	; 0x07
    2fe0:	38 85       	ldd	r19, Y+8	; 0x08
    2fe2:	02 0f       	add	r16, r18
    2fe4:	13 1f       	adc	r17, r19
    2fe6:	f8 01       	movw	r30, r16
    2fe8:	10 82       	st	Z, r1
    2fea:	2e 96       	adiw	r28, 0x0e	; 14
    2fec:	e4 e0       	ldi	r30, 0x04	; 4
    2fee:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__epilogue_restores__+0x1c>

00002ff2 <vfprintf>:
    2ff2:	ab e0       	ldi	r26, 0x0B	; 11
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	ef ef       	ldi	r30, 0xFF	; 255
    2ff8:	f7 e1       	ldi	r31, 0x17	; 23
    2ffa:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__prologue_saves__>
    2ffe:	3c 01       	movw	r6, r24
    3000:	2b 01       	movw	r4, r22
    3002:	5a 01       	movw	r10, r20
    3004:	fc 01       	movw	r30, r24
    3006:	17 82       	std	Z+7, r1	; 0x07
    3008:	16 82       	std	Z+6, r1	; 0x06
    300a:	83 81       	ldd	r24, Z+3	; 0x03
    300c:	81 fd       	sbrc	r24, 1
    300e:	03 c0       	rjmp	.+6      	; 0x3016 <vfprintf+0x24>
    3010:	6f ef       	ldi	r22, 0xFF	; 255
    3012:	7f ef       	ldi	r23, 0xFF	; 255
    3014:	c6 c1       	rjmp	.+908    	; 0x33a2 <vfprintf+0x3b0>
    3016:	9a e0       	ldi	r25, 0x0A	; 10
    3018:	89 2e       	mov	r8, r25
    301a:	1e 01       	movw	r2, r28
    301c:	08 94       	sec
    301e:	21 1c       	adc	r2, r1
    3020:	31 1c       	adc	r3, r1
    3022:	f3 01       	movw	r30, r6
    3024:	23 81       	ldd	r18, Z+3	; 0x03
    3026:	f2 01       	movw	r30, r4
    3028:	23 fd       	sbrc	r18, 3
    302a:	85 91       	lpm	r24, Z+
    302c:	23 ff       	sbrs	r18, 3
    302e:	81 91       	ld	r24, Z+
    3030:	2f 01       	movw	r4, r30
    3032:	88 23       	and	r24, r24
    3034:	09 f4       	brne	.+2      	; 0x3038 <vfprintf+0x46>
    3036:	b2 c1       	rjmp	.+868    	; 0x339c <vfprintf+0x3aa>
    3038:	85 32       	cpi	r24, 0x25	; 37
    303a:	39 f4       	brne	.+14     	; 0x304a <vfprintf+0x58>
    303c:	23 fd       	sbrc	r18, 3
    303e:	85 91       	lpm	r24, Z+
    3040:	23 ff       	sbrs	r18, 3
    3042:	81 91       	ld	r24, Z+
    3044:	2f 01       	movw	r4, r30
    3046:	85 32       	cpi	r24, 0x25	; 37
    3048:	29 f4       	brne	.+10     	; 0x3054 <vfprintf+0x62>
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	b3 01       	movw	r22, r6
    304e:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <fputc>
    3052:	e7 cf       	rjmp	.-50     	; 0x3022 <vfprintf+0x30>
    3054:	98 2f       	mov	r25, r24
    3056:	ff 24       	eor	r15, r15
    3058:	ee 24       	eor	r14, r14
    305a:	99 24       	eor	r9, r9
    305c:	ff e1       	ldi	r31, 0x1F	; 31
    305e:	ff 15       	cp	r31, r15
    3060:	d0 f0       	brcs	.+52     	; 0x3096 <vfprintf+0xa4>
    3062:	9b 32       	cpi	r25, 0x2B	; 43
    3064:	69 f0       	breq	.+26     	; 0x3080 <vfprintf+0x8e>
    3066:	9c 32       	cpi	r25, 0x2C	; 44
    3068:	28 f4       	brcc	.+10     	; 0x3074 <vfprintf+0x82>
    306a:	90 32       	cpi	r25, 0x20	; 32
    306c:	59 f0       	breq	.+22     	; 0x3084 <vfprintf+0x92>
    306e:	93 32       	cpi	r25, 0x23	; 35
    3070:	91 f4       	brne	.+36     	; 0x3096 <vfprintf+0xa4>
    3072:	0e c0       	rjmp	.+28     	; 0x3090 <vfprintf+0x9e>
    3074:	9d 32       	cpi	r25, 0x2D	; 45
    3076:	49 f0       	breq	.+18     	; 0x308a <vfprintf+0x98>
    3078:	90 33       	cpi	r25, 0x30	; 48
    307a:	69 f4       	brne	.+26     	; 0x3096 <vfprintf+0xa4>
    307c:	41 e0       	ldi	r20, 0x01	; 1
    307e:	24 c0       	rjmp	.+72     	; 0x30c8 <vfprintf+0xd6>
    3080:	52 e0       	ldi	r21, 0x02	; 2
    3082:	f5 2a       	or	r15, r21
    3084:	84 e0       	ldi	r24, 0x04	; 4
    3086:	f8 2a       	or	r15, r24
    3088:	28 c0       	rjmp	.+80     	; 0x30da <vfprintf+0xe8>
    308a:	98 e0       	ldi	r25, 0x08	; 8
    308c:	f9 2a       	or	r15, r25
    308e:	25 c0       	rjmp	.+74     	; 0x30da <vfprintf+0xe8>
    3090:	e0 e1       	ldi	r30, 0x10	; 16
    3092:	fe 2a       	or	r15, r30
    3094:	22 c0       	rjmp	.+68     	; 0x30da <vfprintf+0xe8>
    3096:	f7 fc       	sbrc	r15, 7
    3098:	29 c0       	rjmp	.+82     	; 0x30ec <vfprintf+0xfa>
    309a:	89 2f       	mov	r24, r25
    309c:	80 53       	subi	r24, 0x30	; 48
    309e:	8a 30       	cpi	r24, 0x0A	; 10
    30a0:	70 f4       	brcc	.+28     	; 0x30be <vfprintf+0xcc>
    30a2:	f6 fe       	sbrs	r15, 6
    30a4:	05 c0       	rjmp	.+10     	; 0x30b0 <vfprintf+0xbe>
    30a6:	98 9c       	mul	r9, r8
    30a8:	90 2c       	mov	r9, r0
    30aa:	11 24       	eor	r1, r1
    30ac:	98 0e       	add	r9, r24
    30ae:	15 c0       	rjmp	.+42     	; 0x30da <vfprintf+0xe8>
    30b0:	e8 9c       	mul	r14, r8
    30b2:	e0 2c       	mov	r14, r0
    30b4:	11 24       	eor	r1, r1
    30b6:	e8 0e       	add	r14, r24
    30b8:	f0 e2       	ldi	r31, 0x20	; 32
    30ba:	ff 2a       	or	r15, r31
    30bc:	0e c0       	rjmp	.+28     	; 0x30da <vfprintf+0xe8>
    30be:	9e 32       	cpi	r25, 0x2E	; 46
    30c0:	29 f4       	brne	.+10     	; 0x30cc <vfprintf+0xda>
    30c2:	f6 fc       	sbrc	r15, 6
    30c4:	6b c1       	rjmp	.+726    	; 0x339c <vfprintf+0x3aa>
    30c6:	40 e4       	ldi	r20, 0x40	; 64
    30c8:	f4 2a       	or	r15, r20
    30ca:	07 c0       	rjmp	.+14     	; 0x30da <vfprintf+0xe8>
    30cc:	9c 36       	cpi	r25, 0x6C	; 108
    30ce:	19 f4       	brne	.+6      	; 0x30d6 <vfprintf+0xe4>
    30d0:	50 e8       	ldi	r21, 0x80	; 128
    30d2:	f5 2a       	or	r15, r21
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <vfprintf+0xe8>
    30d6:	98 36       	cpi	r25, 0x68	; 104
    30d8:	49 f4       	brne	.+18     	; 0x30ec <vfprintf+0xfa>
    30da:	f2 01       	movw	r30, r4
    30dc:	23 fd       	sbrc	r18, 3
    30de:	95 91       	lpm	r25, Z+
    30e0:	23 ff       	sbrs	r18, 3
    30e2:	91 91       	ld	r25, Z+
    30e4:	2f 01       	movw	r4, r30
    30e6:	99 23       	and	r25, r25
    30e8:	09 f0       	breq	.+2      	; 0x30ec <vfprintf+0xfa>
    30ea:	b8 cf       	rjmp	.-144    	; 0x305c <vfprintf+0x6a>
    30ec:	89 2f       	mov	r24, r25
    30ee:	85 54       	subi	r24, 0x45	; 69
    30f0:	83 30       	cpi	r24, 0x03	; 3
    30f2:	18 f0       	brcs	.+6      	; 0x30fa <vfprintf+0x108>
    30f4:	80 52       	subi	r24, 0x20	; 32
    30f6:	83 30       	cpi	r24, 0x03	; 3
    30f8:	38 f4       	brcc	.+14     	; 0x3108 <vfprintf+0x116>
    30fa:	44 e0       	ldi	r20, 0x04	; 4
    30fc:	50 e0       	ldi	r21, 0x00	; 0
    30fe:	a4 0e       	add	r10, r20
    3100:	b5 1e       	adc	r11, r21
    3102:	5f e3       	ldi	r21, 0x3F	; 63
    3104:	59 83       	std	Y+1, r21	; 0x01
    3106:	0f c0       	rjmp	.+30     	; 0x3126 <vfprintf+0x134>
    3108:	93 36       	cpi	r25, 0x63	; 99
    310a:	31 f0       	breq	.+12     	; 0x3118 <vfprintf+0x126>
    310c:	93 37       	cpi	r25, 0x73	; 115
    310e:	79 f0       	breq	.+30     	; 0x312e <vfprintf+0x13c>
    3110:	93 35       	cpi	r25, 0x53	; 83
    3112:	09 f0       	breq	.+2      	; 0x3116 <vfprintf+0x124>
    3114:	56 c0       	rjmp	.+172    	; 0x31c2 <vfprintf+0x1d0>
    3116:	20 c0       	rjmp	.+64     	; 0x3158 <vfprintf+0x166>
    3118:	f5 01       	movw	r30, r10
    311a:	80 81       	ld	r24, Z
    311c:	89 83       	std	Y+1, r24	; 0x01
    311e:	42 e0       	ldi	r20, 0x02	; 2
    3120:	50 e0       	ldi	r21, 0x00	; 0
    3122:	a4 0e       	add	r10, r20
    3124:	b5 1e       	adc	r11, r21
    3126:	61 01       	movw	r12, r2
    3128:	01 e0       	ldi	r16, 0x01	; 1
    312a:	10 e0       	ldi	r17, 0x00	; 0
    312c:	12 c0       	rjmp	.+36     	; 0x3152 <vfprintf+0x160>
    312e:	f5 01       	movw	r30, r10
    3130:	c0 80       	ld	r12, Z
    3132:	d1 80       	ldd	r13, Z+1	; 0x01
    3134:	f6 fc       	sbrc	r15, 6
    3136:	03 c0       	rjmp	.+6      	; 0x313e <vfprintf+0x14c>
    3138:	6f ef       	ldi	r22, 0xFF	; 255
    313a:	7f ef       	ldi	r23, 0xFF	; 255
    313c:	02 c0       	rjmp	.+4      	; 0x3142 <vfprintf+0x150>
    313e:	69 2d       	mov	r22, r9
    3140:	70 e0       	ldi	r23, 0x00	; 0
    3142:	42 e0       	ldi	r20, 0x02	; 2
    3144:	50 e0       	ldi	r21, 0x00	; 0
    3146:	a4 0e       	add	r10, r20
    3148:	b5 1e       	adc	r11, r21
    314a:	c6 01       	movw	r24, r12
    314c:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <strnlen>
    3150:	8c 01       	movw	r16, r24
    3152:	5f e7       	ldi	r21, 0x7F	; 127
    3154:	f5 22       	and	r15, r21
    3156:	14 c0       	rjmp	.+40     	; 0x3180 <vfprintf+0x18e>
    3158:	f5 01       	movw	r30, r10
    315a:	c0 80       	ld	r12, Z
    315c:	d1 80       	ldd	r13, Z+1	; 0x01
    315e:	f6 fc       	sbrc	r15, 6
    3160:	03 c0       	rjmp	.+6      	; 0x3168 <vfprintf+0x176>
    3162:	6f ef       	ldi	r22, 0xFF	; 255
    3164:	7f ef       	ldi	r23, 0xFF	; 255
    3166:	02 c0       	rjmp	.+4      	; 0x316c <vfprintf+0x17a>
    3168:	69 2d       	mov	r22, r9
    316a:	70 e0       	ldi	r23, 0x00	; 0
    316c:	42 e0       	ldi	r20, 0x02	; 2
    316e:	50 e0       	ldi	r21, 0x00	; 0
    3170:	a4 0e       	add	r10, r20
    3172:	b5 1e       	adc	r11, r21
    3174:	c6 01       	movw	r24, r12
    3176:	0e 94 d6 19 	call	0x33ac	; 0x33ac <strnlen_P>
    317a:	8c 01       	movw	r16, r24
    317c:	50 e8       	ldi	r21, 0x80	; 128
    317e:	f5 2a       	or	r15, r21
    3180:	f3 fe       	sbrs	r15, 3
    3182:	07 c0       	rjmp	.+14     	; 0x3192 <vfprintf+0x1a0>
    3184:	1a c0       	rjmp	.+52     	; 0x31ba <vfprintf+0x1c8>
    3186:	80 e2       	ldi	r24, 0x20	; 32
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	b3 01       	movw	r22, r6
    318c:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <fputc>
    3190:	ea 94       	dec	r14
    3192:	8e 2d       	mov	r24, r14
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	08 17       	cp	r16, r24
    3198:	19 07       	cpc	r17, r25
    319a:	a8 f3       	brcs	.-22     	; 0x3186 <vfprintf+0x194>
    319c:	0e c0       	rjmp	.+28     	; 0x31ba <vfprintf+0x1c8>
    319e:	f6 01       	movw	r30, r12
    31a0:	f7 fc       	sbrc	r15, 7
    31a2:	85 91       	lpm	r24, Z+
    31a4:	f7 fe       	sbrs	r15, 7
    31a6:	81 91       	ld	r24, Z+
    31a8:	6f 01       	movw	r12, r30
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	b3 01       	movw	r22, r6
    31ae:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <fputc>
    31b2:	e1 10       	cpse	r14, r1
    31b4:	ea 94       	dec	r14
    31b6:	01 50       	subi	r16, 0x01	; 1
    31b8:	10 40       	sbci	r17, 0x00	; 0
    31ba:	01 15       	cp	r16, r1
    31bc:	11 05       	cpc	r17, r1
    31be:	79 f7       	brne	.-34     	; 0x319e <vfprintf+0x1ac>
    31c0:	ea c0       	rjmp	.+468    	; 0x3396 <vfprintf+0x3a4>
    31c2:	94 36       	cpi	r25, 0x64	; 100
    31c4:	11 f0       	breq	.+4      	; 0x31ca <vfprintf+0x1d8>
    31c6:	99 36       	cpi	r25, 0x69	; 105
    31c8:	69 f5       	brne	.+90     	; 0x3224 <vfprintf+0x232>
    31ca:	f7 fe       	sbrs	r15, 7
    31cc:	08 c0       	rjmp	.+16     	; 0x31de <vfprintf+0x1ec>
    31ce:	f5 01       	movw	r30, r10
    31d0:	20 81       	ld	r18, Z
    31d2:	31 81       	ldd	r19, Z+1	; 0x01
    31d4:	42 81       	ldd	r20, Z+2	; 0x02
    31d6:	53 81       	ldd	r21, Z+3	; 0x03
    31d8:	84 e0       	ldi	r24, 0x04	; 4
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0a c0       	rjmp	.+20     	; 0x31f2 <vfprintf+0x200>
    31de:	f5 01       	movw	r30, r10
    31e0:	80 81       	ld	r24, Z
    31e2:	91 81       	ldd	r25, Z+1	; 0x01
    31e4:	9c 01       	movw	r18, r24
    31e6:	44 27       	eor	r20, r20
    31e8:	37 fd       	sbrc	r19, 7
    31ea:	40 95       	com	r20
    31ec:	54 2f       	mov	r21, r20
    31ee:	82 e0       	ldi	r24, 0x02	; 2
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	a8 0e       	add	r10, r24
    31f4:	b9 1e       	adc	r11, r25
    31f6:	9f e6       	ldi	r25, 0x6F	; 111
    31f8:	f9 22       	and	r15, r25
    31fa:	57 ff       	sbrs	r21, 7
    31fc:	09 c0       	rjmp	.+18     	; 0x3210 <vfprintf+0x21e>
    31fe:	50 95       	com	r21
    3200:	40 95       	com	r20
    3202:	30 95       	com	r19
    3204:	21 95       	neg	r18
    3206:	3f 4f       	sbci	r19, 0xFF	; 255
    3208:	4f 4f       	sbci	r20, 0xFF	; 255
    320a:	5f 4f       	sbci	r21, 0xFF	; 255
    320c:	e0 e8       	ldi	r30, 0x80	; 128
    320e:	fe 2a       	or	r15, r30
    3210:	ca 01       	movw	r24, r20
    3212:	b9 01       	movw	r22, r18
    3214:	a1 01       	movw	r20, r2
    3216:	2a e0       	ldi	r18, 0x0A	; 10
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	0e 94 18 1a 	call	0x3430	; 0x3430 <__ultoa_invert>
    321e:	d8 2e       	mov	r13, r24
    3220:	d2 18       	sub	r13, r2
    3222:	40 c0       	rjmp	.+128    	; 0x32a4 <vfprintf+0x2b2>
    3224:	95 37       	cpi	r25, 0x75	; 117
    3226:	29 f4       	brne	.+10     	; 0x3232 <vfprintf+0x240>
    3228:	1f 2d       	mov	r17, r15
    322a:	1f 7e       	andi	r17, 0xEF	; 239
    322c:	2a e0       	ldi	r18, 0x0A	; 10
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	1d c0       	rjmp	.+58     	; 0x326c <vfprintf+0x27a>
    3232:	1f 2d       	mov	r17, r15
    3234:	19 7f       	andi	r17, 0xF9	; 249
    3236:	9f 36       	cpi	r25, 0x6F	; 111
    3238:	61 f0       	breq	.+24     	; 0x3252 <vfprintf+0x260>
    323a:	90 37       	cpi	r25, 0x70	; 112
    323c:	20 f4       	brcc	.+8      	; 0x3246 <vfprintf+0x254>
    323e:	98 35       	cpi	r25, 0x58	; 88
    3240:	09 f0       	breq	.+2      	; 0x3244 <vfprintf+0x252>
    3242:	ac c0       	rjmp	.+344    	; 0x339c <vfprintf+0x3aa>
    3244:	0f c0       	rjmp	.+30     	; 0x3264 <vfprintf+0x272>
    3246:	90 37       	cpi	r25, 0x70	; 112
    3248:	39 f0       	breq	.+14     	; 0x3258 <vfprintf+0x266>
    324a:	98 37       	cpi	r25, 0x78	; 120
    324c:	09 f0       	breq	.+2      	; 0x3250 <vfprintf+0x25e>
    324e:	a6 c0       	rjmp	.+332    	; 0x339c <vfprintf+0x3aa>
    3250:	04 c0       	rjmp	.+8      	; 0x325a <vfprintf+0x268>
    3252:	28 e0       	ldi	r18, 0x08	; 8
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	0a c0       	rjmp	.+20     	; 0x326c <vfprintf+0x27a>
    3258:	10 61       	ori	r17, 0x10	; 16
    325a:	14 fd       	sbrc	r17, 4
    325c:	14 60       	ori	r17, 0x04	; 4
    325e:	20 e1       	ldi	r18, 0x10	; 16
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	04 c0       	rjmp	.+8      	; 0x326c <vfprintf+0x27a>
    3264:	14 fd       	sbrc	r17, 4
    3266:	16 60       	ori	r17, 0x06	; 6
    3268:	20 e1       	ldi	r18, 0x10	; 16
    326a:	32 e0       	ldi	r19, 0x02	; 2
    326c:	17 ff       	sbrs	r17, 7
    326e:	08 c0       	rjmp	.+16     	; 0x3280 <vfprintf+0x28e>
    3270:	f5 01       	movw	r30, r10
    3272:	60 81       	ld	r22, Z
    3274:	71 81       	ldd	r23, Z+1	; 0x01
    3276:	82 81       	ldd	r24, Z+2	; 0x02
    3278:	93 81       	ldd	r25, Z+3	; 0x03
    327a:	44 e0       	ldi	r20, 0x04	; 4
    327c:	50 e0       	ldi	r21, 0x00	; 0
    327e:	08 c0       	rjmp	.+16     	; 0x3290 <vfprintf+0x29e>
    3280:	f5 01       	movw	r30, r10
    3282:	80 81       	ld	r24, Z
    3284:	91 81       	ldd	r25, Z+1	; 0x01
    3286:	bc 01       	movw	r22, r24
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	42 e0       	ldi	r20, 0x02	; 2
    328e:	50 e0       	ldi	r21, 0x00	; 0
    3290:	a4 0e       	add	r10, r20
    3292:	b5 1e       	adc	r11, r21
    3294:	a1 01       	movw	r20, r2
    3296:	0e 94 18 1a 	call	0x3430	; 0x3430 <__ultoa_invert>
    329a:	d8 2e       	mov	r13, r24
    329c:	d2 18       	sub	r13, r2
    329e:	8f e7       	ldi	r24, 0x7F	; 127
    32a0:	f8 2e       	mov	r15, r24
    32a2:	f1 22       	and	r15, r17
    32a4:	f6 fe       	sbrs	r15, 6
    32a6:	0b c0       	rjmp	.+22     	; 0x32be <vfprintf+0x2cc>
    32a8:	5e ef       	ldi	r21, 0xFE	; 254
    32aa:	f5 22       	and	r15, r21
    32ac:	d9 14       	cp	r13, r9
    32ae:	38 f4       	brcc	.+14     	; 0x32be <vfprintf+0x2cc>
    32b0:	f4 fe       	sbrs	r15, 4
    32b2:	07 c0       	rjmp	.+14     	; 0x32c2 <vfprintf+0x2d0>
    32b4:	f2 fc       	sbrc	r15, 2
    32b6:	05 c0       	rjmp	.+10     	; 0x32c2 <vfprintf+0x2d0>
    32b8:	8f ee       	ldi	r24, 0xEF	; 239
    32ba:	f8 22       	and	r15, r24
    32bc:	02 c0       	rjmp	.+4      	; 0x32c2 <vfprintf+0x2d0>
    32be:	1d 2d       	mov	r17, r13
    32c0:	01 c0       	rjmp	.+2      	; 0x32c4 <vfprintf+0x2d2>
    32c2:	19 2d       	mov	r17, r9
    32c4:	f4 fe       	sbrs	r15, 4
    32c6:	0d c0       	rjmp	.+26     	; 0x32e2 <vfprintf+0x2f0>
    32c8:	fe 01       	movw	r30, r28
    32ca:	ed 0d       	add	r30, r13
    32cc:	f1 1d       	adc	r31, r1
    32ce:	80 81       	ld	r24, Z
    32d0:	80 33       	cpi	r24, 0x30	; 48
    32d2:	19 f4       	brne	.+6      	; 0x32da <vfprintf+0x2e8>
    32d4:	99 ee       	ldi	r25, 0xE9	; 233
    32d6:	f9 22       	and	r15, r25
    32d8:	08 c0       	rjmp	.+16     	; 0x32ea <vfprintf+0x2f8>
    32da:	1f 5f       	subi	r17, 0xFF	; 255
    32dc:	f2 fe       	sbrs	r15, 2
    32de:	05 c0       	rjmp	.+10     	; 0x32ea <vfprintf+0x2f8>
    32e0:	03 c0       	rjmp	.+6      	; 0x32e8 <vfprintf+0x2f6>
    32e2:	8f 2d       	mov	r24, r15
    32e4:	86 78       	andi	r24, 0x86	; 134
    32e6:	09 f0       	breq	.+2      	; 0x32ea <vfprintf+0x2f8>
    32e8:	1f 5f       	subi	r17, 0xFF	; 255
    32ea:	0f 2d       	mov	r16, r15
    32ec:	f3 fc       	sbrc	r15, 3
    32ee:	14 c0       	rjmp	.+40     	; 0x3318 <vfprintf+0x326>
    32f0:	f0 fe       	sbrs	r15, 0
    32f2:	0f c0       	rjmp	.+30     	; 0x3312 <vfprintf+0x320>
    32f4:	1e 15       	cp	r17, r14
    32f6:	10 f0       	brcs	.+4      	; 0x32fc <vfprintf+0x30a>
    32f8:	9d 2c       	mov	r9, r13
    32fa:	0b c0       	rjmp	.+22     	; 0x3312 <vfprintf+0x320>
    32fc:	9d 2c       	mov	r9, r13
    32fe:	9e 0c       	add	r9, r14
    3300:	91 1a       	sub	r9, r17
    3302:	1e 2d       	mov	r17, r14
    3304:	06 c0       	rjmp	.+12     	; 0x3312 <vfprintf+0x320>
    3306:	80 e2       	ldi	r24, 0x20	; 32
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	b3 01       	movw	r22, r6
    330c:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <fputc>
    3310:	1f 5f       	subi	r17, 0xFF	; 255
    3312:	1e 15       	cp	r17, r14
    3314:	c0 f3       	brcs	.-16     	; 0x3306 <vfprintf+0x314>
    3316:	04 c0       	rjmp	.+8      	; 0x3320 <vfprintf+0x32e>
    3318:	1e 15       	cp	r17, r14
    331a:	10 f4       	brcc	.+4      	; 0x3320 <vfprintf+0x32e>
    331c:	e1 1a       	sub	r14, r17
    331e:	01 c0       	rjmp	.+2      	; 0x3322 <vfprintf+0x330>
    3320:	ee 24       	eor	r14, r14
    3322:	04 ff       	sbrs	r16, 4
    3324:	0f c0       	rjmp	.+30     	; 0x3344 <vfprintf+0x352>
    3326:	80 e3       	ldi	r24, 0x30	; 48
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	b3 01       	movw	r22, r6
    332c:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <fputc>
    3330:	02 ff       	sbrs	r16, 2
    3332:	1d c0       	rjmp	.+58     	; 0x336e <vfprintf+0x37c>
    3334:	01 fd       	sbrc	r16, 1
    3336:	03 c0       	rjmp	.+6      	; 0x333e <vfprintf+0x34c>
    3338:	88 e7       	ldi	r24, 0x78	; 120
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	0e c0       	rjmp	.+28     	; 0x335a <vfprintf+0x368>
    333e:	88 e5       	ldi	r24, 0x58	; 88
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	0b c0       	rjmp	.+22     	; 0x335a <vfprintf+0x368>
    3344:	80 2f       	mov	r24, r16
    3346:	86 78       	andi	r24, 0x86	; 134
    3348:	91 f0       	breq	.+36     	; 0x336e <vfprintf+0x37c>
    334a:	01 ff       	sbrs	r16, 1
    334c:	02 c0       	rjmp	.+4      	; 0x3352 <vfprintf+0x360>
    334e:	8b e2       	ldi	r24, 0x2B	; 43
    3350:	01 c0       	rjmp	.+2      	; 0x3354 <vfprintf+0x362>
    3352:	80 e2       	ldi	r24, 0x20	; 32
    3354:	f7 fc       	sbrc	r15, 7
    3356:	8d e2       	ldi	r24, 0x2D	; 45
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	b3 01       	movw	r22, r6
    335c:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <fputc>
    3360:	06 c0       	rjmp	.+12     	; 0x336e <vfprintf+0x37c>
    3362:	80 e3       	ldi	r24, 0x30	; 48
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	b3 01       	movw	r22, r6
    3368:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <fputc>
    336c:	9a 94       	dec	r9
    336e:	d9 14       	cp	r13, r9
    3370:	c0 f3       	brcs	.-16     	; 0x3362 <vfprintf+0x370>
    3372:	da 94       	dec	r13
    3374:	f1 01       	movw	r30, r2
    3376:	ed 0d       	add	r30, r13
    3378:	f1 1d       	adc	r31, r1
    337a:	80 81       	ld	r24, Z
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	b3 01       	movw	r22, r6
    3380:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <fputc>
    3384:	dd 20       	and	r13, r13
    3386:	a9 f7       	brne	.-22     	; 0x3372 <vfprintf+0x380>
    3388:	06 c0       	rjmp	.+12     	; 0x3396 <vfprintf+0x3a4>
    338a:	80 e2       	ldi	r24, 0x20	; 32
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	b3 01       	movw	r22, r6
    3390:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <fputc>
    3394:	ea 94       	dec	r14
    3396:	ee 20       	and	r14, r14
    3398:	c1 f7       	brne	.-16     	; 0x338a <vfprintf+0x398>
    339a:	43 ce       	rjmp	.-890    	; 0x3022 <vfprintf+0x30>
    339c:	f3 01       	movw	r30, r6
    339e:	66 81       	ldd	r22, Z+6	; 0x06
    33a0:	77 81       	ldd	r23, Z+7	; 0x07
    33a2:	cb 01       	movw	r24, r22
    33a4:	2b 96       	adiw	r28, 0x0b	; 11
    33a6:	e2 e1       	ldi	r30, 0x12	; 18
    33a8:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__epilogue_restores__>

000033ac <strnlen_P>:
    33ac:	fc 01       	movw	r30, r24
    33ae:	05 90       	lpm	r0, Z+
    33b0:	61 50       	subi	r22, 0x01	; 1
    33b2:	70 40       	sbci	r23, 0x00	; 0
    33b4:	01 10       	cpse	r0, r1
    33b6:	d8 f7       	brcc	.-10     	; 0x33ae <strnlen_P+0x2>
    33b8:	80 95       	com	r24
    33ba:	90 95       	com	r25
    33bc:	8e 0f       	add	r24, r30
    33be:	9f 1f       	adc	r25, r31
    33c0:	08 95       	ret

000033c2 <strnlen>:
    33c2:	fc 01       	movw	r30, r24
    33c4:	61 50       	subi	r22, 0x01	; 1
    33c6:	70 40       	sbci	r23, 0x00	; 0
    33c8:	01 90       	ld	r0, Z+
    33ca:	01 10       	cpse	r0, r1
    33cc:	d8 f7       	brcc	.-10     	; 0x33c4 <strnlen+0x2>
    33ce:	80 95       	com	r24
    33d0:	90 95       	com	r25
    33d2:	8e 0f       	add	r24, r30
    33d4:	9f 1f       	adc	r25, r31
    33d6:	08 95       	ret

000033d8 <fputc>:
    33d8:	0f 93       	push	r16
    33da:	1f 93       	push	r17
    33dc:	cf 93       	push	r28
    33de:	df 93       	push	r29
    33e0:	8c 01       	movw	r16, r24
    33e2:	eb 01       	movw	r28, r22
    33e4:	8b 81       	ldd	r24, Y+3	; 0x03
    33e6:	81 ff       	sbrs	r24, 1
    33e8:	1b c0       	rjmp	.+54     	; 0x3420 <fputc+0x48>
    33ea:	82 ff       	sbrs	r24, 2
    33ec:	0d c0       	rjmp	.+26     	; 0x3408 <fputc+0x30>
    33ee:	2e 81       	ldd	r18, Y+6	; 0x06
    33f0:	3f 81       	ldd	r19, Y+7	; 0x07
    33f2:	8c 81       	ldd	r24, Y+4	; 0x04
    33f4:	9d 81       	ldd	r25, Y+5	; 0x05
    33f6:	28 17       	cp	r18, r24
    33f8:	39 07       	cpc	r19, r25
    33fa:	64 f4       	brge	.+24     	; 0x3414 <fputc+0x3c>
    33fc:	e8 81       	ld	r30, Y
    33fe:	f9 81       	ldd	r31, Y+1	; 0x01
    3400:	01 93       	st	Z+, r16
    3402:	f9 83       	std	Y+1, r31	; 0x01
    3404:	e8 83       	st	Y, r30
    3406:	06 c0       	rjmp	.+12     	; 0x3414 <fputc+0x3c>
    3408:	e8 85       	ldd	r30, Y+8	; 0x08
    340a:	f9 85       	ldd	r31, Y+9	; 0x09
    340c:	80 2f       	mov	r24, r16
    340e:	09 95       	icall
    3410:	89 2b       	or	r24, r25
    3412:	31 f4       	brne	.+12     	; 0x3420 <fputc+0x48>
    3414:	8e 81       	ldd	r24, Y+6	; 0x06
    3416:	9f 81       	ldd	r25, Y+7	; 0x07
    3418:	01 96       	adiw	r24, 0x01	; 1
    341a:	9f 83       	std	Y+7, r25	; 0x07
    341c:	8e 83       	std	Y+6, r24	; 0x06
    341e:	02 c0       	rjmp	.+4      	; 0x3424 <fputc+0x4c>
    3420:	0f ef       	ldi	r16, 0xFF	; 255
    3422:	1f ef       	ldi	r17, 0xFF	; 255
    3424:	c8 01       	movw	r24, r16
    3426:	df 91       	pop	r29
    3428:	cf 91       	pop	r28
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	08 95       	ret

00003430 <__ultoa_invert>:
    3430:	fa 01       	movw	r30, r20
    3432:	aa 27       	eor	r26, r26
    3434:	28 30       	cpi	r18, 0x08	; 8
    3436:	51 f1       	breq	.+84     	; 0x348c <__ultoa_invert+0x5c>
    3438:	20 31       	cpi	r18, 0x10	; 16
    343a:	81 f1       	breq	.+96     	; 0x349c <__ultoa_invert+0x6c>
    343c:	e8 94       	clt
    343e:	6f 93       	push	r22
    3440:	6e 7f       	andi	r22, 0xFE	; 254
    3442:	6e 5f       	subi	r22, 0xFE	; 254
    3444:	7f 4f       	sbci	r23, 0xFF	; 255
    3446:	8f 4f       	sbci	r24, 0xFF	; 255
    3448:	9f 4f       	sbci	r25, 0xFF	; 255
    344a:	af 4f       	sbci	r26, 0xFF	; 255
    344c:	b1 e0       	ldi	r27, 0x01	; 1
    344e:	3e d0       	rcall	.+124    	; 0x34cc <__ultoa_invert+0x9c>
    3450:	b4 e0       	ldi	r27, 0x04	; 4
    3452:	3c d0       	rcall	.+120    	; 0x34cc <__ultoa_invert+0x9c>
    3454:	67 0f       	add	r22, r23
    3456:	78 1f       	adc	r23, r24
    3458:	89 1f       	adc	r24, r25
    345a:	9a 1f       	adc	r25, r26
    345c:	a1 1d       	adc	r26, r1
    345e:	68 0f       	add	r22, r24
    3460:	79 1f       	adc	r23, r25
    3462:	8a 1f       	adc	r24, r26
    3464:	91 1d       	adc	r25, r1
    3466:	a1 1d       	adc	r26, r1
    3468:	6a 0f       	add	r22, r26
    346a:	71 1d       	adc	r23, r1
    346c:	81 1d       	adc	r24, r1
    346e:	91 1d       	adc	r25, r1
    3470:	a1 1d       	adc	r26, r1
    3472:	20 d0       	rcall	.+64     	; 0x34b4 <__ultoa_invert+0x84>
    3474:	09 f4       	brne	.+2      	; 0x3478 <__ultoa_invert+0x48>
    3476:	68 94       	set
    3478:	3f 91       	pop	r19
    347a:	2a e0       	ldi	r18, 0x0A	; 10
    347c:	26 9f       	mul	r18, r22
    347e:	11 24       	eor	r1, r1
    3480:	30 19       	sub	r19, r0
    3482:	30 5d       	subi	r19, 0xD0	; 208
    3484:	31 93       	st	Z+, r19
    3486:	de f6       	brtc	.-74     	; 0x343e <__ultoa_invert+0xe>
    3488:	cf 01       	movw	r24, r30
    348a:	08 95       	ret
    348c:	46 2f       	mov	r20, r22
    348e:	47 70       	andi	r20, 0x07	; 7
    3490:	40 5d       	subi	r20, 0xD0	; 208
    3492:	41 93       	st	Z+, r20
    3494:	b3 e0       	ldi	r27, 0x03	; 3
    3496:	0f d0       	rcall	.+30     	; 0x34b6 <__ultoa_invert+0x86>
    3498:	c9 f7       	brne	.-14     	; 0x348c <__ultoa_invert+0x5c>
    349a:	f6 cf       	rjmp	.-20     	; 0x3488 <__ultoa_invert+0x58>
    349c:	46 2f       	mov	r20, r22
    349e:	4f 70       	andi	r20, 0x0F	; 15
    34a0:	40 5d       	subi	r20, 0xD0	; 208
    34a2:	4a 33       	cpi	r20, 0x3A	; 58
    34a4:	18 f0       	brcs	.+6      	; 0x34ac <__ultoa_invert+0x7c>
    34a6:	49 5d       	subi	r20, 0xD9	; 217
    34a8:	31 fd       	sbrc	r19, 1
    34aa:	40 52       	subi	r20, 0x20	; 32
    34ac:	41 93       	st	Z+, r20
    34ae:	02 d0       	rcall	.+4      	; 0x34b4 <__ultoa_invert+0x84>
    34b0:	a9 f7       	brne	.-22     	; 0x349c <__ultoa_invert+0x6c>
    34b2:	ea cf       	rjmp	.-44     	; 0x3488 <__ultoa_invert+0x58>
    34b4:	b4 e0       	ldi	r27, 0x04	; 4
    34b6:	a6 95       	lsr	r26
    34b8:	97 95       	ror	r25
    34ba:	87 95       	ror	r24
    34bc:	77 95       	ror	r23
    34be:	67 95       	ror	r22
    34c0:	ba 95       	dec	r27
    34c2:	c9 f7       	brne	.-14     	; 0x34b6 <__ultoa_invert+0x86>
    34c4:	00 97       	sbiw	r24, 0x00	; 0
    34c6:	61 05       	cpc	r22, r1
    34c8:	71 05       	cpc	r23, r1
    34ca:	08 95       	ret
    34cc:	9b 01       	movw	r18, r22
    34ce:	ac 01       	movw	r20, r24
    34d0:	0a 2e       	mov	r0, r26
    34d2:	06 94       	lsr	r0
    34d4:	57 95       	ror	r21
    34d6:	47 95       	ror	r20
    34d8:	37 95       	ror	r19
    34da:	27 95       	ror	r18
    34dc:	ba 95       	dec	r27
    34de:	c9 f7       	brne	.-14     	; 0x34d2 <__ultoa_invert+0xa2>
    34e0:	62 0f       	add	r22, r18
    34e2:	73 1f       	adc	r23, r19
    34e4:	84 1f       	adc	r24, r20
    34e6:	95 1f       	adc	r25, r21
    34e8:	a0 1d       	adc	r26, r0
    34ea:	08 95       	ret

000034ec <_exit>:
    34ec:	f8 94       	cli

000034ee <__stop_program>:
    34ee:	ff cf       	rjmp	.-2      	; 0x34ee <__stop_program>
