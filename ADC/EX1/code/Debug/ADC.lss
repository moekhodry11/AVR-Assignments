
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003040  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00003040  000030d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800174  00800174  000031e8  2**0
                  ALLOC
  3 .stab         000020c4  00000000  00000000  000031e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001016  00000000  00000000  000052ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000062c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000213  00000000  00000000  00006482  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002495  00000000  00000000  00006695  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001412  00000000  00000000  00008b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001209  00000000  00000000  00009f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000b148  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002da  00000000  00000000  0000b328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000996  00000000  00000000  0000b602  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a0 14 	call	0x2940	; 0x2940 <main>
      8a:	0c 94 1e 18 	jmp	0x303c	; 0x303c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__+0x18>

00000752 <__lesf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__lesf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__lesf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__lesf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__+0x18>

000007b2 <__floatsisf>:
     7b2:	a8 e0       	ldi	r26, 0x08	; 8
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__prologue_saves__+0x12>
     7be:	9b 01       	movw	r18, r22
     7c0:	ac 01       	movw	r20, r24
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	da 01       	movw	r26, r20
     7c8:	c9 01       	movw	r24, r18
     7ca:	88 27       	eor	r24, r24
     7cc:	b7 fd       	sbrc	r27, 7
     7ce:	83 95       	inc	r24
     7d0:	99 27       	eor	r25, r25
     7d2:	aa 27       	eor	r26, r26
     7d4:	bb 27       	eor	r27, r27
     7d6:	b8 2e       	mov	r11, r24
     7d8:	21 15       	cp	r18, r1
     7da:	31 05       	cpc	r19, r1
     7dc:	41 05       	cpc	r20, r1
     7de:	51 05       	cpc	r21, r1
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <__floatsisf+0x36>
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	3a c0       	rjmp	.+116    	; 0x85c <__floatsisf+0xaa>
     7e8:	88 23       	and	r24, r24
     7ea:	a9 f0       	breq	.+42     	; 0x816 <__floatsisf+0x64>
     7ec:	20 30       	cpi	r18, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	38 07       	cpc	r19, r24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	48 07       	cpc	r20, r24
     7f6:	80 e8       	ldi	r24, 0x80	; 128
     7f8:	58 07       	cpc	r21, r24
     7fa:	29 f4       	brne	.+10     	; 0x806 <__floatsisf+0x54>
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	9f ec       	ldi	r25, 0xCF	; 207
     804:	30 c0       	rjmp	.+96     	; 0x866 <__floatsisf+0xb4>
     806:	ee 24       	eor	r14, r14
     808:	ff 24       	eor	r15, r15
     80a:	87 01       	movw	r16, r14
     80c:	e2 1a       	sub	r14, r18
     80e:	f3 0a       	sbc	r15, r19
     810:	04 0b       	sbc	r16, r20
     812:	15 0b       	sbc	r17, r21
     814:	02 c0       	rjmp	.+4      	; 0x81a <__floatsisf+0x68>
     816:	79 01       	movw	r14, r18
     818:	8a 01       	movw	r16, r20
     81a:	8e e1       	ldi	r24, 0x1E	; 30
     81c:	c8 2e       	mov	r12, r24
     81e:	d1 2c       	mov	r13, r1
     820:	dc 82       	std	Y+4, r13	; 0x04
     822:	cb 82       	std	Y+3, r12	; 0x03
     824:	ed 82       	std	Y+5, r14	; 0x05
     826:	fe 82       	std	Y+6, r15	; 0x06
     828:	0f 83       	std	Y+7, r16	; 0x07
     82a:	18 87       	std	Y+8, r17	; 0x08
     82c:	c8 01       	movw	r24, r16
     82e:	b7 01       	movw	r22, r14
     830:	0e 94 04 05 	call	0xa08	; 0xa08 <__clzsi2>
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	18 16       	cp	r1, r24
     838:	19 06       	cpc	r1, r25
     83a:	84 f4       	brge	.+32     	; 0x85c <__floatsisf+0xaa>
     83c:	08 2e       	mov	r0, r24
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatsisf+0x96>
     840:	ee 0c       	add	r14, r14
     842:	ff 1c       	adc	r15, r15
     844:	00 1f       	adc	r16, r16
     846:	11 1f       	adc	r17, r17
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatsisf+0x8e>
     84c:	ed 82       	std	Y+5, r14	; 0x05
     84e:	fe 82       	std	Y+6, r15	; 0x06
     850:	0f 83       	std	Y+7, r16	; 0x07
     852:	18 87       	std	Y+8, r17	; 0x08
     854:	c8 1a       	sub	r12, r24
     856:	d9 0a       	sbc	r13, r25
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ba 82       	std	Y+2, r11	; 0x02
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     866:	28 96       	adiw	r28, 0x08	; 8
     868:	e9 e0       	ldi	r30, 0x09	; 9
     86a:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__epilogue_restores__+0x12>

0000086e <__fixsfsi>:
     86e:	ac e0       	ldi	r26, 0x0C	; 12
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	ed e3       	ldi	r30, 0x3D	; 61
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__prologue_saves__+0x20>
     87a:	69 83       	std	Y+1, r22	; 0x01
     87c:	7a 83       	std	Y+2, r23	; 0x02
     87e:	8b 83       	std	Y+3, r24	; 0x03
     880:	9c 83       	std	Y+4, r25	; 0x04
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	be 01       	movw	r22, r28
     888:	6b 5f       	subi	r22, 0xFB	; 251
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	61 f1       	breq	.+88     	; 0x8ee <__fixsfsi+0x80>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	50 f1       	brcs	.+84     	; 0x8ee <__fixsfsi+0x80>
     89a:	84 30       	cpi	r24, 0x04	; 4
     89c:	21 f4       	brne	.+8      	; 0x8a6 <__fixsfsi+0x38>
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	88 23       	and	r24, r24
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <__fixsfsi+0x8a>
     8a4:	2e c0       	rjmp	.+92     	; 0x902 <__fixsfsi+0x94>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	37 fd       	sbrc	r19, 7
     8ac:	20 c0       	rjmp	.+64     	; 0x8ee <__fixsfsi+0x80>
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
     8b0:	2f 31       	cpi	r18, 0x1F	; 31
     8b2:	31 05       	cpc	r19, r1
     8b4:	1c f0       	brlt	.+6      	; 0x8bc <__fixsfsi+0x4e>
     8b6:	66 23       	and	r22, r22
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <__fixsfsi+0x8a>
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <__fixsfsi+0x94>
     8bc:	8e e1       	ldi	r24, 0x1E	; 30
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	29 85       	ldd	r18, Y+9	; 0x09
     8c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fixsfsi+0x68>
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	37 95       	ror	r19
     8d4:	27 95       	ror	r18
     8d6:	8a 95       	dec	r24
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__fixsfsi+0x60>
     8da:	66 23       	and	r22, r22
     8dc:	b1 f0       	breq	.+44     	; 0x90a <__fixsfsi+0x9c>
     8de:	50 95       	com	r21
     8e0:	40 95       	com	r20
     8e2:	30 95       	com	r19
     8e4:	21 95       	neg	r18
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__fixsfsi+0x9c>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__fixsfsi+0x9c>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	4f ef       	ldi	r20, 0xFF	; 255
     8fe:	5f e7       	ldi	r21, 0x7F	; 127
     900:	04 c0       	rjmp	.+8      	; 0x90a <__fixsfsi+0x9c>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e8       	ldi	r21, 0x80	; 128
     90a:	b9 01       	movw	r22, r18
     90c:	ca 01       	movw	r24, r20
     90e:	2c 96       	adiw	r28, 0x0c	; 12
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__epilogue_restores__+0x20>

00000916 <__floatunsisf>:
     916:	a8 e0       	ldi	r26, 0x08	; 8
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	e1 e9       	ldi	r30, 0x91	; 145
     91c:	f4 e0       	ldi	r31, 0x04	; 4
     91e:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__prologue_saves__+0x10>
     922:	7b 01       	movw	r14, r22
     924:	8c 01       	movw	r16, r24
     926:	61 15       	cp	r22, r1
     928:	71 05       	cpc	r23, r1
     92a:	81 05       	cpc	r24, r1
     92c:	91 05       	cpc	r25, r1
     92e:	19 f4       	brne	.+6      	; 0x936 <__floatunsisf+0x20>
     930:	82 e0       	ldi	r24, 0x02	; 2
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	60 c0       	rjmp	.+192    	; 0x9f6 <__floatunsisf+0xe0>
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	8e e1       	ldi	r24, 0x1E	; 30
     93c:	c8 2e       	mov	r12, r24
     93e:	d1 2c       	mov	r13, r1
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 01       	movw	r24, r16
     94e:	b7 01       	movw	r22, r14
     950:	0e 94 04 05 	call	0xa08	; 0xa08 <__clzsi2>
     954:	fc 01       	movw	r30, r24
     956:	31 97       	sbiw	r30, 0x01	; 1
     958:	f7 ff       	sbrs	r31, 7
     95a:	3b c0       	rjmp	.+118    	; 0x9d2 <__floatunsisf+0xbc>
     95c:	22 27       	eor	r18, r18
     95e:	33 27       	eor	r19, r19
     960:	2e 1b       	sub	r18, r30
     962:	3f 0b       	sbc	r19, r31
     964:	57 01       	movw	r10, r14
     966:	68 01       	movw	r12, r16
     968:	02 2e       	mov	r0, r18
     96a:	04 c0       	rjmp	.+8      	; 0x974 <__floatunsisf+0x5e>
     96c:	d6 94       	lsr	r13
     96e:	c7 94       	ror	r12
     970:	b7 94       	ror	r11
     972:	a7 94       	ror	r10
     974:	0a 94       	dec	r0
     976:	d2 f7       	brpl	.-12     	; 0x96c <__floatunsisf+0x56>
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	04 c0       	rjmp	.+8      	; 0x992 <__floatunsisf+0x7c>
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	aa 1f       	adc	r26, r26
     990:	bb 1f       	adc	r27, r27
     992:	2a 95       	dec	r18
     994:	d2 f7       	brpl	.-12     	; 0x98a <__floatunsisf+0x74>
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	a1 09       	sbc	r26, r1
     99a:	b1 09       	sbc	r27, r1
     99c:	8e 21       	and	r24, r14
     99e:	9f 21       	and	r25, r15
     9a0:	a0 23       	and	r26, r16
     9a2:	b1 23       	and	r27, r17
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	a1 05       	cpc	r26, r1
     9a8:	b1 05       	cpc	r27, r1
     9aa:	21 f0       	breq	.+8      	; 0x9b4 <__floatunsisf+0x9e>
     9ac:	41 e0       	ldi	r20, 0x01	; 1
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	4a 29       	or	r20, r10
     9b6:	5b 29       	or	r21, r11
     9b8:	6c 29       	or	r22, r12
     9ba:	7d 29       	or	r23, r13
     9bc:	4d 83       	std	Y+5, r20	; 0x05
     9be:	5e 83       	std	Y+6, r21	; 0x06
     9c0:	6f 83       	std	Y+7, r22	; 0x07
     9c2:	78 87       	std	Y+8, r23	; 0x08
     9c4:	8e e1       	ldi	r24, 0x1E	; 30
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	8e 1b       	sub	r24, r30
     9ca:	9f 0b       	sbc	r25, r31
     9cc:	9c 83       	std	Y+4, r25	; 0x04
     9ce:	8b 83       	std	Y+3, r24	; 0x03
     9d0:	12 c0       	rjmp	.+36     	; 0x9f6 <__floatunsisf+0xe0>
     9d2:	30 97       	sbiw	r30, 0x00	; 0
     9d4:	81 f0       	breq	.+32     	; 0x9f6 <__floatunsisf+0xe0>
     9d6:	0e 2e       	mov	r0, r30
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <__floatunsisf+0xcc>
     9da:	ee 0c       	add	r14, r14
     9dc:	ff 1c       	adc	r15, r15
     9de:	00 1f       	adc	r16, r16
     9e0:	11 1f       	adc	r17, r17
     9e2:	0a 94       	dec	r0
     9e4:	d2 f7       	brpl	.-12     	; 0x9da <__floatunsisf+0xc4>
     9e6:	ed 82       	std	Y+5, r14	; 0x05
     9e8:	fe 82       	std	Y+6, r15	; 0x06
     9ea:	0f 83       	std	Y+7, r16	; 0x07
     9ec:	18 87       	std	Y+8, r17	; 0x08
     9ee:	ce 1a       	sub	r12, r30
     9f0:	df 0a       	sbc	r13, r31
     9f2:	dc 82       	std	Y+4, r13	; 0x04
     9f4:	cb 82       	std	Y+3, r12	; 0x03
     9f6:	1a 82       	std	Y+2, r1	; 0x02
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     a00:	28 96       	adiw	r28, 0x08	; 8
     a02:	ea e0       	ldi	r30, 0x0A	; 10
     a04:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__epilogue_restores__+0x10>

00000a08 <__clzsi2>:
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	7b 01       	movw	r14, r22
     a12:	8c 01       	movw	r16, r24
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	e8 16       	cp	r14, r24
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	f8 06       	cpc	r15, r24
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	08 07       	cpc	r16, r24
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	18 07       	cpc	r17, r24
     a24:	88 f4       	brcc	.+34     	; 0xa48 <__clzsi2+0x40>
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	e8 16       	cp	r14, r24
     a2a:	f1 04       	cpc	r15, r1
     a2c:	01 05       	cpc	r16, r1
     a2e:	11 05       	cpc	r17, r1
     a30:	31 f0       	breq	.+12     	; 0xa3e <__clzsi2+0x36>
     a32:	28 f0       	brcs	.+10     	; 0xa3e <__clzsi2+0x36>
     a34:	88 e0       	ldi	r24, 0x08	; 8
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	17 c0       	rjmp	.+46     	; 0xa6c <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	12 c0       	rjmp	.+36     	; 0xa6c <__clzsi2+0x64>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	e8 16       	cp	r14, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	f8 06       	cpc	r15, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	08 07       	cpc	r16, r24
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	18 07       	cpc	r17, r24
     a58:	28 f0       	brcs	.+10     	; 0xa64 <__clzsi2+0x5c>
     a5a:	88 e1       	ldi	r24, 0x18	; 24
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__clzsi2+0x64>
     a64:	80 e1       	ldi	r24, 0x10	; 16
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	20 e2       	ldi	r18, 0x20	; 32
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	28 1b       	sub	r18, r24
     a76:	39 0b       	sbc	r19, r25
     a78:	4a 0b       	sbc	r20, r26
     a7a:	5b 0b       	sbc	r21, r27
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__clzsi2+0x7e>
     a7e:	16 95       	lsr	r17
     a80:	07 95       	ror	r16
     a82:	f7 94       	ror	r15
     a84:	e7 94       	ror	r14
     a86:	8a 95       	dec	r24
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__clzsi2+0x76>
     a8a:	f7 01       	movw	r30, r14
     a8c:	e4 59       	subi	r30, 0x94	; 148
     a8e:	ff 4f       	sbci	r31, 0xFF	; 255
     a90:	80 81       	ld	r24, Z
     a92:	28 1b       	sub	r18, r24
     a94:	31 09       	sbc	r19, r1
     a96:	41 09       	sbc	r20, r1
     a98:	51 09       	sbc	r21, r1
     a9a:	c9 01       	movw	r24, r18
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	08 95       	ret

00000aa6 <__pack_f>:
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	fc 01       	movw	r30, r24
     ab2:	e4 80       	ldd	r14, Z+4	; 0x04
     ab4:	f5 80       	ldd	r15, Z+5	; 0x05
     ab6:	06 81       	ldd	r16, Z+6	; 0x06
     ab8:	17 81       	ldd	r17, Z+7	; 0x07
     aba:	d1 80       	ldd	r13, Z+1	; 0x01
     abc:	80 81       	ld	r24, Z
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	48 f4       	brcc	.+18     	; 0xad4 <__pack_f+0x2e>
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	a0 e1       	ldi	r26, 0x10	; 16
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	e8 2a       	or	r14, r24
     acc:	f9 2a       	or	r15, r25
     ace:	0a 2b       	or	r16, r26
     ad0:	1b 2b       	or	r17, r27
     ad2:	a5 c0       	rjmp	.+330    	; 0xc1e <__pack_f+0x178>
     ad4:	84 30       	cpi	r24, 0x04	; 4
     ad6:	09 f4       	brne	.+2      	; 0xada <__pack_f+0x34>
     ad8:	9f c0       	rjmp	.+318    	; 0xc18 <__pack_f+0x172>
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	21 f4       	brne	.+8      	; 0xae6 <__pack_f+0x40>
     ade:	ee 24       	eor	r14, r14
     ae0:	ff 24       	eor	r15, r15
     ae2:	87 01       	movw	r16, r14
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <__pack_f+0x4a>
     ae6:	e1 14       	cp	r14, r1
     ae8:	f1 04       	cpc	r15, r1
     aea:	01 05       	cpc	r16, r1
     aec:	11 05       	cpc	r17, r1
     aee:	19 f4       	brne	.+6      	; 0xaf6 <__pack_f+0x50>
     af0:	e0 e0       	ldi	r30, 0x00	; 0
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	96 c0       	rjmp	.+300    	; 0xc22 <__pack_f+0x17c>
     af6:	62 81       	ldd	r22, Z+2	; 0x02
     af8:	73 81       	ldd	r23, Z+3	; 0x03
     afa:	9f ef       	ldi	r25, 0xFF	; 255
     afc:	62 38       	cpi	r22, 0x82	; 130
     afe:	79 07       	cpc	r23, r25
     b00:	0c f0       	brlt	.+2      	; 0xb04 <__pack_f+0x5e>
     b02:	5b c0       	rjmp	.+182    	; 0xbba <__pack_f+0x114>
     b04:	22 e8       	ldi	r18, 0x82	; 130
     b06:	3f ef       	ldi	r19, 0xFF	; 255
     b08:	26 1b       	sub	r18, r22
     b0a:	37 0b       	sbc	r19, r23
     b0c:	2a 31       	cpi	r18, 0x1A	; 26
     b0e:	31 05       	cpc	r19, r1
     b10:	2c f0       	brlt	.+10     	; 0xb1c <__pack_f+0x76>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	2a c0       	rjmp	.+84     	; 0xb70 <__pack_f+0xca>
     b1c:	b8 01       	movw	r22, r16
     b1e:	a7 01       	movw	r20, r14
     b20:	02 2e       	mov	r0, r18
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__pack_f+0x86>
     b24:	76 95       	lsr	r23
     b26:	67 95       	ror	r22
     b28:	57 95       	ror	r21
     b2a:	47 95       	ror	r20
     b2c:	0a 94       	dec	r0
     b2e:	d2 f7       	brpl	.-12     	; 0xb24 <__pack_f+0x7e>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__pack_f+0x9c>
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	aa 1f       	adc	r26, r26
     b40:	bb 1f       	adc	r27, r27
     b42:	2a 95       	dec	r18
     b44:	d2 f7       	brpl	.-12     	; 0xb3a <__pack_f+0x94>
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	a1 09       	sbc	r26, r1
     b4a:	b1 09       	sbc	r27, r1
     b4c:	8e 21       	and	r24, r14
     b4e:	9f 21       	and	r25, r15
     b50:	a0 23       	and	r26, r16
     b52:	b1 23       	and	r27, r17
     b54:	00 97       	sbiw	r24, 0x00	; 0
     b56:	a1 05       	cpc	r26, r1
     b58:	b1 05       	cpc	r27, r1
     b5a:	21 f0       	breq	.+8      	; 0xb64 <__pack_f+0xbe>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	9a 01       	movw	r18, r20
     b66:	ab 01       	movw	r20, r22
     b68:	28 2b       	or	r18, r24
     b6a:	39 2b       	or	r19, r25
     b6c:	4a 2b       	or	r20, r26
     b6e:	5b 2b       	or	r21, r27
     b70:	da 01       	movw	r26, r20
     b72:	c9 01       	movw	r24, r18
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	90 70       	andi	r25, 0x00	; 0
     b78:	a0 70       	andi	r26, 0x00	; 0
     b7a:	b0 70       	andi	r27, 0x00	; 0
     b7c:	80 34       	cpi	r24, 0x40	; 64
     b7e:	91 05       	cpc	r25, r1
     b80:	a1 05       	cpc	r26, r1
     b82:	b1 05       	cpc	r27, r1
     b84:	39 f4       	brne	.+14     	; 0xb94 <__pack_f+0xee>
     b86:	27 ff       	sbrs	r18, 7
     b88:	09 c0       	rjmp	.+18     	; 0xb9c <__pack_f+0xf6>
     b8a:	20 5c       	subi	r18, 0xC0	; 192
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	04 c0       	rjmp	.+8      	; 0xb9c <__pack_f+0xf6>
     b94:	21 5c       	subi	r18, 0xC1	; 193
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	4f 4f       	sbci	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	e0 e0       	ldi	r30, 0x00	; 0
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	20 30       	cpi	r18, 0x00	; 0
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	3a 07       	cpc	r19, r26
     ba6:	a0 e0       	ldi	r26, 0x00	; 0
     ba8:	4a 07       	cpc	r20, r26
     baa:	a0 e4       	ldi	r26, 0x40	; 64
     bac:	5a 07       	cpc	r21, r26
     bae:	10 f0       	brcs	.+4      	; 0xbb4 <__pack_f+0x10e>
     bb0:	e1 e0       	ldi	r30, 0x01	; 1
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	79 01       	movw	r14, r18
     bb6:	8a 01       	movw	r16, r20
     bb8:	27 c0       	rjmp	.+78     	; 0xc08 <__pack_f+0x162>
     bba:	60 38       	cpi	r22, 0x80	; 128
     bbc:	71 05       	cpc	r23, r1
     bbe:	64 f5       	brge	.+88     	; 0xc18 <__pack_f+0x172>
     bc0:	fb 01       	movw	r30, r22
     bc2:	e1 58       	subi	r30, 0x81	; 129
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	d8 01       	movw	r26, r16
     bc8:	c7 01       	movw	r24, r14
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	90 70       	andi	r25, 0x00	; 0
     bce:	a0 70       	andi	r26, 0x00	; 0
     bd0:	b0 70       	andi	r27, 0x00	; 0
     bd2:	80 34       	cpi	r24, 0x40	; 64
     bd4:	91 05       	cpc	r25, r1
     bd6:	a1 05       	cpc	r26, r1
     bd8:	b1 05       	cpc	r27, r1
     bda:	39 f4       	brne	.+14     	; 0xbea <__pack_f+0x144>
     bdc:	e7 fe       	sbrs	r14, 7
     bde:	0d c0       	rjmp	.+26     	; 0xbfa <__pack_f+0x154>
     be0:	80 e4       	ldi	r24, 0x40	; 64
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__pack_f+0x14c>
     bea:	8f e3       	ldi	r24, 0x3F	; 63
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	a0 e0       	ldi	r26, 0x00	; 0
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e8 0e       	add	r14, r24
     bf4:	f9 1e       	adc	r15, r25
     bf6:	0a 1f       	adc	r16, r26
     bf8:	1b 1f       	adc	r17, r27
     bfa:	17 ff       	sbrs	r17, 7
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <__pack_f+0x162>
     bfe:	16 95       	lsr	r17
     c00:	07 95       	ror	r16
     c02:	f7 94       	ror	r15
     c04:	e7 94       	ror	r14
     c06:	31 96       	adiw	r30, 0x01	; 1
     c08:	87 e0       	ldi	r24, 0x07	; 7
     c0a:	16 95       	lsr	r17
     c0c:	07 95       	ror	r16
     c0e:	f7 94       	ror	r15
     c10:	e7 94       	ror	r14
     c12:	8a 95       	dec	r24
     c14:	d1 f7       	brne	.-12     	; 0xc0a <__pack_f+0x164>
     c16:	05 c0       	rjmp	.+10     	; 0xc22 <__pack_f+0x17c>
     c18:	ee 24       	eor	r14, r14
     c1a:	ff 24       	eor	r15, r15
     c1c:	87 01       	movw	r16, r14
     c1e:	ef ef       	ldi	r30, 0xFF	; 255
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	6e 2f       	mov	r22, r30
     c24:	67 95       	ror	r22
     c26:	66 27       	eor	r22, r22
     c28:	67 95       	ror	r22
     c2a:	90 2f       	mov	r25, r16
     c2c:	9f 77       	andi	r25, 0x7F	; 127
     c2e:	d7 94       	ror	r13
     c30:	dd 24       	eor	r13, r13
     c32:	d7 94       	ror	r13
     c34:	8e 2f       	mov	r24, r30
     c36:	86 95       	lsr	r24
     c38:	49 2f       	mov	r20, r25
     c3a:	46 2b       	or	r20, r22
     c3c:	58 2f       	mov	r21, r24
     c3e:	5d 29       	or	r21, r13
     c40:	b7 01       	movw	r22, r14
     c42:	ca 01       	movw	r24, r20
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	08 95       	ret

00000c50 <__unpack_f>:
     c50:	fc 01       	movw	r30, r24
     c52:	db 01       	movw	r26, r22
     c54:	40 81       	ld	r20, Z
     c56:	51 81       	ldd	r21, Z+1	; 0x01
     c58:	22 81       	ldd	r18, Z+2	; 0x02
     c5a:	62 2f       	mov	r22, r18
     c5c:	6f 77       	andi	r22, 0x7F	; 127
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	22 1f       	adc	r18, r18
     c62:	22 27       	eor	r18, r18
     c64:	22 1f       	adc	r18, r18
     c66:	93 81       	ldd	r25, Z+3	; 0x03
     c68:	89 2f       	mov	r24, r25
     c6a:	88 0f       	add	r24, r24
     c6c:	82 2b       	or	r24, r18
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	99 1f       	adc	r25, r25
     c74:	99 27       	eor	r25, r25
     c76:	99 1f       	adc	r25, r25
     c78:	11 96       	adiw	r26, 0x01	; 1
     c7a:	9c 93       	st	X, r25
     c7c:	11 97       	sbiw	r26, 0x01	; 1
     c7e:	21 15       	cp	r18, r1
     c80:	31 05       	cpc	r19, r1
     c82:	a9 f5       	brne	.+106    	; 0xcee <__unpack_f+0x9e>
     c84:	41 15       	cp	r20, r1
     c86:	51 05       	cpc	r21, r1
     c88:	61 05       	cpc	r22, r1
     c8a:	71 05       	cpc	r23, r1
     c8c:	11 f4       	brne	.+4      	; 0xc92 <__unpack_f+0x42>
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	37 c0       	rjmp	.+110    	; 0xd00 <__unpack_f+0xb0>
     c92:	82 e8       	ldi	r24, 0x82	; 130
     c94:	9f ef       	ldi	r25, 0xFF	; 255
     c96:	13 96       	adiw	r26, 0x03	; 3
     c98:	9c 93       	st	X, r25
     c9a:	8e 93       	st	-X, r24
     c9c:	12 97       	sbiw	r26, 0x02	; 2
     c9e:	9a 01       	movw	r18, r20
     ca0:	ab 01       	movw	r20, r22
     ca2:	67 e0       	ldi	r22, 0x07	; 7
     ca4:	22 0f       	add	r18, r18
     ca6:	33 1f       	adc	r19, r19
     ca8:	44 1f       	adc	r20, r20
     caa:	55 1f       	adc	r21, r21
     cac:	6a 95       	dec	r22
     cae:	d1 f7       	brne	.-12     	; 0xca4 <__unpack_f+0x54>
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	8c 93       	st	X, r24
     cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <__unpack_f+0x80>
     cb6:	22 0f       	add	r18, r18
     cb8:	33 1f       	adc	r19, r19
     cba:	44 1f       	adc	r20, r20
     cbc:	55 1f       	adc	r21, r21
     cbe:	12 96       	adiw	r26, 0x02	; 2
     cc0:	8d 91       	ld	r24, X+
     cc2:	9c 91       	ld	r25, X
     cc4:	13 97       	sbiw	r26, 0x03	; 3
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	13 96       	adiw	r26, 0x03	; 3
     cca:	9c 93       	st	X, r25
     ccc:	8e 93       	st	-X, r24
     cce:	12 97       	sbiw	r26, 0x02	; 2
     cd0:	20 30       	cpi	r18, 0x00	; 0
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	38 07       	cpc	r19, r24
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	48 07       	cpc	r20, r24
     cda:	80 e4       	ldi	r24, 0x40	; 64
     cdc:	58 07       	cpc	r21, r24
     cde:	58 f3       	brcs	.-42     	; 0xcb6 <__unpack_f+0x66>
     ce0:	14 96       	adiw	r26, 0x04	; 4
     ce2:	2d 93       	st	X+, r18
     ce4:	3d 93       	st	X+, r19
     ce6:	4d 93       	st	X+, r20
     ce8:	5c 93       	st	X, r21
     cea:	17 97       	sbiw	r26, 0x07	; 7
     cec:	08 95       	ret
     cee:	2f 3f       	cpi	r18, 0xFF	; 255
     cf0:	31 05       	cpc	r19, r1
     cf2:	79 f4       	brne	.+30     	; 0xd12 <__unpack_f+0xc2>
     cf4:	41 15       	cp	r20, r1
     cf6:	51 05       	cpc	r21, r1
     cf8:	61 05       	cpc	r22, r1
     cfa:	71 05       	cpc	r23, r1
     cfc:	19 f4       	brne	.+6      	; 0xd04 <__unpack_f+0xb4>
     cfe:	84 e0       	ldi	r24, 0x04	; 4
     d00:	8c 93       	st	X, r24
     d02:	08 95       	ret
     d04:	64 ff       	sbrs	r22, 4
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <__unpack_f+0xbe>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	8c 93       	st	X, r24
     d0c:	12 c0       	rjmp	.+36     	; 0xd32 <__unpack_f+0xe2>
     d0e:	1c 92       	st	X, r1
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <__unpack_f+0xe2>
     d12:	2f 57       	subi	r18, 0x7F	; 127
     d14:	30 40       	sbci	r19, 0x00	; 0
     d16:	13 96       	adiw	r26, 0x03	; 3
     d18:	3c 93       	st	X, r19
     d1a:	2e 93       	st	-X, r18
     d1c:	12 97       	sbiw	r26, 0x02	; 2
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	8c 93       	st	X, r24
     d22:	87 e0       	ldi	r24, 0x07	; 7
     d24:	44 0f       	add	r20, r20
     d26:	55 1f       	adc	r21, r21
     d28:	66 1f       	adc	r22, r22
     d2a:	77 1f       	adc	r23, r23
     d2c:	8a 95       	dec	r24
     d2e:	d1 f7       	brne	.-12     	; 0xd24 <__unpack_f+0xd4>
     d30:	70 64       	ori	r23, 0x40	; 64
     d32:	14 96       	adiw	r26, 0x04	; 4
     d34:	4d 93       	st	X+, r20
     d36:	5d 93       	st	X+, r21
     d38:	6d 93       	st	X+, r22
     d3a:	7c 93       	st	X, r23
     d3c:	17 97       	sbiw	r26, 0x07	; 7
     d3e:	08 95       	ret

00000d40 <__fpcmp_parts_f>:
     d40:	1f 93       	push	r17
     d42:	dc 01       	movw	r26, r24
     d44:	fb 01       	movw	r30, r22
     d46:	9c 91       	ld	r25, X
     d48:	92 30       	cpi	r25, 0x02	; 2
     d4a:	08 f4       	brcc	.+2      	; 0xd4e <__fpcmp_parts_f+0xe>
     d4c:	47 c0       	rjmp	.+142    	; 0xddc <__fpcmp_parts_f+0x9c>
     d4e:	80 81       	ld	r24, Z
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	08 f4       	brcc	.+2      	; 0xd56 <__fpcmp_parts_f+0x16>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <__fpcmp_parts_f+0x9c>
     d56:	94 30       	cpi	r25, 0x04	; 4
     d58:	51 f4       	brne	.+20     	; 0xd6e <__fpcmp_parts_f+0x2e>
     d5a:	11 96       	adiw	r26, 0x01	; 1
     d5c:	1c 91       	ld	r17, X
     d5e:	84 30       	cpi	r24, 0x04	; 4
     d60:	99 f5       	brne	.+102    	; 0xdc8 <__fpcmp_parts_f+0x88>
     d62:	81 81       	ldd	r24, Z+1	; 0x01
     d64:	68 2f       	mov	r22, r24
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	61 1b       	sub	r22, r17
     d6a:	71 09       	sbc	r23, r1
     d6c:	3f c0       	rjmp	.+126    	; 0xdec <__fpcmp_parts_f+0xac>
     d6e:	84 30       	cpi	r24, 0x04	; 4
     d70:	21 f0       	breq	.+8      	; 0xd7a <__fpcmp_parts_f+0x3a>
     d72:	92 30       	cpi	r25, 0x02	; 2
     d74:	31 f4       	brne	.+12     	; 0xd82 <__fpcmp_parts_f+0x42>
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	b9 f1       	breq	.+110    	; 0xde8 <__fpcmp_parts_f+0xa8>
     d7a:	81 81       	ldd	r24, Z+1	; 0x01
     d7c:	88 23       	and	r24, r24
     d7e:	89 f1       	breq	.+98     	; 0xde2 <__fpcmp_parts_f+0xa2>
     d80:	2d c0       	rjmp	.+90     	; 0xddc <__fpcmp_parts_f+0x9c>
     d82:	11 96       	adiw	r26, 0x01	; 1
     d84:	1c 91       	ld	r17, X
     d86:	11 97       	sbiw	r26, 0x01	; 1
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	f1 f0       	breq	.+60     	; 0xdc8 <__fpcmp_parts_f+0x88>
     d8c:	81 81       	ldd	r24, Z+1	; 0x01
     d8e:	18 17       	cp	r17, r24
     d90:	d9 f4       	brne	.+54     	; 0xdc8 <__fpcmp_parts_f+0x88>
     d92:	12 96       	adiw	r26, 0x02	; 2
     d94:	2d 91       	ld	r18, X+
     d96:	3c 91       	ld	r19, X
     d98:	13 97       	sbiw	r26, 0x03	; 3
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	82 17       	cp	r24, r18
     da0:	93 07       	cpc	r25, r19
     da2:	94 f0       	brlt	.+36     	; 0xdc8 <__fpcmp_parts_f+0x88>
     da4:	28 17       	cp	r18, r24
     da6:	39 07       	cpc	r19, r25
     da8:	bc f0       	brlt	.+46     	; 0xdd8 <__fpcmp_parts_f+0x98>
     daa:	14 96       	adiw	r26, 0x04	; 4
     dac:	8d 91       	ld	r24, X+
     dae:	9d 91       	ld	r25, X+
     db0:	0d 90       	ld	r0, X+
     db2:	bc 91       	ld	r27, X
     db4:	a0 2d       	mov	r26, r0
     db6:	24 81       	ldd	r18, Z+4	; 0x04
     db8:	35 81       	ldd	r19, Z+5	; 0x05
     dba:	46 81       	ldd	r20, Z+6	; 0x06
     dbc:	57 81       	ldd	r21, Z+7	; 0x07
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	4a 07       	cpc	r20, r26
     dc4:	5b 07       	cpc	r21, r27
     dc6:	18 f4       	brcc	.+6      	; 0xdce <__fpcmp_parts_f+0x8e>
     dc8:	11 23       	and	r17, r17
     dca:	41 f0       	breq	.+16     	; 0xddc <__fpcmp_parts_f+0x9c>
     dcc:	0a c0       	rjmp	.+20     	; 0xde2 <__fpcmp_parts_f+0xa2>
     dce:	82 17       	cp	r24, r18
     dd0:	93 07       	cpc	r25, r19
     dd2:	a4 07       	cpc	r26, r20
     dd4:	b5 07       	cpc	r27, r21
     dd6:	40 f4       	brcc	.+16     	; 0xde8 <__fpcmp_parts_f+0xa8>
     dd8:	11 23       	and	r17, r17
     dda:	19 f0       	breq	.+6      	; 0xde2 <__fpcmp_parts_f+0xa2>
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	05 c0       	rjmp	.+10     	; 0xdec <__fpcmp_parts_f+0xac>
     de2:	6f ef       	ldi	r22, 0xFF	; 255
     de4:	7f ef       	ldi	r23, 0xFF	; 255
     de6:	02 c0       	rjmp	.+4      	; 0xdec <__fpcmp_parts_f+0xac>
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	cb 01       	movw	r24, r22
     dee:	1f 91       	pop	r17
     df0:	08 95       	ret

00000df2 <ADC_voidInit>:
static void(*ADC_pfNotification)(u16) = NULL;
/* ADC busy flag */
static u8 ADC_u8BusyFlag = 0;

void ADC_voidInit(void)
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
		2- Right Adjust
		3- Disable AutoTrigger
		4- Select CLK/64
		5- Enable ADC
	 */
	CLR_BIT(ADC_u8_ADMUX_REG,7);
     dfa:	a7 e2       	ldi	r26, 0x27	; 39
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e7 e2       	ldi	r30, 0x27	; 39
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8f 77       	andi	r24, 0x7F	; 127
     e06:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
     e08:	a7 e2       	ldi	r26, 0x27	; 39
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e7 e2       	ldi	r30, 0x27	; 39
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	80 64       	ori	r24, 0x40	; 64
     e14:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADMUX_REG,5);
     e16:	a7 e2       	ldi	r26, 0x27	; 39
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e7 e2       	ldi	r30, 0x27	; 39
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	8f 7d       	andi	r24, 0xDF	; 223
     e22:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADCSRA_REG,5);
     e24:	a6 e2       	ldi	r26, 0x26	; 38
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e6 e2       	ldi	r30, 0x26	; 38
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8f 7d       	andi	r24, 0xDF	; 223
     e30:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,2);
     e32:	a6 e2       	ldi	r26, 0x26	; 38
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e6 e2       	ldi	r30, 0x26	; 38
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	84 60       	ori	r24, 0x04	; 4
     e3e:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
     e40:	a6 e2       	ldi	r26, 0x26	; 38
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e6 e2       	ldi	r30, 0x26	; 38
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	82 60       	ori	r24, 0x02	; 2
     e4c:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
     e4e:	a6 e2       	ldi	r26, 0x26	; 38
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e6 e2       	ldi	r30, 0x26	; 38
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8e 7f       	andi	r24, 0xFE	; 254
     e5a:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,7);
     e5c:	a6 e2       	ldi	r26, 0x26	; 38
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e6 e2       	ldi	r30, 0x26	; 38
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	80 68       	ori	r24, 0x80	; 128
     e68:	8c 93       	st	X, r24
}
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <ADC_u8GetDigitalValueSynchNonBlocking>:

u8   ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 * Copy_pu16DigitalValue)
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	28 97       	sbiw	r28, 0x08	; 8
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	8e 83       	std	Y+6, r24	; 0x06
     e86:	78 87       	std	Y+8, r23	; 0x08
     e88:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
     e8e:	19 82       	std	Y+1, r1	; 0x01
     e90:	1a 82       	std	Y+2, r1	; 0x02
     e92:	1b 82       	std	Y+3, r1	; 0x03
     e94:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32) && (Copy_pu16DigitalValue != NULL))
     e96:	8e 81       	ldd	r24, Y+6	; 0x06
     e98:	80 32       	cpi	r24, 0x20	; 32
     e9a:	08 f0       	brcs	.+2      	; 0xe9e <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
     e9c:	5b c0       	rjmp	.+182    	; 0xf54 <ADC_u8GetDigitalValueSynchNonBlocking+0xe4>
     e9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ea0:	98 85       	ldd	r25, Y+8	; 0x08
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	09 f4       	brne	.+2      	; 0xea8 <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
     ea6:	56 c0       	rjmp	.+172    	; 0xf54 <ADC_u8GetDigitalValueSynchNonBlocking+0xe4>
	{
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     ea8:	a7 e2       	ldi	r26, 0x27	; 39
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e7 e2       	ldi	r30, 0x27	; 39
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 7e       	andi	r24, 0xE0	; 224
     eb4:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     eb6:	a7 e2       	ldi	r26, 0x27	; 39
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e7 e2       	ldi	r30, 0x27	; 39
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	90 81       	ld	r25, Z
     ec0:	8e 81       	ldd	r24, Y+6	; 0x06
     ec2:	89 2b       	or	r24, r25
     ec4:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     ec6:	a6 e2       	ldi	r26, 0x26	; 38
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e6 e2       	ldi	r30, 0x26	; 38
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 64       	ori	r24, 0x40	; 64
     ed2:	8c 93       	st	X, r24
     ed4:	0b c0       	rjmp	.+22     	; 0xeec <ADC_u8GetDigitalValueSynchNonBlocking+0x7c>
		/* Wait flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)== 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
		{
			Local_u32TimeOutCounter++;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	ab 81       	ldd	r26, Y+3	; 0x03
     edc:	bc 81       	ldd	r27, Y+4	; 0x04
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	a1 1d       	adc	r26, r1
     ee2:	b1 1d       	adc	r27, r1
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	ab 83       	std	Y+3, r26	; 0x03
     eea:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)== 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
     eec:	e6 e2       	ldi	r30, 0x26	; 38
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	82 95       	swap	r24
     ef4:	8f 70       	andi	r24, 0x0F	; 15
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	81 70       	andi	r24, 0x01	; 1
     efc:	90 70       	andi	r25, 0x00	; 0
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	61 f4       	brne	.+24     	; 0xf1a <ADC_u8GetDigitalValueSynchNonBlocking+0xaa>
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	ab 81       	ldd	r26, Y+3	; 0x03
     f08:	bc 81       	ldd	r27, Y+4	; 0x04
     f0a:	80 35       	cpi	r24, 0x50	; 80
     f0c:	23 ec       	ldi	r18, 0xC3	; 195
     f0e:	92 07       	cpc	r25, r18
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	a2 07       	cpc	r26, r18
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	b2 07       	cpc	r27, r18
     f18:	f0 f2       	brcs	.-68     	; 0xed6 <ADC_u8GetDigitalValueSynchNonBlocking+0x66>
		{
			Local_u32TimeOutCounter++;
		}
		//while(!GET_BIT(ADC_u8_ADCSRA_REG,4));
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
     f1a:	e6 e2       	ldi	r30, 0x26	; 38
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	82 95       	swap	r24
     f22:	8f 70       	andi	r24, 0x0F	; 15
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	81 70       	andi	r24, 0x01	; 1
     f2a:	90 70       	andi	r25, 0x00	; 0
     f2c:	88 23       	and	r24, r24
     f2e:	81 f0       	breq	.+32     	; 0xf50 <ADC_u8GetDigitalValueSynchNonBlocking+0xe0>
		{
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
     f30:	a6 e2       	ldi	r26, 0x26	; 38
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e6 e2       	ldi	r30, 0x26	; 38
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	80 61       	ori	r24, 0x10	; 16
     f3c:	8c 93       	st	X, r24
			/* Read the Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
     f3e:	e4 e2       	ldi	r30, 0x24	; 36
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	91 81       	ldd	r25, Z+1	; 0x01
     f46:	ef 81       	ldd	r30, Y+7	; 0x07
     f48:	f8 85       	ldd	r31, Y+8	; 0x08
     f4a:	91 83       	std	Z+1, r25	; 0x01
     f4c:	80 83       	st	Z, r24
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <ADC_u8GetDigitalValueSynchNonBlocking+0xe6>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
     f50:	1d 82       	std	Y+5, r1	; 0x05
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <ADC_u8GetDigitalValueSynchNonBlocking+0xe6>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f54:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f58:	28 96       	adiw	r28, 0x08	; 8
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <ADC_u8GetDigitalValueAsynch>:
u8   ADC_u8GetDigitalValueAsynch          (u8 Copy_u8ChannelNb,void(*Copy_pfNotification)(u16))
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <ADC_u8GetDigitalValueAsynch+0x6>
     f70:	00 d0       	rcall	.+0      	; 0xf72 <ADC_u8GetDigitalValueAsynch+0x8>
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	8a 83       	std	Y+2, r24	; 0x02
     f78:	7c 83       	std	Y+4, r23	; 0x04
     f7a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32) && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag == 0))
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	80 32       	cpi	r24, 0x20	; 32
     f84:	78 f5       	brcc	.+94     	; 0xfe4 <ADC_u8GetDigitalValueAsynch+0x7a>
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	59 f1       	breq	.+86     	; 0xfe4 <ADC_u8GetDigitalValueAsynch+0x7a>
     f8e:	80 91 76 01 	lds	r24, 0x0176
     f92:	88 23       	and	r24, r24
     f94:	39 f5       	brne	.+78     	; 0xfe4 <ADC_u8GetDigitalValueAsynch+0x7a>
	{
		/* Set Flag to make ADC is Busy */
		ADC_u8BusyFlag = 1;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	80 93 76 01 	sts	0x0176, r24
		/* update Global Pointer to a function */
		ADC_pfNotification = Copy_pfNotification;
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	9c 81       	ldd	r25, Y+4	; 0x04
     fa0:	90 93 75 01 	sts	0x0175, r25
     fa4:	80 93 74 01 	sts	0x0174, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
     fa8:	a6 e2       	ldi	r26, 0x26	; 38
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e6 e2       	ldi	r30, 0x26	; 38
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	88 60       	ori	r24, 0x08	; 8
     fb4:	8c 93       	st	X, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     fb6:	a7 e2       	ldi	r26, 0x27	; 39
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e7 e2       	ldi	r30, 0x27	; 39
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	80 7e       	andi	r24, 0xE0	; 224
     fc2:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     fc4:	a7 e2       	ldi	r26, 0x27	; 39
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e7 e2       	ldi	r30, 0x27	; 39
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	90 81       	ld	r25, Z
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	89 2b       	or	r24, r25
     fd2:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     fd4:	a6 e2       	ldi	r26, 0x26	; 38
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e6 e2       	ldi	r30, 0x26	; 38
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	80 64       	ori	r24, 0x40	; 64
     fe0:	8c 93       	st	X, r24
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <ADC_u8GetDigitalValueAsynch+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     fe4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <ADC_u8GetADCRegValue>:
u8   ADC_u8GetADCRegValue                 (u16 * Copy_pu16ADCValue)
{
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	00 d0       	rcall	.+0      	; 0xffc <ADC_u8GetADCRegValue+0x6>
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	9b 83       	std	Y+3, r25	; 0x03
    1004:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCValue != NULL)
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	9b 81       	ldd	r25, Y+3	; 0x03
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	49 f0       	breq	.+18     	; 0x1024 <ADC_u8GetADCRegValue+0x2e>
	{
		/* Read ADC Register */
		*Copy_pu16ADCValue = ADC_u16_ADC_REG;
    1012:	e4 e2       	ldi	r30, 0x24	; 36
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	91 81       	ldd	r25, Z+1	; 0x01
    101a:	ea 81       	ldd	r30, Y+2	; 0x02
    101c:	fb 81       	ldd	r31, Y+3	; 0x03
    101e:	91 83       	std	Z+1, r25	; 0x01
    1020:	80 83       	st	Z, r24
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <ADC_u8GetADCRegValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1024:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState ;
    1026:	89 81       	ldd	r24, Y+1	; 0x01
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <__vector_16>:

/* Prototype for ADC ISR */
void __vector_16(void)     __attribute__((signal));
void __vector_16(void)
{
    1034:	1f 92       	push	r1
    1036:	0f 92       	push	r0
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	0f 92       	push	r0
    103c:	11 24       	eor	r1, r1
    103e:	2f 93       	push	r18
    1040:	3f 93       	push	r19
    1042:	4f 93       	push	r20
    1044:	5f 93       	push	r21
    1046:	6f 93       	push	r22
    1048:	7f 93       	push	r23
    104a:	8f 93       	push	r24
    104c:	9f 93       	push	r25
    104e:	af 93       	push	r26
    1050:	bf 93       	push	r27
    1052:	ef 93       	push	r30
    1054:	ff 93       	push	r31
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
    105e:	80 91 74 01 	lds	r24, 0x0174
    1062:	90 91 75 01 	lds	r25, 0x0175
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	99 f0       	breq	.+38     	; 0x1090 <__vector_16+0x5c>
	{
		/* Clear Flag */
		ADC_u8BusyFlag = 0;
    106a:	10 92 76 01 	sts	0x0176, r1
		/* Clear PIE of ADC */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
    106e:	a6 e2       	ldi	r26, 0x26	; 38
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e6 e2       	ldi	r30, 0x26	; 38
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	87 7f       	andi	r24, 0xF7	; 247
    107a:	8c 93       	st	X, r24
		/* Calling Notification function */
		ADC_pfNotification(ADC_u16_ADC_REG);
    107c:	20 91 74 01 	lds	r18, 0x0174
    1080:	30 91 75 01 	lds	r19, 0x0175
    1084:	e4 e2       	ldi	r30, 0x24	; 36
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	91 81       	ldd	r25, Z+1	; 0x01
    108c:	f9 01       	movw	r30, r18
    108e:	09 95       	icall
	}
}
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	ff 91       	pop	r31
    1096:	ef 91       	pop	r30
    1098:	bf 91       	pop	r27
    109a:	af 91       	pop	r26
    109c:	9f 91       	pop	r25
    109e:	8f 91       	pop	r24
    10a0:	7f 91       	pop	r23
    10a2:	6f 91       	pop	r22
    10a4:	5f 91       	pop	r21
    10a6:	4f 91       	pop	r20
    10a8:	3f 91       	pop	r19
    10aa:	2f 91       	pop	r18
    10ac:	0f 90       	pop	r0
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	0f 90       	pop	r0
    10b2:	1f 90       	pop	r1
    10b4:	18 95       	reti

000010b6 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit         (void)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
    10be:	ea e3       	ldi	r30, 0x3A	; 58
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	8e e0       	ldi	r24, 0x0E	; 14
    10c4:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
    10c6:	e7 e3       	ldi	r30, 0x37	; 55
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	87 e0       	ldi	r24, 0x07	; 7
    10cc:	80 83       	st	Z, r24
						   DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
    10ce:	e4 e3       	ldi	r30, 0x34	; 52
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	87 e0       	ldi	r24, 0x07	; 7
    10d4:	80 83       	st	Z, r24
						   DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
    10d6:	e1 e3       	ldi	r30, 0x31	; 49
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	8f ef       	ldi	r24, 0xFF	; 255
    10dc:	80 83       	st	Z, r24
						   DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);						   

	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
    10de:	eb e3       	ldi	r30, 0x3B	; 59
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	8e ef       	ldi	r24, 0xFE	; 254
    10e4:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);
											                    
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
    10e6:	e8 e3       	ldi	r30, 0x38	; 56
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	10 82       	st	Z, r1
						   DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);
											 
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
    10ec:	e5 e3       	ldi	r30, 0x35	; 53
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	10 82       	st	Z, r1
						   DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);
											 
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
    10f2:	e2 e3       	ldi	r30, 0x32	; 50
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	10 82       	st	Z, r1
						   DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);
}
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <DIO_u8SetPinDirection>:

u8  DIO_u8SetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinDirection)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	2e 97       	sbiw	r28, 0x0e	; 14
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	8a 83       	std	Y+2, r24	; 0x02
    1114:	6b 83       	std	Y+3, r22	; 0x03
    1116:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))		
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	84 30       	cpi	r24, 0x04	; 4
    1120:	08 f0       	brcs	.+2      	; 0x1124 <DIO_u8SetPinDirection+0x26>
    1122:	0c c1       	rjmp	.+536    	; 0x133c <DIO_u8SetPinDirection+0x23e>
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	88 30       	cpi	r24, 0x08	; 8
    1128:	08 f0       	brcs	.+2      	; 0x112c <DIO_u8SetPinDirection+0x2e>
    112a:	08 c1       	rjmp	.+528    	; 0x133c <DIO_u8SetPinDirection+0x23e>
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	21 f0       	breq	.+8      	; 0x113a <DIO_u8SetPinDirection+0x3c>
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	88 23       	and	r24, r24
    1136:	09 f0       	breq	.+2      	; 0x113a <DIO_u8SetPinDirection+0x3c>
    1138:	01 c1       	rjmp	.+514    	; 0x133c <DIO_u8SetPinDirection+0x23e>
	{
		switch (Copy_u8PortId)
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3e 87       	std	Y+14, r19	; 0x0e
    1142:	2d 87       	std	Y+13, r18	; 0x0d
    1144:	8d 85       	ldd	r24, Y+13	; 0x0d
    1146:	9e 85       	ldd	r25, Y+14	; 0x0e
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	91 05       	cpc	r25, r1
    114c:	09 f4       	brne	.+2      	; 0x1150 <DIO_u8SetPinDirection+0x52>
    114e:	4f c0       	rjmp	.+158    	; 0x11ee <DIO_u8SetPinDirection+0xf0>
    1150:	2d 85       	ldd	r18, Y+13	; 0x0d
    1152:	3e 85       	ldd	r19, Y+14	; 0x0e
    1154:	22 30       	cpi	r18, 0x02	; 2
    1156:	31 05       	cpc	r19, r1
    1158:	2c f4       	brge	.+10     	; 0x1164 <DIO_u8SetPinDirection+0x66>
    115a:	8d 85       	ldd	r24, Y+13	; 0x0d
    115c:	9e 85       	ldd	r25, Y+14	; 0x0e
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	71 f0       	breq	.+28     	; 0x117e <DIO_u8SetPinDirection+0x80>
    1162:	ed c0       	rjmp	.+474    	; 0x133e <DIO_u8SetPinDirection+0x240>
    1164:	2d 85       	ldd	r18, Y+13	; 0x0d
    1166:	3e 85       	ldd	r19, Y+14	; 0x0e
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	31 05       	cpc	r19, r1
    116c:	09 f4       	brne	.+2      	; 0x1170 <DIO_u8SetPinDirection+0x72>
    116e:	77 c0       	rjmp	.+238    	; 0x125e <DIO_u8SetPinDirection+0x160>
    1170:	8d 85       	ldd	r24, Y+13	; 0x0d
    1172:	9e 85       	ldd	r25, Y+14	; 0x0e
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	91 05       	cpc	r25, r1
    1178:	09 f4       	brne	.+2      	; 0x117c <DIO_u8SetPinDirection+0x7e>
    117a:	a9 c0       	rjmp	.+338    	; 0x12ce <DIO_u8SetPinDirection+0x1d0>
    117c:	e0 c0       	rjmp	.+448    	; 0x133e <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinDirection)
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3c 87       	std	Y+12, r19	; 0x0c
    1186:	2b 87       	std	Y+11, r18	; 0x0b
    1188:	8b 85       	ldd	r24, Y+11	; 0x0b
    118a:	9c 85       	ldd	r25, Y+12	; 0x0c
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	d1 f0       	breq	.+52     	; 0x11c4 <DIO_u8SetPinDirection+0xc6>
    1190:	2b 85       	ldd	r18, Y+11	; 0x0b
    1192:	3c 85       	ldd	r19, Y+12	; 0x0c
    1194:	21 30       	cpi	r18, 0x01	; 1
    1196:	31 05       	cpc	r19, r1
    1198:	09 f0       	breq	.+2      	; 0x119c <DIO_u8SetPinDirection+0x9e>
    119a:	d1 c0       	rjmp	.+418    	; 0x133e <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    119c:	aa e3       	ldi	r26, 0x3A	; 58
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	ea e3       	ldi	r30, 0x3A	; 58
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_u8SetPinDirection+0xbc>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_u8SetPinDirection+0xb8>
    11be:	84 2b       	or	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	bd c0       	rjmp	.+378    	; 0x133e <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    11c4:	aa e3       	ldi	r26, 0x3A	; 58
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	ea e3       	ldi	r30, 0x3A	; 58
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_u8SetPinDirection+0xe4>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_u8SetPinDirection+0xe0>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	a8 c0       	rjmp	.+336    	; 0x133e <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinDirection)
    11ee:	8c 81       	ldd	r24, Y+4	; 0x04
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3a 87       	std	Y+10, r19	; 0x0a
    11f6:	29 87       	std	Y+9, r18	; 0x09
    11f8:	89 85       	ldd	r24, Y+9	; 0x09
    11fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	d1 f0       	breq	.+52     	; 0x1234 <DIO_u8SetPinDirection+0x136>
    1200:	29 85       	ldd	r18, Y+9	; 0x09
    1202:	3a 85       	ldd	r19, Y+10	; 0x0a
    1204:	21 30       	cpi	r18, 0x01	; 1
    1206:	31 05       	cpc	r19, r1
    1208:	09 f0       	breq	.+2      	; 0x120c <DIO_u8SetPinDirection+0x10e>
    120a:	99 c0       	rjmp	.+306    	; 0x133e <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    120c:	a7 e3       	ldi	r26, 0x37	; 55
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e7 e3       	ldi	r30, 0x37	; 55
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_u8SetPinDirection+0x12c>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_u8SetPinDirection+0x128>
    122e:	84 2b       	or	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	85 c0       	rjmp	.+266    	; 0x133e <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    1234:	a7 e3       	ldi	r26, 0x37	; 55
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e7 e3       	ldi	r30, 0x37	; 55
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_u8SetPinDirection+0x154>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_u8SetPinDirection+0x150>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	70 c0       	rjmp	.+224    	; 0x133e <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinDirection)
    125e:	8c 81       	ldd	r24, Y+4	; 0x04
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	38 87       	std	Y+8, r19	; 0x08
    1266:	2f 83       	std	Y+7, r18	; 0x07
    1268:	8f 81       	ldd	r24, Y+7	; 0x07
    126a:	98 85       	ldd	r25, Y+8	; 0x08
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	d1 f0       	breq	.+52     	; 0x12a4 <DIO_u8SetPinDirection+0x1a6>
    1270:	2f 81       	ldd	r18, Y+7	; 0x07
    1272:	38 85       	ldd	r19, Y+8	; 0x08
    1274:	21 30       	cpi	r18, 0x01	; 1
    1276:	31 05       	cpc	r19, r1
    1278:	09 f0       	breq	.+2      	; 0x127c <DIO_u8SetPinDirection+0x17e>
    127a:	61 c0       	rjmp	.+194    	; 0x133e <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    127c:	a4 e3       	ldi	r26, 0x34	; 52
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e4 e3       	ldi	r30, 0x34	; 52
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_u8SetPinDirection+0x19c>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_u8SetPinDirection+0x198>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	4d c0       	rjmp	.+154    	; 0x133e <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    12a4:	a4 e3       	ldi	r26, 0x34	; 52
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e4 e3       	ldi	r30, 0x34	; 52
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_u8SetPinDirection+0x1c4>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_u8SetPinDirection+0x1c0>
    12c6:	80 95       	com	r24
    12c8:	84 23       	and	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	38 c0       	rjmp	.+112    	; 0x133e <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinDirection)
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	3e 83       	std	Y+6, r19	; 0x06
    12d6:	2d 83       	std	Y+5, r18	; 0x05
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	9e 81       	ldd	r25, Y+6	; 0x06
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	c9 f0       	breq	.+50     	; 0x1312 <DIO_u8SetPinDirection+0x214>
    12e0:	2d 81       	ldd	r18, Y+5	; 0x05
    12e2:	3e 81       	ldd	r19, Y+6	; 0x06
    12e4:	21 30       	cpi	r18, 0x01	; 1
    12e6:	31 05       	cpc	r19, r1
    12e8:	51 f5       	brne	.+84     	; 0x133e <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    12ea:	a1 e3       	ldi	r26, 0x31	; 49
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e1 e3       	ldi	r30, 0x31	; 49
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_u8SetPinDirection+0x20a>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_u8SetPinDirection+0x206>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	16 c0       	rjmp	.+44     	; 0x133e <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    1312:	a1 e3       	ldi	r26, 0x31	; 49
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e1 e3       	ldi	r30, 0x31	; 49
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_u8SetPinDirection+0x232>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_u8SetPinDirection+0x22e>
    1334:	80 95       	com	r24
    1336:	84 23       	and	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	01 c0       	rjmp	.+2      	; 0x133e <DIO_u8SetPinDirection+0x240>
			break;			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    133c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    133e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1340:	2e 96       	adiw	r28, 0x0e	; 14
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <DIO_u8SetPinValue>:

u8  DIO_u8SetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinValue)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	2e 97       	sbiw	r28, 0x0e	; 14
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	8a 83       	std	Y+2, r24	; 0x02
    1368:	6b 83       	std	Y+3, r22	; 0x03
    136a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	88 30       	cpi	r24, 0x08	; 8
    1374:	08 f0       	brcs	.+2      	; 0x1378 <DIO_u8SetPinValue+0x26>
    1376:	08 c1       	rjmp	.+528    	; 0x1588 <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3e 87       	std	Y+14, r19	; 0x0e
    1380:	2d 87       	std	Y+13, r18	; 0x0d
    1382:	8d 85       	ldd	r24, Y+13	; 0x0d
    1384:	9e 85       	ldd	r25, Y+14	; 0x0e
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	91 05       	cpc	r25, r1
    138a:	09 f4       	brne	.+2      	; 0x138e <DIO_u8SetPinValue+0x3c>
    138c:	50 c0       	rjmp	.+160    	; 0x142e <DIO_u8SetPinValue+0xdc>
    138e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1390:	3e 85       	ldd	r19, Y+14	; 0x0e
    1392:	22 30       	cpi	r18, 0x02	; 2
    1394:	31 05       	cpc	r19, r1
    1396:	2c f4       	brge	.+10     	; 0x13a2 <DIO_u8SetPinValue+0x50>
    1398:	8d 85       	ldd	r24, Y+13	; 0x0d
    139a:	9e 85       	ldd	r25, Y+14	; 0x0e
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	71 f0       	breq	.+28     	; 0x13bc <DIO_u8SetPinValue+0x6a>
    13a0:	f1 c0       	rjmp	.+482    	; 0x1584 <DIO_u8SetPinValue+0x232>
    13a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    13a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    13a6:	22 30       	cpi	r18, 0x02	; 2
    13a8:	31 05       	cpc	r19, r1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <DIO_u8SetPinValue+0x5c>
    13ac:	79 c0       	rjmp	.+242    	; 0x14a0 <DIO_u8SetPinValue+0x14e>
    13ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b2:	83 30       	cpi	r24, 0x03	; 3
    13b4:	91 05       	cpc	r25, r1
    13b6:	09 f4       	brne	.+2      	; 0x13ba <DIO_u8SetPinValue+0x68>
    13b8:	ac c0       	rjmp	.+344    	; 0x1512 <DIO_u8SetPinValue+0x1c0>
    13ba:	e4 c0       	rjmp	.+456    	; 0x1584 <DIO_u8SetPinValue+0x232>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinValue)
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	3c 87       	std	Y+12, r19	; 0x0c
    13c4:	2b 87       	std	Y+11, r18	; 0x0b
    13c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    13c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	c9 f0       	breq	.+50     	; 0x1400 <DIO_u8SetPinValue+0xae>
    13ce:	2b 85       	ldd	r18, Y+11	; 0x0b
    13d0:	3c 85       	ldd	r19, Y+12	; 0x0c
    13d2:	21 30       	cpi	r18, 0x01	; 1
    13d4:	31 05       	cpc	r19, r1
    13d6:	49 f5       	brne	.+82     	; 0x142a <DIO_u8SetPinValue+0xd8>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    13d8:	ab e3       	ldi	r26, 0x3B	; 59
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	eb e3       	ldi	r30, 0x3B	; 59
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 2e       	mov	r0, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO_u8SetPinValue+0xa4>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	0a 94       	dec	r0
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO_u8SetPinValue+0xa0>
    13fa:	84 2b       	or	r24, r20
    13fc:	8c 93       	st	X, r24
    13fe:	c5 c0       	rjmp	.+394    	; 0x158a <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    1400:	ab e3       	ldi	r26, 0x3B	; 59
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	eb e3       	ldi	r30, 0x3B	; 59
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 2e       	mov	r0, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_u8SetPinValue+0xcc>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_u8SetPinValue+0xc8>
    1422:	80 95       	com	r24
    1424:	84 23       	and	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	b0 c0       	rjmp	.+352    	; 0x158a <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    142a:	19 82       	std	Y+1, r1	; 0x01
    142c:	ae c0       	rjmp	.+348    	; 0x158a <DIO_u8SetPinValue+0x238>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinValue)
    142e:	8c 81       	ldd	r24, Y+4	; 0x04
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	3a 87       	std	Y+10, r19	; 0x0a
    1436:	29 87       	std	Y+9, r18	; 0x09
    1438:	89 85       	ldd	r24, Y+9	; 0x09
    143a:	9a 85       	ldd	r25, Y+10	; 0x0a
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	c9 f0       	breq	.+50     	; 0x1472 <DIO_u8SetPinValue+0x120>
    1440:	29 85       	ldd	r18, Y+9	; 0x09
    1442:	3a 85       	ldd	r19, Y+10	; 0x0a
    1444:	21 30       	cpi	r18, 0x01	; 1
    1446:	31 05       	cpc	r19, r1
    1448:	49 f5       	brne	.+82     	; 0x149c <DIO_u8SetPinValue+0x14a>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    144a:	a8 e3       	ldi	r26, 0x38	; 56
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e8 e3       	ldi	r30, 0x38	; 56
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <DIO_u8SetPinValue+0x116>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <DIO_u8SetPinValue+0x112>
    146c:	84 2b       	or	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	8c c0       	rjmp	.+280    	; 0x158a <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1472:	a8 e3       	ldi	r26, 0x38	; 56
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e8 e3       	ldi	r30, 0x38	; 56
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 2e       	mov	r0, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <DIO_u8SetPinValue+0x13e>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <DIO_u8SetPinValue+0x13a>
    1494:	80 95       	com	r24
    1496:	84 23       	and	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	77 c0       	rjmp	.+238    	; 0x158a <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    149c:	19 82       	std	Y+1, r1	; 0x01
    149e:	75 c0       	rjmp	.+234    	; 0x158a <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinValue)
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	38 87       	std	Y+8, r19	; 0x08
    14a8:	2f 83       	std	Y+7, r18	; 0x07
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	c9 f0       	breq	.+50     	; 0x14e4 <DIO_u8SetPinValue+0x192>
    14b2:	2f 81       	ldd	r18, Y+7	; 0x07
    14b4:	38 85       	ldd	r19, Y+8	; 0x08
    14b6:	21 30       	cpi	r18, 0x01	; 1
    14b8:	31 05       	cpc	r19, r1
    14ba:	49 f5       	brne	.+82     	; 0x150e <DIO_u8SetPinValue+0x1bc>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    14bc:	a5 e3       	ldi	r26, 0x35	; 53
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e5 e3       	ldi	r30, 0x35	; 53
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <DIO_u8SetPinValue+0x188>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <DIO_u8SetPinValue+0x184>
    14de:	84 2b       	or	r24, r20
    14e0:	8c 93       	st	X, r24
    14e2:	53 c0       	rjmp	.+166    	; 0x158a <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    14e4:	a5 e3       	ldi	r26, 0x35	; 53
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e3       	ldi	r30, 0x35	; 53
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_u8SetPinValue+0x1b0>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_u8SetPinValue+0x1ac>
    1506:	80 95       	com	r24
    1508:	84 23       	and	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	3e c0       	rjmp	.+124    	; 0x158a <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    150e:	19 82       	std	Y+1, r1	; 0x01
    1510:	3c c0       	rjmp	.+120    	; 0x158a <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinValue)
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3e 83       	std	Y+6, r19	; 0x06
    151a:	2d 83       	std	Y+5, r18	; 0x05
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	c9 f0       	breq	.+50     	; 0x1556 <DIO_u8SetPinValue+0x204>
    1524:	2d 81       	ldd	r18, Y+5	; 0x05
    1526:	3e 81       	ldd	r19, Y+6	; 0x06
    1528:	21 30       	cpi	r18, 0x01	; 1
    152a:	31 05       	cpc	r19, r1
    152c:	49 f5       	brne	.+82     	; 0x1580 <DIO_u8SetPinValue+0x22e>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    152e:	a2 e3       	ldi	r26, 0x32	; 50
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e2 e3       	ldi	r30, 0x32	; 50
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <DIO_u8SetPinValue+0x1fa>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <DIO_u8SetPinValue+0x1f6>
    1550:	84 2b       	or	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	1a c0       	rjmp	.+52     	; 0x158a <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1556:	a2 e3       	ldi	r26, 0x32	; 50
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e2 e3       	ldi	r30, 0x32	; 50
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <DIO_u8SetPinValue+0x222>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <DIO_u8SetPinValue+0x21e>
    1578:	80 95       	com	r24
    157a:	84 23       	and	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	05 c0       	rjmp	.+10     	; 0x158a <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    1580:	19 82       	std	Y+1, r1	; 0x01
    1582:	03 c0       	rjmp	.+6      	; 0x158a <DIO_u8SetPinValue+0x238>
				}		
			break;
			default :
				Local_u8ErrorState = STD_TYPES_NOK;
    1584:	19 82       	std	Y+1, r1	; 0x01
    1586:	01 c0       	rjmp	.+2      	; 0x158a <DIO_u8SetPinValue+0x238>
		}
			
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1588:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    158a:	89 81       	ldd	r24, Y+1	; 0x01
}
    158c:	2e 96       	adiw	r28, 0x0e	; 14
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <DIO_u8GetPinValue>:

u8  DIO_u8GetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 * Copy_pu8ReturnedPinValue)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	28 97       	sbiw	r28, 0x08	; 8
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	8b 83       	std	Y+3, r24	; 0x03
    15b4:	6c 83       	std	Y+4, r22	; 0x04
    15b6:	5e 83       	std	Y+6, r21	; 0x06
    15b8:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	84 30       	cpi	r24, 0x04	; 4
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <DIO_u8GetPinValue+0x28>
    15c4:	9f c0       	rjmp	.+318    	; 0x1704 <DIO_u8GetPinValue+0x166>
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	88 30       	cpi	r24, 0x08	; 8
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <DIO_u8GetPinValue+0x30>
    15cc:	9b c0       	rjmp	.+310    	; 0x1704 <DIO_u8GetPinValue+0x166>
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <DIO_u8GetPinValue+0x3a>
    15d6:	96 c0       	rjmp	.+300    	; 0x1704 <DIO_u8GetPinValue+0x166>
	{
		switch (Copy_u8PortId)
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	38 87       	std	Y+8, r19	; 0x08
    15e0:	2f 83       	std	Y+7, r18	; 0x07
    15e2:	4f 81       	ldd	r20, Y+7	; 0x07
    15e4:	58 85       	ldd	r21, Y+8	; 0x08
    15e6:	41 30       	cpi	r20, 0x01	; 1
    15e8:	51 05       	cpc	r21, r1
    15ea:	a9 f1       	breq	.+106    	; 0x1656 <DIO_u8GetPinValue+0xb8>
    15ec:	8f 81       	ldd	r24, Y+7	; 0x07
    15ee:	98 85       	ldd	r25, Y+8	; 0x08
    15f0:	82 30       	cpi	r24, 0x02	; 2
    15f2:	91 05       	cpc	r25, r1
    15f4:	34 f4       	brge	.+12     	; 0x1602 <DIO_u8GetPinValue+0x64>
    15f6:	2f 81       	ldd	r18, Y+7	; 0x07
    15f8:	38 85       	ldd	r19, Y+8	; 0x08
    15fa:	21 15       	cp	r18, r1
    15fc:	31 05       	cpc	r19, r1
    15fe:	71 f0       	breq	.+28     	; 0x161c <DIO_u8GetPinValue+0x7e>
    1600:	82 c0       	rjmp	.+260    	; 0x1706 <DIO_u8GetPinValue+0x168>
    1602:	4f 81       	ldd	r20, Y+7	; 0x07
    1604:	58 85       	ldd	r21, Y+8	; 0x08
    1606:	42 30       	cpi	r20, 0x02	; 2
    1608:	51 05       	cpc	r21, r1
    160a:	09 f4       	brne	.+2      	; 0x160e <DIO_u8GetPinValue+0x70>
    160c:	41 c0       	rjmp	.+130    	; 0x1690 <DIO_u8GetPinValue+0xf2>
    160e:	8f 81       	ldd	r24, Y+7	; 0x07
    1610:	98 85       	ldd	r25, Y+8	; 0x08
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	91 05       	cpc	r25, r1
    1616:	09 f4       	brne	.+2      	; 0x161a <DIO_u8GetPinValue+0x7c>
    1618:	58 c0       	rjmp	.+176    	; 0x16ca <DIO_u8GetPinValue+0x12c>
    161a:	75 c0       	rjmp	.+234    	; 0x1706 <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA:
				Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    161c:	e9 e3       	ldi	r30, 0x39	; 57
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a9 01       	movw	r20, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_u8GetPinValue+0x96>
    1630:	55 95       	asr	r21
    1632:	47 95       	ror	r20
    1634:	8a 95       	dec	r24
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <DIO_u8GetPinValue+0x92>
    1638:	ca 01       	movw	r24, r20
    163a:	81 70       	andi	r24, 0x01	; 1
    163c:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	88 23       	and	r24, r24
    1642:	21 f4       	brne	.+8      	; 0x164c <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1644:	ed 81       	ldd	r30, Y+5	; 0x05
    1646:	fe 81       	ldd	r31, Y+6	; 0x06
    1648:	10 82       	st	Z, r1
    164a:	5d c0       	rjmp	.+186    	; 0x1706 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    164c:	ed 81       	ldd	r30, Y+5	; 0x05
    164e:	fe 81       	ldd	r31, Y+6	; 0x06
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	80 83       	st	Z, r24
    1654:	58 c0       	rjmp	.+176    	; 0x1706 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTB:
				Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    1656:	e6 e3       	ldi	r30, 0x36	; 54
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	a9 01       	movw	r20, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <DIO_u8GetPinValue+0xd0>
    166a:	55 95       	asr	r21
    166c:	47 95       	ror	r20
    166e:	8a 95       	dec	r24
    1670:	e2 f7       	brpl	.-8      	; 0x166a <DIO_u8GetPinValue+0xcc>
    1672:	ca 01       	movw	r24, r20
    1674:	81 70       	andi	r24, 0x01	; 1
    1676:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	88 23       	and	r24, r24
    167c:	21 f4       	brne	.+8      	; 0x1686 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    167e:	ed 81       	ldd	r30, Y+5	; 0x05
    1680:	fe 81       	ldd	r31, Y+6	; 0x06
    1682:	10 82       	st	Z, r1
    1684:	40 c0       	rjmp	.+128    	; 0x1706 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1686:	ed 81       	ldd	r30, Y+5	; 0x05
    1688:	fe 81       	ldd	r31, Y+6	; 0x06
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	80 83       	st	Z, r24
    168e:	3b c0       	rjmp	.+118    	; 0x1706 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTC:
				Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1690:	e3 e3       	ldi	r30, 0x33	; 51
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	88 2f       	mov	r24, r24
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a9 01       	movw	r20, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <DIO_u8GetPinValue+0x10a>
    16a4:	55 95       	asr	r21
    16a6:	47 95       	ror	r20
    16a8:	8a 95       	dec	r24
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <DIO_u8GetPinValue+0x106>
    16ac:	ca 01       	movw	r24, r20
    16ae:	81 70       	andi	r24, 0x01	; 1
    16b0:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	88 23       	and	r24, r24
    16b6:	21 f4       	brne	.+8      	; 0x16c0 <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    16b8:	ed 81       	ldd	r30, Y+5	; 0x05
    16ba:	fe 81       	ldd	r31, Y+6	; 0x06
    16bc:	10 82       	st	Z, r1
    16be:	23 c0       	rjmp	.+70     	; 0x1706 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    16c0:	ed 81       	ldd	r30, Y+5	; 0x05
    16c2:	fe 81       	ldd	r31, Y+6	; 0x06
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	80 83       	st	Z, r24
    16c8:	1e c0       	rjmp	.+60     	; 0x1706 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTD:
				Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    16ca:	e0 e3       	ldi	r30, 0x30	; 48
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	88 2f       	mov	r24, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a9 01       	movw	r20, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <DIO_u8GetPinValue+0x144>
    16de:	55 95       	asr	r21
    16e0:	47 95       	ror	r20
    16e2:	8a 95       	dec	r24
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <DIO_u8GetPinValue+0x140>
    16e6:	ca 01       	movw	r24, r20
    16e8:	81 70       	andi	r24, 0x01	; 1
    16ea:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	88 23       	and	r24, r24
    16f0:	21 f4       	brne	.+8      	; 0x16fa <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    16f2:	ed 81       	ldd	r30, Y+5	; 0x05
    16f4:	fe 81       	ldd	r31, Y+6	; 0x06
    16f6:	10 82       	st	Z, r1
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    16fa:	ed 81       	ldd	r30, Y+5	; 0x05
    16fc:	fe 81       	ldd	r31, Y+6	; 0x06
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	80 83       	st	Z, r24
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <DIO_u8GetPinValue+0x168>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1704:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1708:	28 96       	adiw	r28, 0x08	; 8
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <DIO_u8SetPortDirection>:

u8  DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	2d 97       	sbiw	r28, 0x0d	; 13
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	8a 83       	std	Y+2, r24	; 0x02
    1730:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	21 f0       	breq	.+8      	; 0x1744 <DIO_u8SetPortDirection+0x2a>
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	88 23       	and	r24, r24
    1740:	09 f0       	breq	.+2      	; 0x1744 <DIO_u8SetPortDirection+0x2a>
    1742:	7f c0       	rjmp	.+254    	; 0x1842 <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	3d 87       	std	Y+13, r19	; 0x0d
    174c:	2c 87       	std	Y+12, r18	; 0x0c
    174e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1750:	9d 85       	ldd	r25, Y+13	; 0x0d
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	91 05       	cpc	r25, r1
    1756:	71 f1       	breq	.+92     	; 0x17b4 <DIO_u8SetPortDirection+0x9a>
    1758:	2c 85       	ldd	r18, Y+12	; 0x0c
    175a:	3d 85       	ldd	r19, Y+13	; 0x0d
    175c:	22 30       	cpi	r18, 0x02	; 2
    175e:	31 05       	cpc	r19, r1
    1760:	2c f4       	brge	.+10     	; 0x176c <DIO_u8SetPortDirection+0x52>
    1762:	8c 85       	ldd	r24, Y+12	; 0x0c
    1764:	9d 85       	ldd	r25, Y+13	; 0x0d
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	69 f0       	breq	.+26     	; 0x1784 <DIO_u8SetPortDirection+0x6a>
    176a:	69 c0       	rjmp	.+210    	; 0x183e <DIO_u8SetPortDirection+0x124>
    176c:	2c 85       	ldd	r18, Y+12	; 0x0c
    176e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1770:	22 30       	cpi	r18, 0x02	; 2
    1772:	31 05       	cpc	r19, r1
    1774:	b1 f1       	breq	.+108    	; 0x17e2 <DIO_u8SetPortDirection+0xc8>
    1776:	8c 85       	ldd	r24, Y+12	; 0x0c
    1778:	9d 85       	ldd	r25, Y+13	; 0x0d
    177a:	83 30       	cpi	r24, 0x03	; 3
    177c:	91 05       	cpc	r25, r1
    177e:	09 f4       	brne	.+2      	; 0x1782 <DIO_u8SetPortDirection+0x68>
    1780:	47 c0       	rjmp	.+142    	; 0x1810 <DIO_u8SetPortDirection+0xf6>
    1782:	5d c0       	rjmp	.+186    	; 0x183e <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PortDirection)
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	3b 87       	std	Y+11, r19	; 0x0b
    178c:	2a 87       	std	Y+10, r18	; 0x0a
    178e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1790:	9b 85       	ldd	r25, Y+11	; 0x0b
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	59 f0       	breq	.+22     	; 0x17ac <DIO_u8SetPortDirection+0x92>
    1796:	2a 85       	ldd	r18, Y+10	; 0x0a
    1798:	3b 85       	ldd	r19, Y+11	; 0x0b
    179a:	21 30       	cpi	r18, 0x01	; 1
    179c:	31 05       	cpc	r19, r1
    179e:	09 f0       	breq	.+2      	; 0x17a2 <DIO_u8SetPortDirection+0x88>
    17a0:	51 c0       	rjmp	.+162    	; 0x1844 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xff;break;
    17a2:	ea e3       	ldi	r30, 0x3A	; 58
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	8f ef       	ldi	r24, 0xFF	; 255
    17a8:	80 83       	st	Z, r24
    17aa:	4c c0       	rjmp	.+152    	; 0x1844 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break;
    17ac:	ea e3       	ldi	r30, 0x3A	; 58
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	10 82       	st	Z, r1
    17b2:	48 c0       	rjmp	.+144    	; 0x1844 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PortDirection)
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	39 87       	std	Y+9, r19	; 0x09
    17bc:	28 87       	std	Y+8, r18	; 0x08
    17be:	88 85       	ldd	r24, Y+8	; 0x08
    17c0:	99 85       	ldd	r25, Y+9	; 0x09
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	51 f0       	breq	.+20     	; 0x17da <DIO_u8SetPortDirection+0xc0>
    17c6:	28 85       	ldd	r18, Y+8	; 0x08
    17c8:	39 85       	ldd	r19, Y+9	; 0x09
    17ca:	21 30       	cpi	r18, 0x01	; 1
    17cc:	31 05       	cpc	r19, r1
    17ce:	d1 f5       	brne	.+116    	; 0x1844 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xff;break;
    17d0:	e7 e3       	ldi	r30, 0x37	; 55
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	80 83       	st	Z, r24
    17d8:	35 c0       	rjmp	.+106    	; 0x1844 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break;
    17da:	e7 e3       	ldi	r30, 0x37	; 55
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	10 82       	st	Z, r1
    17e0:	31 c0       	rjmp	.+98     	; 0x1844 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PortDirection)
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	3f 83       	std	Y+7, r19	; 0x07
    17ea:	2e 83       	std	Y+6, r18	; 0x06
    17ec:	8e 81       	ldd	r24, Y+6	; 0x06
    17ee:	9f 81       	ldd	r25, Y+7	; 0x07
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	51 f0       	breq	.+20     	; 0x1808 <DIO_u8SetPortDirection+0xee>
    17f4:	2e 81       	ldd	r18, Y+6	; 0x06
    17f6:	3f 81       	ldd	r19, Y+7	; 0x07
    17f8:	21 30       	cpi	r18, 0x01	; 1
    17fa:	31 05       	cpc	r19, r1
    17fc:	19 f5       	brne	.+70     	; 0x1844 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xff;break;
    17fe:	e4 e3       	ldi	r30, 0x34	; 52
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	8f ef       	ldi	r24, 0xFF	; 255
    1804:	80 83       	st	Z, r24
    1806:	1e c0       	rjmp	.+60     	; 0x1844 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break;
    1808:	e4 e3       	ldi	r30, 0x34	; 52
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	10 82       	st	Z, r1
    180e:	1a c0       	rjmp	.+52     	; 0x1844 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PortDirection)
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	3d 83       	std	Y+5, r19	; 0x05
    1818:	2c 83       	std	Y+4, r18	; 0x04
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	9d 81       	ldd	r25, Y+5	; 0x05
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	51 f0       	breq	.+20     	; 0x1836 <DIO_u8SetPortDirection+0x11c>
    1822:	2c 81       	ldd	r18, Y+4	; 0x04
    1824:	3d 81       	ldd	r19, Y+5	; 0x05
    1826:	21 30       	cpi	r18, 0x01	; 1
    1828:	31 05       	cpc	r19, r1
    182a:	61 f4       	brne	.+24     	; 0x1844 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xff;break;
    182c:	e1 e3       	ldi	r30, 0x31	; 49
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	8f ef       	ldi	r24, 0xFF	; 255
    1832:	80 83       	st	Z, r24
    1834:	07 c0       	rjmp	.+14     	; 0x1844 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break;
    1836:	e1 e3       	ldi	r30, 0x31	; 49
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	10 82       	st	Z, r1
    183c:	03 c0       	rjmp	.+6      	; 0x1844 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			default :Local_u8ErrorState = STD_TYPES_NOK;
    183e:	19 82       	std	Y+1, r1	; 0x01
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <DIO_u8SetPortDirection+0x12a>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1842:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
}
    1846:	2d 96       	adiw	r28, 0x0d	; 13
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <DIO_u8SetPortValue>:

u8  DIO_u8SetPortValue    (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	00 d0       	rcall	.+0      	; 0x185e <DIO_u8SetPortValue+0x6>
    185e:	00 d0       	rcall	.+0      	; 0x1860 <DIO_u8SetPortValue+0x8>
    1860:	0f 92       	push	r0
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	8a 83       	std	Y+2, r24	; 0x02
    1868:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	3d 83       	std	Y+5, r19	; 0x05
    1876:	2c 83       	std	Y+4, r18	; 0x04
    1878:	8c 81       	ldd	r24, Y+4	; 0x04
    187a:	9d 81       	ldd	r25, Y+5	; 0x05
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	91 05       	cpc	r25, r1
    1880:	d1 f0       	breq	.+52     	; 0x18b6 <DIO_u8SetPortValue+0x5e>
    1882:	2c 81       	ldd	r18, Y+4	; 0x04
    1884:	3d 81       	ldd	r19, Y+5	; 0x05
    1886:	22 30       	cpi	r18, 0x02	; 2
    1888:	31 05       	cpc	r19, r1
    188a:	2c f4       	brge	.+10     	; 0x1896 <DIO_u8SetPortValue+0x3e>
    188c:	8c 81       	ldd	r24, Y+4	; 0x04
    188e:	9d 81       	ldd	r25, Y+5	; 0x05
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	61 f0       	breq	.+24     	; 0x18ac <DIO_u8SetPortValue+0x54>
    1894:	1f c0       	rjmp	.+62     	; 0x18d4 <DIO_u8SetPortValue+0x7c>
    1896:	2c 81       	ldd	r18, Y+4	; 0x04
    1898:	3d 81       	ldd	r19, Y+5	; 0x05
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	81 f0       	breq	.+32     	; 0x18c0 <DIO_u8SetPortValue+0x68>
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	83 30       	cpi	r24, 0x03	; 3
    18a6:	91 05       	cpc	r25, r1
    18a8:	81 f0       	breq	.+32     	; 0x18ca <DIO_u8SetPortValue+0x72>
    18aa:	14 c0       	rjmp	.+40     	; 0x18d4 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    18ac:	eb e3       	ldi	r30, 0x3B	; 59
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	80 83       	st	Z, r24
    18b4:	10 c0       	rjmp	.+32     	; 0x18d6 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    18b6:	e8 e3       	ldi	r30, 0x38	; 56
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	80 83       	st	Z, r24
    18be:	0b c0       	rjmp	.+22     	; 0x18d6 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    18c0:	e5 e3       	ldi	r30, 0x35	; 53
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	80 83       	st	Z, r24
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    18ca:	e2 e3       	ldi	r30, 0x32	; 50
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	80 83       	st	Z, r24
    18d2:	01 c0       	rjmp	.+2      	; 0x18d6 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState = STD_TYPES_NOK;
    18d4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <DIO_u8GetPortValue>:

u8  DIO_u8GetPortValue    (u8 Copy_u8PortId, u8 * Copy_pu8ReturnedPortValue)
{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <DIO_u8GetPortValue+0x6>
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <DIO_u8GetPortValue+0x8>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <DIO_u8GetPortValue+0xa>
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	8a 83       	std	Y+2, r24	; 0x02
    18f8:	7c 83       	std	Y+4, r23	; 0x04
    18fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_pu8ReturnedPortValue != NULL)
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	e9 f1       	breq	.+122    	; 0x1982 <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	3e 83       	std	Y+6, r19	; 0x06
    1910:	2d 83       	std	Y+5, r18	; 0x05
    1912:	8d 81       	ldd	r24, Y+5	; 0x05
    1914:	9e 81       	ldd	r25, Y+6	; 0x06
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	91 05       	cpc	r25, r1
    191a:	e1 f0       	breq	.+56     	; 0x1954 <DIO_u8GetPortValue+0x6c>
    191c:	2d 81       	ldd	r18, Y+5	; 0x05
    191e:	3e 81       	ldd	r19, Y+6	; 0x06
    1920:	22 30       	cpi	r18, 0x02	; 2
    1922:	31 05       	cpc	r19, r1
    1924:	2c f4       	brge	.+10     	; 0x1930 <DIO_u8GetPortValue+0x48>
    1926:	8d 81       	ldd	r24, Y+5	; 0x05
    1928:	9e 81       	ldd	r25, Y+6	; 0x06
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	61 f0       	breq	.+24     	; 0x1946 <DIO_u8GetPortValue+0x5e>
    192e:	27 c0       	rjmp	.+78     	; 0x197e <DIO_u8GetPortValue+0x96>
    1930:	2d 81       	ldd	r18, Y+5	; 0x05
    1932:	3e 81       	ldd	r19, Y+6	; 0x06
    1934:	22 30       	cpi	r18, 0x02	; 2
    1936:	31 05       	cpc	r19, r1
    1938:	a1 f0       	breq	.+40     	; 0x1962 <DIO_u8GetPortValue+0x7a>
    193a:	8d 81       	ldd	r24, Y+5	; 0x05
    193c:	9e 81       	ldd	r25, Y+6	; 0x06
    193e:	83 30       	cpi	r24, 0x03	; 3
    1940:	91 05       	cpc	r25, r1
    1942:	b1 f0       	breq	.+44     	; 0x1970 <DIO_u8GetPortValue+0x88>
    1944:	1c c0       	rjmp	.+56     	; 0x197e <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    1946:	e9 e3       	ldi	r30, 0x39	; 57
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	eb 81       	ldd	r30, Y+3	; 0x03
    194e:	fc 81       	ldd	r31, Y+4	; 0x04
    1950:	80 83       	st	Z, r24
    1952:	18 c0       	rjmp	.+48     	; 0x1984 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    1954:	e6 e3       	ldi	r30, 0x36	; 54
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	eb 81       	ldd	r30, Y+3	; 0x03
    195c:	fc 81       	ldd	r31, Y+4	; 0x04
    195e:	80 83       	st	Z, r24
    1960:	11 c0       	rjmp	.+34     	; 0x1984 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    1962:	e3 e3       	ldi	r30, 0x33	; 51
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	eb 81       	ldd	r30, Y+3	; 0x03
    196a:	fc 81       	ldd	r31, Y+4	; 0x04
    196c:	80 83       	st	Z, r24
    196e:	0a c0       	rjmp	.+20     	; 0x1984 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    1970:	e0 e3       	ldi	r30, 0x30	; 48
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	eb 81       	ldd	r30, Y+3	; 0x03
    1978:	fc 81       	ldd	r31, Y+4	; 0x04
    197a:	80 83       	st	Z, r24
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <DIO_u8GetPortValue+0x9c>
			default : Local_u8ErrorState = STD_TYPES_NOK;
    197e:	19 82       	std	Y+1, r1	; 0x01
    1980:	01 c0       	rjmp	.+2      	; 0x1984 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1982:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	26 96       	adiw	r28, 0x06	; 6
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <LCD_voidInit>:
/***************************************************************************************/
/* Description! Apply initialization sequence for LCD module                           */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidInit(void) {
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	c4 55       	subi	r28, 0x54	; 84
    19a6:	d0 40       	sbci	r29, 0x00	; 0
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	fe 01       	movw	r30, r28
    19b4:	ef 5a       	subi	r30, 0xAF	; 175
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	a0 ef       	ldi	r26, 0xF0	; 240
    19be:	b1 e4       	ldi	r27, 0x41	; 65
    19c0:	80 83       	st	Z, r24
    19c2:	91 83       	std	Z+1, r25	; 0x01
    19c4:	a2 83       	std	Z+2, r26	; 0x02
    19c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c8:	8e 01       	movw	r16, r28
    19ca:	03 5b       	subi	r16, 0xB3	; 179
    19cc:	1f 4f       	sbci	r17, 0xFF	; 255
    19ce:	fe 01       	movw	r30, r28
    19d0:	ef 5a       	subi	r30, 0xAF	; 175
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	60 81       	ld	r22, Z
    19d6:	71 81       	ldd	r23, Z+1	; 0x01
    19d8:	82 81       	ldd	r24, Z+2	; 0x02
    19da:	93 81       	ldd	r25, Z+3	; 0x03
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	4a ef       	ldi	r20, 0xFA	; 250
    19e2:	54 e4       	ldi	r21, 0x44	; 68
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	f8 01       	movw	r30, r16
    19ee:	80 83       	st	Z, r24
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	a2 83       	std	Z+2, r26	; 0x02
    19f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19f6:	fe 01       	movw	r30, r28
    19f8:	e3 5b       	subi	r30, 0xB3	; 179
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	60 81       	ld	r22, Z
    19fe:	71 81       	ldd	r23, Z+1	; 0x01
    1a00:	82 81       	ldd	r24, Z+2	; 0x02
    1a02:	93 81       	ldd	r25, Z+3	; 0x03
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e8       	ldi	r20, 0x80	; 128
    1a0a:	5f e3       	ldi	r21, 0x3F	; 63
    1a0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a10:	88 23       	and	r24, r24
    1a12:	44 f4       	brge	.+16     	; 0x1a24 <LCD_voidInit+0x8c>
		__ticks = 1;
    1a14:	fe 01       	movw	r30, r28
    1a16:	e5 5b       	subi	r30, 0xB5	; 181
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	80 83       	st	Z, r24
    1a22:	64 c0       	rjmp	.+200    	; 0x1aec <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1a24:	fe 01       	movw	r30, r28
    1a26:	e3 5b       	subi	r30, 0xB3	; 179
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	60 81       	ld	r22, Z
    1a2c:	71 81       	ldd	r23, Z+1	; 0x01
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	93 81       	ldd	r25, Z+3	; 0x03
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	3f ef       	ldi	r19, 0xFF	; 255
    1a36:	4f e7       	ldi	r20, 0x7F	; 127
    1a38:	57 e4       	ldi	r21, 0x47	; 71
    1a3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a3e:	18 16       	cp	r1, r24
    1a40:	0c f0       	brlt	.+2      	; 0x1a44 <LCD_voidInit+0xac>
    1a42:	43 c0       	rjmp	.+134    	; 0x1aca <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a44:	fe 01       	movw	r30, r28
    1a46:	ef 5a       	subi	r30, 0xAF	; 175
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	60 81       	ld	r22, Z
    1a4c:	71 81       	ldd	r23, Z+1	; 0x01
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	93 81       	ldd	r25, Z+3	; 0x03
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e2       	ldi	r20, 0x20	; 32
    1a58:	51 e4       	ldi	r21, 0x41	; 65
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	8e 01       	movw	r16, r28
    1a64:	05 5b       	subi	r16, 0xB5	; 181
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
    1a68:	bc 01       	movw	r22, r24
    1a6a:	cd 01       	movw	r24, r26
    1a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	f8 01       	movw	r30, r16
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	80 83       	st	Z, r24
    1a7a:	1f c0       	rjmp	.+62     	; 0x1aba <LCD_voidInit+0x122>
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e7 5b       	subi	r30, 0xB7	; 183
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	88 ec       	ldi	r24, 0xC8	; 200
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e7 5b       	subi	r30, 0xB7	; 183
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	80 81       	ld	r24, Z
    1a92:	91 81       	ldd	r25, Z+1	; 0x01
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <LCD_voidInit+0xfc>
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e7 5b       	subi	r30, 0xB7	; 183
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	91 83       	std	Z+1, r25	; 0x01
    1aa0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa2:	de 01       	movw	r26, r28
    1aa4:	a5 5b       	subi	r26, 0xB5	; 181
    1aa6:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e5 5b       	subi	r30, 0xB5	; 181
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	11 96       	adiw	r26, 0x01	; 1
    1ab6:	9c 93       	st	X, r25
    1ab8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	fe 01       	movw	r30, r28
    1abc:	e5 5b       	subi	r30, 0xB5	; 181
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	80 81       	ld	r24, Z
    1ac2:	91 81       	ldd	r25, Z+1	; 0x01
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	d1 f6       	brne	.-76     	; 0x1a7c <LCD_voidInit+0xe4>
    1ac8:	27 c0       	rjmp	.+78     	; 0x1b18 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	8e 01       	movw	r16, r28
    1acc:	05 5b       	subi	r16, 0xB5	; 181
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e3 5b       	subi	r30, 0xB3	; 179
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	91 83       	std	Z+1, r25	; 0x01
    1aea:	80 83       	st	Z, r24
    1aec:	de 01       	movw	r26, r28
    1aee:	a9 5b       	subi	r26, 0xB9	; 185
    1af0:	bf 4f       	sbci	r27, 0xFF	; 255
    1af2:	fe 01       	movw	r30, r28
    1af4:	e5 5b       	subi	r30, 0xB5	; 181
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	91 81       	ldd	r25, Z+1	; 0x01
    1afc:	8d 93       	st	X+, r24
    1afe:	9c 93       	st	X, r25
    1b00:	fe 01       	movw	r30, r28
    1b02:	e9 5b       	subi	r30, 0xB9	; 185
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <LCD_voidInit+0x172>
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e9 5b       	subi	r30, 0xB9	; 185
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	80 83       	st	Z, r24
#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Return Home  */
	LCD_voidSendCmnd(lcd_Home);
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_voidSendCmnd>
    1b1e:	fe 01       	movw	r30, r28
    1b20:	ed 5b       	subi	r30, 0xBD	; 189
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a0 e7       	ldi	r26, 0x70	; 112
    1b2a:	b1 e4       	ldi	r27, 0x41	; 65
    1b2c:	80 83       	st	Z, r24
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	a2 83       	std	Z+2, r26	; 0x02
    1b32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b34:	8e 01       	movw	r16, r28
    1b36:	01 5c       	subi	r16, 0xC1	; 193
    1b38:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	ed 5b       	subi	r30, 0xBD	; 189
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	60 81       	ld	r22, Z
    1b42:	71 81       	ldd	r23, Z+1	; 0x01
    1b44:	82 81       	ldd	r24, Z+2	; 0x02
    1b46:	93 81       	ldd	r25, Z+3	; 0x03
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	4a ef       	ldi	r20, 0xFA	; 250
    1b4e:	54 e4       	ldi	r21, 0x44	; 68
    1b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	f8 01       	movw	r30, r16
    1b5a:	80 83       	st	Z, r24
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	a2 83       	std	Z+2, r26	; 0x02
    1b60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b62:	fe 01       	movw	r30, r28
    1b64:	ff 96       	adiw	r30, 0x3f	; 63
    1b66:	60 81       	ld	r22, Z
    1b68:	71 81       	ldd	r23, Z+1	; 0x01
    1b6a:	82 81       	ldd	r24, Z+2	; 0x02
    1b6c:	93 81       	ldd	r25, Z+3	; 0x03
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e8       	ldi	r20, 0x80	; 128
    1b74:	5f e3       	ldi	r21, 0x3F	; 63
    1b76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b7a:	88 23       	and	r24, r24
    1b7c:	2c f4       	brge	.+10     	; 0x1b88 <LCD_voidInit+0x1f0>
		__ticks = 1;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	9e af       	std	Y+62, r25	; 0x3e
    1b84:	8d af       	std	Y+61, r24	; 0x3d
    1b86:	46 c0       	rjmp	.+140    	; 0x1c14 <LCD_voidInit+0x27c>
	else if (__tmp > 65535)
    1b88:	fe 01       	movw	r30, r28
    1b8a:	ff 96       	adiw	r30, 0x3f	; 63
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	3f ef       	ldi	r19, 0xFF	; 255
    1b98:	4f e7       	ldi	r20, 0x7F	; 127
    1b9a:	57 e4       	ldi	r21, 0x47	; 71
    1b9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba0:	18 16       	cp	r1, r24
    1ba2:	64 f5       	brge	.+88     	; 0x1bfc <LCD_voidInit+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	ed 5b       	subi	r30, 0xBD	; 189
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e2       	ldi	r20, 0x20	; 32
    1bb8:	51 e4       	ldi	r21, 0x41	; 65
    1bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9e af       	std	Y+62, r25	; 0x3e
    1bd0:	8d af       	std	Y+61, r24	; 0x3d
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <LCD_voidInit+0x25a>
    1bd4:	88 ec       	ldi	r24, 0xC8	; 200
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9c af       	std	Y+60, r25	; 0x3c
    1bda:	8b af       	std	Y+59, r24	; 0x3b
    1bdc:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bde:	9c ad       	ldd	r25, Y+60	; 0x3c
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD_voidInit+0x248>
    1be4:	9c af       	std	Y+60, r25	; 0x3c
    1be6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bea:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	9e af       	std	Y+62, r25	; 0x3e
    1bf0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bf4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	69 f7       	brne	.-38     	; 0x1bd4 <LCD_voidInit+0x23c>
    1bfa:	16 c0       	rjmp	.+44     	; 0x1c28 <LCD_voidInit+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	ff 96       	adiw	r30, 0x3f	; 63
    1c00:	60 81       	ld	r22, Z
    1c02:	71 81       	ldd	r23, Z+1	; 0x01
    1c04:	82 81       	ldd	r24, Z+2	; 0x02
    1c06:	93 81       	ldd	r25, Z+3	; 0x03
    1c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	9e af       	std	Y+62, r25	; 0x3e
    1c12:	8d af       	std	Y+61, r24	; 0x3d
    1c14:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c16:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c18:	9a af       	std	Y+58, r25	; 0x3a
    1c1a:	89 af       	std	Y+57, r24	; 0x39
    1c1c:	89 ad       	ldd	r24, Y+57	; 0x39
    1c1e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_voidInit+0x288>
    1c24:	9a af       	std	Y+58, r25	; 0x3a
    1c26:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	/* Function Set  */
	LCD_voidSendCmnd(lcd_FunctionSet4bit);
    1c28:	8f e2       	ldi	r24, 0x2F	; 47
    1c2a:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_voidSendCmnd>
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	a0 e8       	ldi	r26, 0x80	; 128
    1c34:	bf e3       	ldi	r27, 0x3F	; 63
    1c36:	8d ab       	std	Y+53, r24	; 0x35
    1c38:	9e ab       	std	Y+54, r25	; 0x36
    1c3a:	af ab       	std	Y+55, r26	; 0x37
    1c3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c40:	7e a9       	ldd	r23, Y+54	; 0x36
    1c42:	8f a9       	ldd	r24, Y+55	; 0x37
    1c44:	98 ad       	ldd	r25, Y+56	; 0x38
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	4a ef       	ldi	r20, 0xFA	; 250
    1c4c:	54 e4       	ldi	r21, 0x44	; 68
    1c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	89 ab       	std	Y+49, r24	; 0x31
    1c58:	9a ab       	std	Y+50, r25	; 0x32
    1c5a:	ab ab       	std	Y+51, r26	; 0x33
    1c5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c60:	7a a9       	ldd	r23, Y+50	; 0x32
    1c62:	8b a9       	ldd	r24, Y+51	; 0x33
    1c64:	9c a9       	ldd	r25, Y+52	; 0x34
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e8       	ldi	r20, 0x80	; 128
    1c6c:	5f e3       	ldi	r21, 0x3F	; 63
    1c6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c72:	88 23       	and	r24, r24
    1c74:	2c f4       	brge	.+10     	; 0x1c80 <LCD_voidInit+0x2e8>
		__ticks = 1;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	98 ab       	std	Y+48, r25	; 0x30
    1c7c:	8f a7       	std	Y+47, r24	; 0x2f
    1c7e:	3f c0       	rjmp	.+126    	; 0x1cfe <LCD_voidInit+0x366>
	else if (__tmp > 65535)
    1c80:	69 a9       	ldd	r22, Y+49	; 0x31
    1c82:	7a a9       	ldd	r23, Y+50	; 0x32
    1c84:	8b a9       	ldd	r24, Y+51	; 0x33
    1c86:	9c a9       	ldd	r25, Y+52	; 0x34
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	3f ef       	ldi	r19, 0xFF	; 255
    1c8c:	4f e7       	ldi	r20, 0x7F	; 127
    1c8e:	57 e4       	ldi	r21, 0x47	; 71
    1c90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c94:	18 16       	cp	r1, r24
    1c96:	4c f5       	brge	.+82     	; 0x1cea <LCD_voidInit+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c98:	6d a9       	ldd	r22, Y+53	; 0x35
    1c9a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c9c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c9e:	98 ad       	ldd	r25, Y+56	; 0x38
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e2       	ldi	r20, 0x20	; 32
    1ca6:	51 e4       	ldi	r21, 0x41	; 65
    1ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	bc 01       	movw	r22, r24
    1cb2:	cd 01       	movw	r24, r26
    1cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	98 ab       	std	Y+48, r25	; 0x30
    1cbe:	8f a7       	std	Y+47, r24	; 0x2f
    1cc0:	0f c0       	rjmp	.+30     	; 0x1ce0 <LCD_voidInit+0x348>
    1cc2:	88 ec       	ldi	r24, 0xC8	; 200
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9e a7       	std	Y+46, r25	; 0x2e
    1cc8:	8d a7       	std	Y+45, r24	; 0x2d
    1cca:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ccc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <LCD_voidInit+0x336>
    1cd2:	9e a7       	std	Y+46, r25	; 0x2e
    1cd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	98 ab       	std	Y+48, r25	; 0x30
    1cde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ce2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	69 f7       	brne	.-38     	; 0x1cc2 <LCD_voidInit+0x32a>
    1ce8:	14 c0       	rjmp	.+40     	; 0x1d12 <LCD_voidInit+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cea:	69 a9       	ldd	r22, Y+49	; 0x31
    1cec:	7a a9       	ldd	r23, Y+50	; 0x32
    1cee:	8b a9       	ldd	r24, Y+51	; 0x33
    1cf0:	9c a9       	ldd	r25, Y+52	; 0x34
    1cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	98 ab       	std	Y+48, r25	; 0x30
    1cfc:	8f a7       	std	Y+47, r24	; 0x2f
    1cfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d00:	98 a9       	ldd	r25, Y+48	; 0x30
    1d02:	9c a7       	std	Y+44, r25	; 0x2c
    1d04:	8b a7       	std	Y+43, r24	; 0x2b
    1d06:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d08:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <LCD_voidInit+0x372>
    1d0e:	9c a7       	std	Y+44, r25	; 0x2c
    1d10:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Display ON OFF Control */
	LCD_voidSendCmnd(lcd_DisplayOn);
    1d12:	8c e0       	ldi	r24, 0x0C	; 12
    1d14:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_voidSendCmnd>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	a0 e8       	ldi	r26, 0x80	; 128
    1d1e:	bf e3       	ldi	r27, 0x3F	; 63
    1d20:	8f a3       	std	Y+39, r24	; 0x27
    1d22:	98 a7       	std	Y+40, r25	; 0x28
    1d24:	a9 a7       	std	Y+41, r26	; 0x29
    1d26:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d28:	6f a1       	ldd	r22, Y+39	; 0x27
    1d2a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d2c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	4a ef       	ldi	r20, 0xFA	; 250
    1d36:	54 e4       	ldi	r21, 0x44	; 68
    1d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	8b a3       	std	Y+35, r24	; 0x23
    1d42:	9c a3       	std	Y+36, r25	; 0x24
    1d44:	ad a3       	std	Y+37, r26	; 0x25
    1d46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d48:	6b a1       	ldd	r22, Y+35	; 0x23
    1d4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e8       	ldi	r20, 0x80	; 128
    1d56:	5f e3       	ldi	r21, 0x3F	; 63
    1d58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d5c:	88 23       	and	r24, r24
    1d5e:	2c f4       	brge	.+10     	; 0x1d6a <LCD_voidInit+0x3d2>
		__ticks = 1;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	9a a3       	std	Y+34, r25	; 0x22
    1d66:	89 a3       	std	Y+33, r24	; 0x21
    1d68:	3f c0       	rjmp	.+126    	; 0x1de8 <LCD_voidInit+0x450>
	else if (__tmp > 65535)
    1d6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d70:	9e a1       	ldd	r25, Y+38	; 0x26
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	3f ef       	ldi	r19, 0xFF	; 255
    1d76:	4f e7       	ldi	r20, 0x7F	; 127
    1d78:	57 e4       	ldi	r21, 0x47	; 71
    1d7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d7e:	18 16       	cp	r1, r24
    1d80:	4c f5       	brge	.+82     	; 0x1dd4 <LCD_voidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d82:	6f a1       	ldd	r22, Y+39	; 0x27
    1d84:	78 a5       	ldd	r23, Y+40	; 0x28
    1d86:	89 a5       	ldd	r24, Y+41	; 0x29
    1d88:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e2       	ldi	r20, 0x20	; 32
    1d90:	51 e4       	ldi	r21, 0x41	; 65
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	bc 01       	movw	r22, r24
    1d9c:	cd 01       	movw	r24, r26
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9a a3       	std	Y+34, r25	; 0x22
    1da8:	89 a3       	std	Y+33, r24	; 0x21
    1daa:	0f c0       	rjmp	.+30     	; 0x1dca <LCD_voidInit+0x432>
    1dac:	88 ec       	ldi	r24, 0xC8	; 200
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	98 a3       	std	Y+32, r25	; 0x20
    1db2:	8f 8f       	std	Y+31, r24	; 0x1f
    1db4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1db6:	98 a1       	ldd	r25, Y+32	; 0x20
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <LCD_voidInit+0x420>
    1dbc:	98 a3       	std	Y+32, r25	; 0x20
    1dbe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	9a a3       	std	Y+34, r25	; 0x22
    1dc8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dca:	89 a1       	ldd	r24, Y+33	; 0x21
    1dcc:	9a a1       	ldd	r25, Y+34	; 0x22
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	69 f7       	brne	.-38     	; 0x1dac <LCD_voidInit+0x414>
    1dd2:	14 c0       	rjmp	.+40     	; 0x1dfc <LCD_voidInit+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd4:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd6:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dda:	9e a1       	ldd	r25, Y+38	; 0x26
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	9a a3       	std	Y+34, r25	; 0x22
    1de6:	89 a3       	std	Y+33, r24	; 0x21
    1de8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dea:	9a a1       	ldd	r25, Y+34	; 0x22
    1dec:	9e 8f       	std	Y+30, r25	; 0x1e
    1dee:	8d 8f       	std	Y+29, r24	; 0x1d
    1df0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_voidInit+0x45c>
    1df8:	9e 8f       	std	Y+30, r25	; 0x1e
    1dfa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display */
	LCD_voidSendCmnd(lcd_Clear);
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_voidSendCmnd>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	a0 e7       	ldi	r26, 0x70	; 112
    1e08:	b1 e4       	ldi	r27, 0x41	; 65
    1e0a:	89 8f       	std	Y+25, r24	; 0x19
    1e0c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e0e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e12:	69 8d       	ldd	r22, Y+25	; 0x19
    1e14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	4a ef       	ldi	r20, 0xFA	; 250
    1e20:	54 e4       	ldi	r21, 0x44	; 68
    1e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	8d 8b       	std	Y+21, r24	; 0x15
    1e2c:	9e 8b       	std	Y+22, r25	; 0x16
    1e2e:	af 8b       	std	Y+23, r26	; 0x17
    1e30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e32:	6d 89       	ldd	r22, Y+21	; 0x15
    1e34:	7e 89       	ldd	r23, Y+22	; 0x16
    1e36:	8f 89       	ldd	r24, Y+23	; 0x17
    1e38:	98 8d       	ldd	r25, Y+24	; 0x18
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e8       	ldi	r20, 0x80	; 128
    1e40:	5f e3       	ldi	r21, 0x3F	; 63
    1e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e46:	88 23       	and	r24, r24
    1e48:	2c f4       	brge	.+10     	; 0x1e54 <LCD_voidInit+0x4bc>
		__ticks = 1;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	9c 8b       	std	Y+20, r25	; 0x14
    1e50:	8b 8b       	std	Y+19, r24	; 0x13
    1e52:	3f c0       	rjmp	.+126    	; 0x1ed2 <LCD_voidInit+0x53a>
	else if (__tmp > 65535)
    1e54:	6d 89       	ldd	r22, Y+21	; 0x15
    1e56:	7e 89       	ldd	r23, Y+22	; 0x16
    1e58:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	3f ef       	ldi	r19, 0xFF	; 255
    1e60:	4f e7       	ldi	r20, 0x7F	; 127
    1e62:	57 e4       	ldi	r21, 0x47	; 71
    1e64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e68:	18 16       	cp	r1, r24
    1e6a:	4c f5       	brge	.+82     	; 0x1ebe <LCD_voidInit+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e2       	ldi	r20, 0x20	; 32
    1e7a:	51 e4       	ldi	r21, 0x41	; 65
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	9c 8b       	std	Y+20, r25	; 0x14
    1e92:	8b 8b       	std	Y+19, r24	; 0x13
    1e94:	0f c0       	rjmp	.+30     	; 0x1eb4 <LCD_voidInit+0x51c>
    1e96:	88 ec       	ldi	r24, 0xC8	; 200
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9a 8b       	std	Y+18, r25	; 0x12
    1e9c:	89 8b       	std	Y+17, r24	; 0x11
    1e9e:	89 89       	ldd	r24, Y+17	; 0x11
    1ea0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <LCD_voidInit+0x50a>
    1ea6:	9a 8b       	std	Y+18, r25	; 0x12
    1ea8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eaa:	8b 89       	ldd	r24, Y+19	; 0x13
    1eac:	9c 89       	ldd	r25, Y+20	; 0x14
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	9c 8b       	std	Y+20, r25	; 0x14
    1eb2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	69 f7       	brne	.-38     	; 0x1e96 <LCD_voidInit+0x4fe>
    1ebc:	14 c0       	rjmp	.+40     	; 0x1ee6 <LCD_voidInit+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebe:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	9c 8b       	std	Y+20, r25	; 0x14
    1ed0:	8b 8b       	std	Y+19, r24	; 0x13
    1ed2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed6:	98 8b       	std	Y+16, r25	; 0x10
    1ed8:	8f 87       	std	Y+15, r24	; 0x0f
    1eda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1edc:	98 89       	ldd	r25, Y+16	; 0x10
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <LCD_voidInit+0x546>
    1ee2:	98 8b       	std	Y+16, r25	; 0x10
    1ee4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);

	/* Entry Mode Set  */
	LCD_voidSendCmnd(lcd_EntryMode);
    1ee6:	86 e0       	ldi	r24, 0x06	; 6
    1ee8:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_voidSendCmnd>
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a0 e0       	ldi	r26, 0x00	; 0
    1ef2:	b0 e4       	ldi	r27, 0x40	; 64
    1ef4:	8b 87       	std	Y+11, r24	; 0x0b
    1ef6:	9c 87       	std	Y+12, r25	; 0x0c
    1ef8:	ad 87       	std	Y+13, r26	; 0x0d
    1efa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4a ef       	ldi	r20, 0xFA	; 250
    1f0a:	54 e4       	ldi	r21, 0x44	; 68
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	8f 83       	std	Y+7, r24	; 0x07
    1f16:	98 87       	std	Y+8, r25	; 0x08
    1f18:	a9 87       	std	Y+9, r26	; 0x09
    1f1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1e:	78 85       	ldd	r23, Y+8	; 0x08
    1f20:	89 85       	ldd	r24, Y+9	; 0x09
    1f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f e3       	ldi	r21, 0x3F	; 63
    1f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f30:	88 23       	and	r24, r24
    1f32:	2c f4       	brge	.+10     	; 0x1f3e <LCD_voidInit+0x5a6>
		__ticks = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9e 83       	std	Y+6, r25	; 0x06
    1f3a:	8d 83       	std	Y+5, r24	; 0x05
    1f3c:	3f c0       	rjmp	.+126    	; 0x1fbc <LCD_voidInit+0x624>
	else if (__tmp > 65535)
    1f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f40:	78 85       	ldd	r23, Y+8	; 0x08
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	57 e4       	ldi	r21, 0x47	; 71
    1f4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f52:	18 16       	cp	r1, r24
    1f54:	4c f5       	brge	.+82     	; 0x1fa8 <LCD_voidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <LCD_voidInit+0x606>
    1f80:	88 ec       	ldi	r24, 0xC8	; 200
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	8b 83       	std	Y+3, r24	; 0x03
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_voidInit+0x5f4>
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	69 f7       	brne	.-38     	; 0x1f80 <LCD_voidInit+0x5e8>
    1fa6:	14 c0       	rjmp	.+40     	; 0x1fd0 <LCD_voidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9e 83       	std	Y+6, r25	; 0x06
    1fba:	8d 83       	std	Y+5, r24	; 0x05
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	9a 83       	std	Y+2, r25	; 0x02
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <LCD_voidInit+0x630>
    1fcc:	9a 83       	std	Y+2, r25	; 0x02
    1fce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    1fd0:	cc 5a       	subi	r28, 0xAC	; 172
    1fd2:	df 4f       	sbci	r29, 0xFF	; 255
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	08 95       	ret

00001fe8 <LCD_voidSendCmnd>:
/***************************************************************************************/
/* Description! Interface to send the configuration commands to the LCD Driver         */
/* Input      ! Command number                                                         */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendCmnd(u8 Copy_u8Cmnd) {
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	6d 97       	sbiw	r28, 0x1d	; 29
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
    1ffc:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);

#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT

	/* Set RS to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RS_PIN, DIO_u8_LOW);
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>

	/* Set R/W to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	61 e0       	ldi	r22, 0x01	; 1
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>

	/* Load Command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd);
    2012:	83 e0       	ldi	r24, 0x03	; 3
    2014:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2016:	0e 94 2c 0c 	call	0x1858	; 0x1858 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_HIGH  */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	62 e0       	ldi	r22, 0x02	; 2
    201e:	41 e0       	ldi	r20, 0x01	; 1
    2020:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a0 e8       	ldi	r26, 0x80	; 128
    202a:	bf e3       	ldi	r27, 0x3F	; 63
    202c:	89 8f       	std	Y+25, r24	; 0x19
    202e:	9a 8f       	std	Y+26, r25	; 0x1a
    2030:	ab 8f       	std	Y+27, r26	; 0x1b
    2032:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2034:	69 8d       	ldd	r22, Y+25	; 0x19
    2036:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2038:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a ef       	ldi	r20, 0xFA	; 250
    2042:	54 e4       	ldi	r21, 0x44	; 68
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	8d 8b       	std	Y+21, r24	; 0x15
    204e:	9e 8b       	std	Y+22, r25	; 0x16
    2050:	af 8b       	std	Y+23, r26	; 0x17
    2052:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2054:	6d 89       	ldd	r22, Y+21	; 0x15
    2056:	7e 89       	ldd	r23, Y+22	; 0x16
    2058:	8f 89       	ldd	r24, Y+23	; 0x17
    205a:	98 8d       	ldd	r25, Y+24	; 0x18
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <LCD_voidSendCmnd+0x8e>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9c 8b       	std	Y+20, r25	; 0x14
    2072:	8b 8b       	std	Y+19, r24	; 0x13
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <LCD_voidSendCmnd+0x10c>
	else if (__tmp > 65535)
    2076:	6d 89       	ldd	r22, Y+21	; 0x15
    2078:	7e 89       	ldd	r23, Y+22	; 0x16
    207a:	8f 89       	ldd	r24, Y+23	; 0x17
    207c:	98 8d       	ldd	r25, Y+24	; 0x18
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	4c f5       	brge	.+82     	; 0x20e0 <LCD_voidSendCmnd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	69 8d       	ldd	r22, Y+25	; 0x19
    2090:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2092:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2094:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e2       	ldi	r20, 0x20	; 32
    209c:	51 e4       	ldi	r21, 0x41	; 65
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9c 8b       	std	Y+20, r25	; 0x14
    20b4:	8b 8b       	std	Y+19, r24	; 0x13
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <LCD_voidSendCmnd+0xee>
    20b8:	88 ec       	ldi	r24, 0xC8	; 200
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9a 8b       	std	Y+18, r25	; 0x12
    20be:	89 8b       	std	Y+17, r24	; 0x11
    20c0:	89 89       	ldd	r24, Y+17	; 0x11
    20c2:	9a 89       	ldd	r25, Y+18	; 0x12
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <LCD_voidSendCmnd+0xdc>
    20c8:	9a 8b       	std	Y+18, r25	; 0x12
    20ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8b 89       	ldd	r24, Y+19	; 0x13
    20ce:	9c 89       	ldd	r25, Y+20	; 0x14
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9c 8b       	std	Y+20, r25	; 0x14
    20d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8b 89       	ldd	r24, Y+19	; 0x13
    20d8:	9c 89       	ldd	r25, Y+20	; 0x14
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <LCD_voidSendCmnd+0xd0>
    20de:	14 c0       	rjmp	.+40     	; 0x2108 <LCD_voidSendCmnd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	6d 89       	ldd	r22, Y+21	; 0x15
    20e2:	7e 89       	ldd	r23, Y+22	; 0x16
    20e4:	8f 89       	ldd	r24, Y+23	; 0x17
    20e6:	98 8d       	ldd	r25, Y+24	; 0x18
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9c 8b       	std	Y+20, r25	; 0x14
    20f2:	8b 8b       	std	Y+19, r24	; 0x13
    20f4:	8b 89       	ldd	r24, Y+19	; 0x13
    20f6:	9c 89       	ldd	r25, Y+20	; 0x14
    20f8:	98 8b       	std	Y+16, r25	; 0x10
    20fa:	8f 87       	std	Y+15, r24	; 0x0f
    20fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20fe:	98 89       	ldd	r25, Y+16	; 0x10
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <LCD_voidSendCmnd+0x118>
    2104:	98 8b       	std	Y+16, r25	; 0x10
    2106:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(1);

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	62 e0       	ldi	r22, 0x02	; 2
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>

	/*write the rest of the command */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd << 4);
    2112:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2114:	98 2f       	mov	r25, r24
    2116:	92 95       	swap	r25
    2118:	90 7f       	andi	r25, 0xF0	; 240
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	69 2f       	mov	r22, r25
    211e:	0e 94 2c 0c 	call	0x1858	; 0x1858 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_HIGH  */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	62 e0       	ldi	r22, 0x02	; 2
    2126:	41 e0       	ldi	r20, 0x01	; 1
    2128:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	a0 e8       	ldi	r26, 0x80	; 128
    2132:	bf e3       	ldi	r27, 0x3F	; 63
    2134:	8b 87       	std	Y+11, r24	; 0x0b
    2136:	9c 87       	std	Y+12, r25	; 0x0c
    2138:	ad 87       	std	Y+13, r26	; 0x0d
    213a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213c:	6b 85       	ldd	r22, Y+11	; 0x0b
    213e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2140:	8d 85       	ldd	r24, Y+13	; 0x0d
    2142:	9e 85       	ldd	r25, Y+14	; 0x0e
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	4a ef       	ldi	r20, 0xFA	; 250
    214a:	54 e4       	ldi	r21, 0x44	; 68
    214c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	8f 83       	std	Y+7, r24	; 0x07
    2156:	98 87       	std	Y+8, r25	; 0x08
    2158:	a9 87       	std	Y+9, r26	; 0x09
    215a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215c:	6f 81       	ldd	r22, Y+7	; 0x07
    215e:	78 85       	ldd	r23, Y+8	; 0x08
    2160:	89 85       	ldd	r24, Y+9	; 0x09
    2162:	9a 85       	ldd	r25, Y+10	; 0x0a
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e8       	ldi	r20, 0x80	; 128
    216a:	5f e3       	ldi	r21, 0x3F	; 63
    216c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2170:	88 23       	and	r24, r24
    2172:	2c f4       	brge	.+10     	; 0x217e <LCD_voidSendCmnd+0x196>
		__ticks = 1;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
    217c:	3f c0       	rjmp	.+126    	; 0x21fc <LCD_voidSendCmnd+0x214>
	else if (__tmp > 65535)
    217e:	6f 81       	ldd	r22, Y+7	; 0x07
    2180:	78 85       	ldd	r23, Y+8	; 0x08
    2182:	89 85       	ldd	r24, Y+9	; 0x09
    2184:	9a 85       	ldd	r25, Y+10	; 0x0a
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	3f ef       	ldi	r19, 0xFF	; 255
    218a:	4f e7       	ldi	r20, 0x7F	; 127
    218c:	57 e4       	ldi	r21, 0x47	; 71
    218e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2192:	18 16       	cp	r1, r24
    2194:	4c f5       	brge	.+82     	; 0x21e8 <LCD_voidSendCmnd+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2196:	6b 85       	ldd	r22, Y+11	; 0x0b
    2198:	7c 85       	ldd	r23, Y+12	; 0x0c
    219a:	8d 85       	ldd	r24, Y+13	; 0x0d
    219c:	9e 85       	ldd	r25, Y+14	; 0x0e
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e2       	ldi	r20, 0x20	; 32
    21a4:	51 e4       	ldi	r21, 0x41	; 65
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	bc 01       	movw	r22, r24
    21b0:	cd 01       	movw	r24, r26
    21b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	9e 83       	std	Y+6, r25	; 0x06
    21bc:	8d 83       	std	Y+5, r24	; 0x05
    21be:	0f c0       	rjmp	.+30     	; 0x21de <LCD_voidSendCmnd+0x1f6>
    21c0:	88 ec       	ldi	r24, 0xC8	; 200
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	9c 83       	std	Y+4, r25	; 0x04
    21c6:	8b 83       	std	Y+3, r24	; 0x03
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <LCD_voidSendCmnd+0x1e4>
    21d0:	9c 83       	std	Y+4, r25	; 0x04
    21d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d4:	8d 81       	ldd	r24, Y+5	; 0x05
    21d6:	9e 81       	ldd	r25, Y+6	; 0x06
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	9e 83       	std	Y+6, r25	; 0x06
    21dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	9e 81       	ldd	r25, Y+6	; 0x06
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	69 f7       	brne	.-38     	; 0x21c0 <LCD_voidSendCmnd+0x1d8>
    21e6:	14 c0       	rjmp	.+40     	; 0x2210 <LCD_voidSendCmnd+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ea:	78 85       	ldd	r23, Y+8	; 0x08
    21ec:	89 85       	ldd	r24, Y+9	; 0x09
    21ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9e 83       	std	Y+6, r25	; 0x06
    21fa:	8d 83       	std	Y+5, r24	; 0x05
    21fc:	8d 81       	ldd	r24, Y+5	; 0x05
    21fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <LCD_voidSendCmnd+0x220>
    220c:	9a 83       	std	Y+2, r25	; 0x02
    220e:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for E to settle */
	_delay_ms(1);

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	62 e0       	ldi	r22, 0x02	; 2
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
#endif

}
    221a:	6d 96       	adiw	r28, 0x1d	; 29
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <LCD_voidSendChar>:
/***************************************************************************************/
/* Description! Interface to write character on LCD screen                             */
/* Input      ! Data to send                                                           */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendChar(u8 Copy_u8Data) {
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	ab 97       	sbiw	r28, 0x2b	; 43
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	8b a7       	std	Y+43, r24	; 0x2b
	/* Delay to let the LCD Display the character */
	_delay_ms(2);

#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	/* Set RS to HIG */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RS_PIN, DIO_u8_HIGH);
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	60 e0       	ldi	r22, 0x00	; 0
    2246:	41 e0       	ldi	r20, 0x01	; 1
    2248:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>

	/* Set R/W to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	61 e0       	ldi	r22, 0x01	; 1
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	62 e0       	ldi	r22, 0x02	; 2
    225a:	41 e0       	ldi	r20, 0x01	; 1
    225c:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>

	/* Load Command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Data);
    2260:	83 e0       	ldi	r24, 0x03	; 3
    2262:	6b a5       	ldd	r22, Y+43	; 0x2b
    2264:	0e 94 2c 0c 	call	0x1858	; 0x1858 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	62 e0       	ldi	r22, 0x02	; 2
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	a0 e8       	ldi	r26, 0x80	; 128
    2278:	bf e3       	ldi	r27, 0x3F	; 63
    227a:	8f a3       	std	Y+39, r24	; 0x27
    227c:	98 a7       	std	Y+40, r25	; 0x28
    227e:	a9 a7       	std	Y+41, r26	; 0x29
    2280:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2282:	6f a1       	ldd	r22, Y+39	; 0x27
    2284:	78 a5       	ldd	r23, Y+40	; 0x28
    2286:	89 a5       	ldd	r24, Y+41	; 0x29
    2288:	9a a5       	ldd	r25, Y+42	; 0x2a
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	4a ef       	ldi	r20, 0xFA	; 250
    2290:	54 e4       	ldi	r21, 0x44	; 68
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	8b a3       	std	Y+35, r24	; 0x23
    229c:	9c a3       	std	Y+36, r25	; 0x24
    229e:	ad a3       	std	Y+37, r26	; 0x25
    22a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22a2:	6b a1       	ldd	r22, Y+35	; 0x23
    22a4:	7c a1       	ldd	r23, Y+36	; 0x24
    22a6:	8d a1       	ldd	r24, Y+37	; 0x25
    22a8:	9e a1       	ldd	r25, Y+38	; 0x26
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e8       	ldi	r20, 0x80	; 128
    22b0:	5f e3       	ldi	r21, 0x3F	; 63
    22b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b6:	88 23       	and	r24, r24
    22b8:	2c f4       	brge	.+10     	; 0x22c4 <LCD_voidSendChar+0x98>
		__ticks = 1;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9a a3       	std	Y+34, r25	; 0x22
    22c0:	89 a3       	std	Y+33, r24	; 0x21
    22c2:	3f c0       	rjmp	.+126    	; 0x2342 <LCD_voidSendChar+0x116>
	else if (__tmp > 65535)
    22c4:	6b a1       	ldd	r22, Y+35	; 0x23
    22c6:	7c a1       	ldd	r23, Y+36	; 0x24
    22c8:	8d a1       	ldd	r24, Y+37	; 0x25
    22ca:	9e a1       	ldd	r25, Y+38	; 0x26
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	3f ef       	ldi	r19, 0xFF	; 255
    22d0:	4f e7       	ldi	r20, 0x7F	; 127
    22d2:	57 e4       	ldi	r21, 0x47	; 71
    22d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d8:	18 16       	cp	r1, r24
    22da:	4c f5       	brge	.+82     	; 0x232e <LCD_voidSendChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22dc:	6f a1       	ldd	r22, Y+39	; 0x27
    22de:	78 a5       	ldd	r23, Y+40	; 0x28
    22e0:	89 a5       	ldd	r24, Y+41	; 0x29
    22e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e2       	ldi	r20, 0x20	; 32
    22ea:	51 e4       	ldi	r21, 0x41	; 65
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9a a3       	std	Y+34, r25	; 0x22
    2302:	89 a3       	std	Y+33, r24	; 0x21
    2304:	0f c0       	rjmp	.+30     	; 0x2324 <LCD_voidSendChar+0xf8>
    2306:	88 ec       	ldi	r24, 0xC8	; 200
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	98 a3       	std	Y+32, r25	; 0x20
    230c:	8f 8f       	std	Y+31, r24	; 0x1f
    230e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2310:	98 a1       	ldd	r25, Y+32	; 0x20
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <LCD_voidSendChar+0xe6>
    2316:	98 a3       	std	Y+32, r25	; 0x20
    2318:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231a:	89 a1       	ldd	r24, Y+33	; 0x21
    231c:	9a a1       	ldd	r25, Y+34	; 0x22
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	9a a3       	std	Y+34, r25	; 0x22
    2322:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2324:	89 a1       	ldd	r24, Y+33	; 0x21
    2326:	9a a1       	ldd	r25, Y+34	; 0x22
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	69 f7       	brne	.-38     	; 0x2306 <LCD_voidSendChar+0xda>
    232c:	14 c0       	rjmp	.+40     	; 0x2356 <LCD_voidSendChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232e:	6b a1       	ldd	r22, Y+35	; 0x23
    2330:	7c a1       	ldd	r23, Y+36	; 0x24
    2332:	8d a1       	ldd	r24, Y+37	; 0x25
    2334:	9e a1       	ldd	r25, Y+38	; 0x26
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9a a3       	std	Y+34, r25	; 0x22
    2340:	89 a3       	std	Y+33, r24	; 0x21
    2342:	89 a1       	ldd	r24, Y+33	; 0x21
    2344:	9a a1       	ldd	r25, Y+34	; 0x22
    2346:	9e 8f       	std	Y+30, r25	; 0x1e
    2348:	8d 8f       	std	Y+29, r24	; 0x1d
    234a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    234c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_voidSendChar+0x122>
    2352:	9e 8f       	std	Y+30, r25	; 0x1e
    2354:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Wait for E to settle */
	_delay_ms(1);

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	62 e0       	ldi	r22, 0x02	; 2
    235a:	41 e0       	ldi	r20, 0x01	; 1
    235c:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>

	/*Load the rest of the command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Data << 4);
    2360:	8b a5       	ldd	r24, Y+43	; 0x2b
    2362:	98 2f       	mov	r25, r24
    2364:	92 95       	swap	r25
    2366:	90 7f       	andi	r25, 0xF0	; 240
    2368:	83 e0       	ldi	r24, 0x03	; 3
    236a:	69 2f       	mov	r22, r25
    236c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	62 e0       	ldi	r22, 0x02	; 2
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	a0 e8       	ldi	r26, 0x80	; 128
    2380:	bf e3       	ldi	r27, 0x3F	; 63
    2382:	89 8f       	std	Y+25, r24	; 0x19
    2384:	9a 8f       	std	Y+26, r25	; 0x1a
    2386:	ab 8f       	std	Y+27, r26	; 0x1b
    2388:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238a:	69 8d       	ldd	r22, Y+25	; 0x19
    238c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    238e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2390:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a ef       	ldi	r20, 0xFA	; 250
    2398:	54 e4       	ldi	r21, 0x44	; 68
    239a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	8d 8b       	std	Y+21, r24	; 0x15
    23a4:	9e 8b       	std	Y+22, r25	; 0x16
    23a6:	af 8b       	std	Y+23, r26	; 0x17
    23a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23aa:	6d 89       	ldd	r22, Y+21	; 0x15
    23ac:	7e 89       	ldd	r23, Y+22	; 0x16
    23ae:	8f 89       	ldd	r24, Y+23	; 0x17
    23b0:	98 8d       	ldd	r25, Y+24	; 0x18
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23be:	88 23       	and	r24, r24
    23c0:	2c f4       	brge	.+10     	; 0x23cc <LCD_voidSendChar+0x1a0>
		__ticks = 1;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
    23ca:	3f c0       	rjmp	.+126    	; 0x244a <LCD_voidSendChar+0x21e>
	else if (__tmp > 65535)
    23cc:	6d 89       	ldd	r22, Y+21	; 0x15
    23ce:	7e 89       	ldd	r23, Y+22	; 0x16
    23d0:	8f 89       	ldd	r24, Y+23	; 0x17
    23d2:	98 8d       	ldd	r25, Y+24	; 0x18
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	3f ef       	ldi	r19, 0xFF	; 255
    23d8:	4f e7       	ldi	r20, 0x7F	; 127
    23da:	57 e4       	ldi	r21, 0x47	; 71
    23dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e0:	18 16       	cp	r1, r24
    23e2:	4c f5       	brge	.+82     	; 0x2436 <LCD_voidSendChar+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e4:	69 8d       	ldd	r22, Y+25	; 0x19
    23e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e2       	ldi	r20, 0x20	; 32
    23f2:	51 e4       	ldi	r21, 0x41	; 65
    23f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	9c 8b       	std	Y+20, r25	; 0x14
    240a:	8b 8b       	std	Y+19, r24	; 0x13
    240c:	0f c0       	rjmp	.+30     	; 0x242c <LCD_voidSendChar+0x200>
    240e:	88 ec       	ldi	r24, 0xC8	; 200
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	9a 8b       	std	Y+18, r25	; 0x12
    2414:	89 8b       	std	Y+17, r24	; 0x11
    2416:	89 89       	ldd	r24, Y+17	; 0x11
    2418:	9a 89       	ldd	r25, Y+18	; 0x12
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_voidSendChar+0x1ee>
    241e:	9a 8b       	std	Y+18, r25	; 0x12
    2420:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2422:	8b 89       	ldd	r24, Y+19	; 0x13
    2424:	9c 89       	ldd	r25, Y+20	; 0x14
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	9c 8b       	std	Y+20, r25	; 0x14
    242a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242c:	8b 89       	ldd	r24, Y+19	; 0x13
    242e:	9c 89       	ldd	r25, Y+20	; 0x14
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	69 f7       	brne	.-38     	; 0x240e <LCD_voidSendChar+0x1e2>
    2434:	14 c0       	rjmp	.+40     	; 0x245e <LCD_voidSendChar+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2436:	6d 89       	ldd	r22, Y+21	; 0x15
    2438:	7e 89       	ldd	r23, Y+22	; 0x16
    243a:	8f 89       	ldd	r24, Y+23	; 0x17
    243c:	98 8d       	ldd	r25, Y+24	; 0x18
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9c 8b       	std	Y+20, r25	; 0x14
    2448:	8b 8b       	std	Y+19, r24	; 0x13
    244a:	8b 89       	ldd	r24, Y+19	; 0x13
    244c:	9c 89       	ldd	r25, Y+20	; 0x14
    244e:	98 8b       	std	Y+16, r25	; 0x10
    2450:	8f 87       	std	Y+15, r24	; 0x0f
    2452:	8f 85       	ldd	r24, Y+15	; 0x0f
    2454:	98 89       	ldd	r25, Y+16	; 0x10
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_voidSendChar+0x22a>
    245a:	98 8b       	std	Y+16, r25	; 0x10
    245c:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(1);

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	62 e0       	ldi	r22, 0x02	; 2
    2462:	41 e0       	ldi	r20, 0x01	; 1
    2464:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	a0 e8       	ldi	r26, 0x80	; 128
    246e:	bf e3       	ldi	r27, 0x3F	; 63
    2470:	8b 87       	std	Y+11, r24	; 0x0b
    2472:	9c 87       	std	Y+12, r25	; 0x0c
    2474:	ad 87       	std	Y+13, r26	; 0x0d
    2476:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2478:	6b 85       	ldd	r22, Y+11	; 0x0b
    247a:	7c 85       	ldd	r23, Y+12	; 0x0c
    247c:	8d 85       	ldd	r24, Y+13	; 0x0d
    247e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	4a ef       	ldi	r20, 0xFA	; 250
    2486:	54 e4       	ldi	r21, 0x44	; 68
    2488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	8f 83       	std	Y+7, r24	; 0x07
    2492:	98 87       	std	Y+8, r25	; 0x08
    2494:	a9 87       	std	Y+9, r26	; 0x09
    2496:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2498:	6f 81       	ldd	r22, Y+7	; 0x07
    249a:	78 85       	ldd	r23, Y+8	; 0x08
    249c:	89 85       	ldd	r24, Y+9	; 0x09
    249e:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e8       	ldi	r20, 0x80	; 128
    24a6:	5f e3       	ldi	r21, 0x3F	; 63
    24a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ac:	88 23       	and	r24, r24
    24ae:	2c f4       	brge	.+10     	; 0x24ba <LCD_voidSendChar+0x28e>
		__ticks = 1;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
    24b8:	3f c0       	rjmp	.+126    	; 0x2538 <LCD_voidSendChar+0x30c>
	else if (__tmp > 65535)
    24ba:	6f 81       	ldd	r22, Y+7	; 0x07
    24bc:	78 85       	ldd	r23, Y+8	; 0x08
    24be:	89 85       	ldd	r24, Y+9	; 0x09
    24c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	3f ef       	ldi	r19, 0xFF	; 255
    24c6:	4f e7       	ldi	r20, 0x7F	; 127
    24c8:	57 e4       	ldi	r21, 0x47	; 71
    24ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ce:	18 16       	cp	r1, r24
    24d0:	4c f5       	brge	.+82     	; 0x2524 <LCD_voidSendChar+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e2       	ldi	r20, 0x20	; 32
    24e0:	51 e4       	ldi	r21, 0x41	; 65
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	bc 01       	movw	r22, r24
    24ec:	cd 01       	movw	r24, r26
    24ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
    24fa:	0f c0       	rjmp	.+30     	; 0x251a <LCD_voidSendChar+0x2ee>
    24fc:	88 ec       	ldi	r24, 0xC8	; 200
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	9c 83       	std	Y+4, r25	; 0x04
    2502:	8b 83       	std	Y+3, r24	; 0x03
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	9c 81       	ldd	r25, Y+4	; 0x04
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <LCD_voidSendChar+0x2dc>
    250c:	9c 83       	std	Y+4, r25	; 0x04
    250e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2510:	8d 81       	ldd	r24, Y+5	; 0x05
    2512:	9e 81       	ldd	r25, Y+6	; 0x06
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	9e 83       	std	Y+6, r25	; 0x06
    2518:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251a:	8d 81       	ldd	r24, Y+5	; 0x05
    251c:	9e 81       	ldd	r25, Y+6	; 0x06
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	69 f7       	brne	.-38     	; 0x24fc <LCD_voidSendChar+0x2d0>
    2522:	14 c0       	rjmp	.+40     	; 0x254c <LCD_voidSendChar+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2524:	6f 81       	ldd	r22, Y+7	; 0x07
    2526:	78 85       	ldd	r23, Y+8	; 0x08
    2528:	89 85       	ldd	r24, Y+9	; 0x09
    252a:	9a 85       	ldd	r25, Y+10	; 0x0a
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9e 83       	std	Y+6, r25	; 0x06
    2536:	8d 83       	std	Y+5, r24	; 0x05
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	9e 81       	ldd	r25, Y+6	; 0x06
    253c:	9a 83       	std	Y+2, r25	; 0x02
    253e:	89 83       	std	Y+1, r24	; 0x01
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	9a 81       	ldd	r25, Y+2	; 0x02
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <LCD_voidSendChar+0x318>
    2548:	9a 83       	std	Y+2, r25	; 0x02
    254a:	89 83       	std	Y+1, r24	; 0x01
	/* Delay to let the LCD Display the character */
	_delay_ms(1);

#endif

}
    254c:	ab 96       	adiw	r28, 0x2b	; 43
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <LCD_voidSendString>:
/***************************************************************************************/
/* Description! Interface to write string on LCD screen                                */
/* Input      ! Pointer to the string                                                  */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendString(u8 *Copy_pu8String) {
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	00 d0       	rcall	.+0      	; 0x2564 <LCD_voidSendString+0x6>
    2564:	0f 92       	push	r0
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	9b 83       	std	Y+3, r25	; 0x03
    256c:	8a 83       	std	Y+2, r24	; 0x02

	//	/* Local loop index */
	//	u8 u8Index = 0;
	u8 iteration = 0;
    256e:	19 82       	std	Y+1, r1	; 0x01
	//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration = 0; Copy_pu8String[iteration] != '\0'; iteration++) {
    2570:	19 82       	std	Y+1, r1	; 0x01
    2572:	0e c0       	rjmp	.+28     	; 0x2590 <LCD_voidSendString+0x32>
		/* Write Character on LCD */
		LCD_voidSendChar(Copy_pu8String[iteration]);
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	9b 81       	ldd	r25, Y+3	; 0x03
    257e:	fc 01       	movw	r30, r24
    2580:	e2 0f       	add	r30, r18
    2582:	f3 1f       	adc	r31, r19
    2584:	80 81       	ld	r24, Z
    2586:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_voidSendChar>

	//	/* Local loop index */
	//	u8 u8Index = 0;
	u8 iteration = 0;
	//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration = 0; Copy_pu8String[iteration] != '\0'; iteration++) {
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	8f 5f       	subi	r24, 0xFF	; 255
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	9b 81       	ldd	r25, Y+3	; 0x03
    259a:	fc 01       	movw	r30, r24
    259c:	e2 0f       	add	r30, r18
    259e:	f3 1f       	adc	r31, r19
    25a0:	80 81       	ld	r24, Z
    25a2:	88 23       	and	r24, r24
    25a4:	39 f7       	brne	.-50     	; 0x2574 <LCD_voidSendString+0x16>
		LCD_voidSendChar(Copy_pu8String[iteration]);

		//		/* Increment local loop index */
		//		u8Index++;
	}
}
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <LCD_voidSendIntger>:

void LCD_voidSendIntger(s32 Copy_s32Data) {
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	ac 97       	sbiw	r28, 0x2c	; 44
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	69 a7       	std	Y+41, r22	; 0x29
    25c8:	7a a7       	std	Y+42, r23	; 0x2a
    25ca:	8b a7       	std	Y+43, r24	; 0x2b
    25cc:	9c a7       	std	Y+44, r25	; 0x2c
	u32 str[10];
	// Converts Int to String
	sprintf(str, "%ld", Copy_s32Data);
    25ce:	ce 01       	movw	r24, r28
    25d0:	01 96       	adiw	r24, 0x01	; 1
    25d2:	2d b7       	in	r18, 0x3d	; 61
    25d4:	3e b7       	in	r19, 0x3e	; 62
    25d6:	28 50       	subi	r18, 0x08	; 8
    25d8:	30 40       	sbci	r19, 0x00	; 0
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	3e bf       	out	0x3e, r19	; 62
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	2d bf       	out	0x3d, r18	; 61
    25e4:	ed b7       	in	r30, 0x3d	; 61
    25e6:	fe b7       	in	r31, 0x3e	; 62
    25e8:	31 96       	adiw	r30, 0x01	; 1
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
    25ee:	80 e6       	ldi	r24, 0x60	; 96
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	93 83       	std	Z+3, r25	; 0x03
    25f4:	82 83       	std	Z+2, r24	; 0x02
    25f6:	89 a5       	ldd	r24, Y+41	; 0x29
    25f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    25fa:	ab a5       	ldd	r26, Y+43	; 0x2b
    25fc:	bc a5       	ldd	r27, Y+44	; 0x2c
    25fe:	84 83       	std	Z+4, r24	; 0x04
    2600:	95 83       	std	Z+5, r25	; 0x05
    2602:	a6 83       	std	Z+6, r26	; 0x06
    2604:	b7 83       	std	Z+7, r27	; 0x07
    2606:	0e 94 7d 15 	call	0x2afa	; 0x2afa <sprintf>
    260a:	8d b7       	in	r24, 0x3d	; 61
    260c:	9e b7       	in	r25, 0x3e	; 62
    260e:	08 96       	adiw	r24, 0x08	; 8
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	9e bf       	out	0x3e, r25	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	8d bf       	out	0x3d, r24	; 61
	LCD_voidSendString(str);
    261a:	ce 01       	movw	r24, r28
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	0e 94 af 12 	call	0x255e	; 0x255e <LCD_voidSendString>
}
    2622:	ac 96       	adiw	r28, 0x2c	; 44
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <LCD_voidSendFloat>:

void LCD_voidSendFloat(f64 Copy_f32Data) {
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	2c 97       	sbiw	r28, 0x0c	; 12
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	69 87       	std	Y+9, r22	; 0x09
    264a:	7a 87       	std	Y+10, r23	; 0x0a
    264c:	8b 87       	std	Y+11, r24	; 0x0b
    264e:	9c 87       	std	Y+12, r25	; 0x0c
	s32 int_part;
	f32 frac_part;
	// separate integer and fractional parts
	int_part = (s32) Copy_f32Data;
    2650:	69 85       	ldd	r22, Y+9	; 0x09
    2652:	7a 85       	ldd	r23, Y+10	; 0x0a
    2654:	8b 85       	ldd	r24, Y+11	; 0x0b
    2656:	9c 85       	ldd	r25, Y+12	; 0x0c
    2658:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	9e 83       	std	Y+6, r25	; 0x06
    2664:	af 83       	std	Y+7, r26	; 0x07
    2666:	b8 87       	std	Y+8, r27	; 0x08
	frac_part = Copy_f32Data - int_part;
    2668:	6d 81       	ldd	r22, Y+5	; 0x05
    266a:	7e 81       	ldd	r23, Y+6	; 0x06
    266c:	8f 81       	ldd	r24, Y+7	; 0x07
    266e:	98 85       	ldd	r25, Y+8	; 0x08
    2670:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    2674:	9b 01       	movw	r18, r22
    2676:	ac 01       	movw	r20, r24
    2678:	69 85       	ldd	r22, Y+9	; 0x09
    267a:	7a 85       	ldd	r23, Y+10	; 0x0a
    267c:	8b 85       	ldd	r24, Y+11	; 0x0b
    267e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2680:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	89 83       	std	Y+1, r24	; 0x01
    268a:	9a 83       	std	Y+2, r25	; 0x02
    268c:	ab 83       	std	Y+3, r26	; 0x03
    268e:	bc 83       	std	Y+4, r27	; 0x04
	frac_part = (s32) (frac_part * 1000);
    2690:	69 81       	ldd	r22, Y+1	; 0x01
    2692:	7a 81       	ldd	r23, Y+2	; 0x02
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	9c 81       	ldd	r25, Y+4	; 0x04
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	4a e7       	ldi	r20, 0x7A	; 122
    269e:	54 e4       	ldi	r21, 0x44	; 68
    26a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	bc 01       	movw	r22, r24
    26aa:	cd 01       	movw	r24, r26
    26ac:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	bc 01       	movw	r22, r24
    26b6:	cd 01       	movw	r24, r26
    26b8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	89 83       	std	Y+1, r24	; 0x01
    26c2:	9a 83       	std	Y+2, r25	; 0x02
    26c4:	ab 83       	std	Y+3, r26	; 0x03
    26c6:	bc 83       	std	Y+4, r27	; 0x04
	LCD_voidSendIntger(int_part);
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	af 81       	ldd	r26, Y+7	; 0x07
    26ce:	b8 85       	ldd	r27, Y+8	; 0x08
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendIntger>
	LCD_voidSendChar('.');
    26d8:	8e e2       	ldi	r24, 0x2E	; 46
    26da:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_voidSendChar>
	LCD_voidSendIntger(frac_part);
    26de:	69 81       	ldd	r22, Y+1	; 0x01
    26e0:	7a 81       	ldd	r23, Y+2	; 0x02
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	9c 81       	ldd	r25, Y+4	; 0x04
    26e6:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendIntger>
}
    26f6:	2c 96       	adiw	r28, 0x0c	; 12
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <LCD_voidGotoxy>:
/***************************************************************************************/
/* Description! Interface to start the writing process at certain digit in the LCD     */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidGotoxy(u8 Copy_u8Y, u8 Copy_u8X) {
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	00 d0       	rcall	.+0      	; 0x270e <LCD_voidGotoxy+0x6>
    270e:	00 d0       	rcall	.+0      	; 0x2710 <LCD_voidGotoxy+0x8>
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	89 83       	std	Y+1, r24	; 0x01
    2716:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8X > 0 && Copy_u8X <= 16) {
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	88 23       	and	r24, r24
    271c:	e1 f0       	breq	.+56     	; 0x2756 <LCD_voidGotoxy+0x4e>
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	81 31       	cpi	r24, 0x11	; 17
    2722:	c8 f4       	brcc	.+50     	; 0x2756 <LCD_voidGotoxy+0x4e>
		switch (Copy_u8Y) {
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	3c 83       	std	Y+4, r19	; 0x04
    272c:	2b 83       	std	Y+3, r18	; 0x03
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	9c 81       	ldd	r25, Y+4	; 0x04
    2732:	81 30       	cpi	r24, 0x01	; 1
    2734:	91 05       	cpc	r25, r1
    2736:	31 f0       	breq	.+12     	; 0x2744 <LCD_voidGotoxy+0x3c>
    2738:	2b 81       	ldd	r18, Y+3	; 0x03
    273a:	3c 81       	ldd	r19, Y+4	; 0x04
    273c:	22 30       	cpi	r18, 0x02	; 2
    273e:	31 05       	cpc	r19, r1
    2740:	31 f0       	breq	.+12     	; 0x274e <LCD_voidGotoxy+0x46>
    2742:	09 c0       	rjmp	.+18     	; 0x2756 <LCD_voidGotoxy+0x4e>
		case 1:
			LCD_voidSendCmnd(Copy_u8X + 127);
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	81 58       	subi	r24, 0x81	; 129
    2748:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_voidSendCmnd>
    274c:	04 c0       	rjmp	.+8      	; 0x2756 <LCD_voidGotoxy+0x4e>
			break;
		case 2:
			LCD_voidSendCmnd(Copy_u8X + 191);
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	81 54       	subi	r24, 0x41	; 65
    2752:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_voidSendCmnd>
			break;
		default:
			break;
		}
	}
}
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <LCD_voidSendExtraChar>:
/***************************************************************************************/
/* Description! Interface to write extra characters saved in the CGRAM                 */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendExtraChar(u8 Copy_u8Y, u8 Copy_u8X) {
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	62 97       	sbiw	r28, 0x12	; 18
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	89 8b       	std	Y+17, r24	; 0x11
    277a:	6a 8b       	std	Y+18, r22	; 0x12
	u8 iteration1, iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCmnd(64);
    277c:	80 e4       	ldi	r24, 0x40	; 64
    277e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_voidSendCmnd>
	for (iteration1 = 0; iteration1 < 64; iteration1++) {
    2782:	18 8a       	std	Y+16, r1	; 0x10
    2784:	0c c0       	rjmp	.+24     	; 0x279e <LCD_voidSendExtraChar+0x3a>
		LCD_voidSendChar(ExtraChar[iteration1]);
    2786:	88 89       	ldd	r24, Y+16	; 0x10
    2788:	88 2f       	mov	r24, r24
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	fc 01       	movw	r30, r24
    278e:	e4 59       	subi	r30, 0x94	; 148
    2790:	fe 4f       	sbci	r31, 0xFE	; 254
    2792:	80 81       	ld	r24, Z
    2794:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_voidSendChar>
void LCD_voidSendExtraChar(u8 Copy_u8Y, u8 Copy_u8X) {
	u8 iteration1, iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCmnd(64);
	for (iteration1 = 0; iteration1 < 64; iteration1++) {
    2798:	88 89       	ldd	r24, Y+16	; 0x10
    279a:	8f 5f       	subi	r24, 0xFF	; 255
    279c:	88 8b       	std	Y+16, r24	; 0x10
    279e:	88 89       	ldd	r24, Y+16	; 0x10
    27a0:	80 34       	cpi	r24, 0x40	; 64
    27a2:	88 f3       	brcs	.-30     	; 0x2786 <LCD_voidSendExtraChar+0x22>
		LCD_voidSendChar(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_voidSendCmnd(128);
    27a4:	80 e8       	ldi	r24, 0x80	; 128
    27a6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_voidSendCmnd>
	LCD_voidGotoxy(Copy_u8Y, Copy_u8X);
    27aa:	89 89       	ldd	r24, Y+17	; 0x11
    27ac:	6a 89       	ldd	r22, Y+18	; 0x12
    27ae:	0e 94 84 13 	call	0x2708	; 0x2708 <LCD_voidGotoxy>
	/*First eight character which saved at CGRAM*/
	for (iteration2 = 0; iteration2 <= 7; iteration2++) {
    27b2:	1f 86       	std	Y+15, r1	; 0x0f
    27b4:	78 c0       	rjmp	.+240    	; 0x28a6 <LCD_voidSendExtraChar+0x142>
		/* Write bytes of DDRAM */
		LCD_voidSendChar(iteration2);
    27b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b8:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_voidSendChar>
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	a0 ea       	ldi	r26, 0xA0	; 160
    27c2:	b0 e4       	ldi	r27, 0x40	; 64
    27c4:	8b 87       	std	Y+11, r24	; 0x0b
    27c6:	9c 87       	std	Y+12, r25	; 0x0c
    27c8:	ad 87       	std	Y+13, r26	; 0x0d
    27ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	4a ef       	ldi	r20, 0xFA	; 250
    27da:	54 e4       	ldi	r21, 0x44	; 68
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	8f 83       	std	Y+7, r24	; 0x07
    27e6:	98 87       	std	Y+8, r25	; 0x08
    27e8:	a9 87       	std	Y+9, r26	; 0x09
    27ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ec:	6f 81       	ldd	r22, Y+7	; 0x07
    27ee:	78 85       	ldd	r23, Y+8	; 0x08
    27f0:	89 85       	ldd	r24, Y+9	; 0x09
    27f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2800:	88 23       	and	r24, r24
    2802:	2c f4       	brge	.+10     	; 0x280e <LCD_voidSendExtraChar+0xaa>
		__ticks = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9e 83       	std	Y+6, r25	; 0x06
    280a:	8d 83       	std	Y+5, r24	; 0x05
    280c:	3f c0       	rjmp	.+126    	; 0x288c <LCD_voidSendExtraChar+0x128>
	else if (__tmp > 65535)
    280e:	6f 81       	ldd	r22, Y+7	; 0x07
    2810:	78 85       	ldd	r23, Y+8	; 0x08
    2812:	89 85       	ldd	r24, Y+9	; 0x09
    2814:	9a 85       	ldd	r25, Y+10	; 0x0a
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	3f ef       	ldi	r19, 0xFF	; 255
    281a:	4f e7       	ldi	r20, 0x7F	; 127
    281c:	57 e4       	ldi	r21, 0x47	; 71
    281e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2822:	18 16       	cp	r1, r24
    2824:	4c f5       	brge	.+82     	; 0x2878 <LCD_voidSendExtraChar+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2826:	6b 85       	ldd	r22, Y+11	; 0x0b
    2828:	7c 85       	ldd	r23, Y+12	; 0x0c
    282a:	8d 85       	ldd	r24, Y+13	; 0x0d
    282c:	9e 85       	ldd	r25, Y+14	; 0x0e
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e2       	ldi	r20, 0x20	; 32
    2834:	51 e4       	ldi	r21, 0x41	; 65
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9e 83       	std	Y+6, r25	; 0x06
    284c:	8d 83       	std	Y+5, r24	; 0x05
    284e:	0f c0       	rjmp	.+30     	; 0x286e <LCD_voidSendExtraChar+0x10a>
    2850:	88 ec       	ldi	r24, 0xC8	; 200
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9c 83       	std	Y+4, r25	; 0x04
    2856:	8b 83       	std	Y+3, r24	; 0x03
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	9c 81       	ldd	r25, Y+4	; 0x04
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <LCD_voidSendExtraChar+0xf8>
    2860:	9c 83       	std	Y+4, r25	; 0x04
    2862:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	9e 81       	ldd	r25, Y+6	; 0x06
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	9e 83       	std	Y+6, r25	; 0x06
    286c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286e:	8d 81       	ldd	r24, Y+5	; 0x05
    2870:	9e 81       	ldd	r25, Y+6	; 0x06
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	69 f7       	brne	.-38     	; 0x2850 <LCD_voidSendExtraChar+0xec>
    2876:	14 c0       	rjmp	.+40     	; 0x28a0 <LCD_voidSendExtraChar+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2878:	6f 81       	ldd	r22, Y+7	; 0x07
    287a:	78 85       	ldd	r23, Y+8	; 0x08
    287c:	89 85       	ldd	r24, Y+9	; 0x09
    287e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	9e 83       	std	Y+6, r25	; 0x06
    288a:	8d 83       	std	Y+5, r24	; 0x05
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	9a 83       	std	Y+2, r25	; 0x02
    2892:	89 83       	std	Y+1, r24	; 0x01
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <LCD_voidSendExtraChar+0x134>
    289c:	9a 83       	std	Y+2, r25	; 0x02
    289e:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_voidSendCmnd(128);
	LCD_voidGotoxy(Copy_u8Y, Copy_u8X);
	/*First eight character which saved at CGRAM*/
	for (iteration2 = 0; iteration2 <= 7; iteration2++) {
    28a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a2:	8f 5f       	subi	r24, 0xFF	; 255
    28a4:	8f 87       	std	Y+15, r24	; 0x0f
    28a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a8:	88 30       	cpi	r24, 0x08	; 8
    28aa:	08 f4       	brcc	.+2      	; 0x28ae <LCD_voidSendExtraChar+0x14a>
    28ac:	84 cf       	rjmp	.-248    	; 0x27b6 <LCD_voidSendExtraChar+0x52>
		/* Write bytes of DDRAM */
		LCD_voidSendChar(iteration2);

		_delay_ms(5);
	}
}
    28ae:	62 96       	adiw	r28, 0x12	; 18
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret

000028c0 <LCD_voidWriteSpecialCharacter>:

/*  New */
void LCD_voidWriteSpecialCharacter(u8 *Copy_pu8Pattern, u8 Copy_u8PatternNumber,
		u8 Copy_u8XPos, u8 Copy_u8YPos) {
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	27 97       	sbiw	r28, 0x07	; 7
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	9c 83       	std	Y+4, r25	; 0x04
    28d6:	8b 83       	std	Y+3, r24	; 0x03
    28d8:	6d 83       	std	Y+5, r22	; 0x05
    28da:	4e 83       	std	Y+6, r20	; 0x06
    28dc:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address, Local_u8PatternCounter;

	/*1- Calculate the required address of CGRAM*/
	Local_u8Address = Copy_u8PatternNumber * 8;
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	88 2f       	mov	r24, r24
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	88 0f       	add	r24, r24
    28e6:	99 1f       	adc	r25, r25
    28e8:	88 0f       	add	r24, r24
    28ea:	99 1f       	adc	r25, r25
    28ec:	88 0f       	add	r24, r24
    28ee:	99 1f       	adc	r25, r25
    28f0:	8a 83       	std	Y+2, r24	; 0x02

	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	80 5c       	subi	r24, 0xC0	; 192
    28f6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_voidSendCmnd>

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
    28fa:	19 82       	std	Y+1, r1	; 0x01
    28fc:	0e c0       	rjmp	.+28     	; 0x291a <LCD_voidWriteSpecialCharacter+0x5a>
			Local_u8PatternCounter++) {
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8PatternCounter]);
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	28 2f       	mov	r18, r24
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	8b 81       	ldd	r24, Y+3	; 0x03
    2906:	9c 81       	ldd	r25, Y+4	; 0x04
    2908:	fc 01       	movw	r30, r24
    290a:	e2 0f       	add	r30, r18
    290c:	f3 1f       	adc	r31, r19
    290e:	80 81       	ld	r24, Z
    2910:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_voidSendChar>
	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
			Local_u8PatternCounter++) {
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	8f 5f       	subi	r24, 0xFF	; 255
    2918:	89 83       	std	Y+1, r24	; 0x01

	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	88 30       	cpi	r24, 0x08	; 8
    291e:	78 f3       	brcs	.-34     	; 0x28fe <LCD_voidWriteSpecialCharacter+0x3e>
			Local_u8PatternCounter++) {
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8PatternCounter]);
	}

	/*4- shift the address counter to the DDRAM*/
	LCD_voidGotoxy(Copy_u8XPos, Copy_u8YPos);
    2920:	8e 81       	ldd	r24, Y+6	; 0x06
    2922:	6f 81       	ldd	r22, Y+7	; 0x07
    2924:	0e 94 84 13 	call	0x2708	; 0x2708 <LCD_voidGotoxy>

	/*5- Display the CGRAM pattern on the LCD*/
	LCD_voidSendChar(Copy_u8PatternNumber);
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_voidSendChar>

}
    292e:	27 96       	adiw	r28, 0x07	; 7
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <main>:
#include "ADC_interface.h"

/* HAL */
#include "LCD_interface.h"

int main(void) {
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	28 97       	sbiw	r28, 0x08	; 8
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61

	/* Initialization Functions */
	DIO_voidInit();
    2954:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_voidInit>
	LCD_voidInit();
    2958:	0e 94 cc 0c 	call	0x1998	; 0x1998 <LCD_voidInit>
	ADC_voidInit();
    295c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <ADC_voidInit>

	/* Super Loop */
	while (1) {

		/* Get Analog Value */
		ADC_u8GetDigitalValueSynchNonBlocking(ADC_u8_CHANNEL_0, &value);
    2960:	9e 01       	movw	r18, r28
    2962:	2b 5f       	subi	r18, 0xFB	; 251
    2964:	3f 4f       	sbci	r19, 0xFF	; 255
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	b9 01       	movw	r22, r18
    296a:	0e 94 38 07 	call	0xe70	; 0xe70 <ADC_u8GetDigitalValueSynchNonBlocking>
		voltage = value * (5 / 1023.0);
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	9e 81       	ldd	r25, Y+6	; 0x06
    2972:	cc 01       	movw	r24, r24
    2974:	a0 e0       	ldi	r26, 0x00	; 0
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	2a e0       	ldi	r18, 0x0A	; 10
    298a:	38 e2       	ldi	r19, 0x28	; 40
    298c:	40 ea       	ldi	r20, 0xA0	; 160
    298e:	5b e3       	ldi	r21, 0x3B	; 59
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	89 83       	std	Y+1, r24	; 0x01
    299a:	9a 83       	std	Y+2, r25	; 0x02
    299c:	ab 83       	std	Y+3, r26	; 0x03
    299e:	bc 83       	std	Y+4, r27	; 0x04

		/* Display voltage value on the LCD */
		LCD_voidSendCmnd(LCD_CLEAR);
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_voidSendCmnd>
		LCD_voidGotoxy(1, 1);
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	61 e0       	ldi	r22, 0x01	; 1
    29aa:	0e 94 84 13 	call	0x2708	; 0x2708 <LCD_voidGotoxy>
		LCD_voidSendFloat(voltage);
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	9a 81       	ldd	r25, Y+2	; 0x02
    29b2:	ab 81       	ldd	r26, Y+3	; 0x03
    29b4:	bc 81       	ldd	r27, Y+4	; 0x04
    29b6:	bc 01       	movw	r22, r24
    29b8:	cd 01       	movw	r24, r26
    29ba:	0e 94 1a 13 	call	0x2634	; 0x2634 <LCD_voidSendFloat>
		LCD_voidSendChar('V');
    29be:	86 e5       	ldi	r24, 0x56	; 86
    29c0:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_voidSendChar>

		if (voltage < 1.5) {
    29c4:	69 81       	ldd	r22, Y+1	; 0x01
    29c6:	7a 81       	ldd	r23, Y+2	; 0x02
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	9c 81       	ldd	r25, Y+4	; 0x04
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 ec       	ldi	r20, 0xC0	; 192
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d8:	88 23       	and	r24, r24
    29da:	84 f4       	brge	.+32     	; 0x29fc <main+0xbc>
			/* RED led on */
			DIO_u8SetPinValue(DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_HIGH);
    29dc:	82 e0       	ldi	r24, 0x02	; 2
    29de:	60 e0       	ldi	r22, 0x00	; 0
    29e0:	41 e0       	ldi	r20, 0x01	; 1
    29e2:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_LOW);
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	61 e0       	ldi	r22, 0x01	; 1
    29ea:	40 e0       	ldi	r20, 0x00	; 0
    29ec:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_LOW);
    29f0:	82 e0       	ldi	r24, 0x02	; 2
    29f2:	62 e0       	ldi	r22, 0x02	; 2
    29f4:	40 e0       	ldi	r20, 0x00	; 0
    29f6:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
    29fa:	b2 cf       	rjmp	.-156    	; 0x2960 <main+0x20>
		} else if (voltage >= 1.5 && voltage <= 3) {
    29fc:	18 86       	std	Y+8, r1	; 0x08
    29fe:	69 81       	ldd	r22, Y+1	; 0x01
    2a00:	7a 81       	ldd	r23, Y+2	; 0x02
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	9c 81       	ldd	r25, Y+4	; 0x04
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 ec       	ldi	r20, 0xC0	; 192
    2a0c:	5f e3       	ldi	r21, 0x3F	; 63
    2a0e:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
    2a12:	88 23       	and	r24, r24
    2a14:	14 f0       	brlt	.+4      	; 0x2a1a <main+0xda>
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	88 87       	std	Y+8, r24	; 0x08
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	98 85       	ldd	r25, Y+8	; 0x08
    2a1e:	89 27       	eor	r24, r25
    2a20:	88 23       	and	r24, r24
    2a22:	21 f5       	brne	.+72     	; 0x2a6c <main+0x12c>
    2a24:	1f 82       	std	Y+7, r1	; 0x07
    2a26:	69 81       	ldd	r22, Y+1	; 0x01
    2a28:	7a 81       	ldd	r23, Y+2	; 0x02
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e4       	ldi	r20, 0x40	; 64
    2a34:	50 e4       	ldi	r21, 0x40	; 64
    2a36:	0e 94 a9 03 	call	0x752	; 0x752 <__lesf2>
    2a3a:	18 16       	cp	r1, r24
    2a3c:	14 f0       	brlt	.+4      	; 0x2a42 <main+0x102>
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	8f 83       	std	Y+7, r24	; 0x07
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	9f 81       	ldd	r25, Y+7	; 0x07
    2a46:	89 27       	eor	r24, r25
    2a48:	88 23       	and	r24, r24
    2a4a:	81 f4       	brne	.+32     	; 0x2a6c <main+0x12c>
			/* YELLOW led on */
			DIO_u8SetPinValue(DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_LOW);
    2a4c:	82 e0       	ldi	r24, 0x02	; 2
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	40 e0       	ldi	r20, 0x00	; 0
    2a52:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_HIGH);
    2a56:	82 e0       	ldi	r24, 0x02	; 2
    2a58:	61 e0       	ldi	r22, 0x01	; 1
    2a5a:	41 e0       	ldi	r20, 0x01	; 1
    2a5c:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_LOW);
    2a60:	82 e0       	ldi	r24, 0x02	; 2
    2a62:	62 e0       	ldi	r22, 0x02	; 2
    2a64:	40 e0       	ldi	r20, 0x00	; 0
    2a66:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
    2a6a:	7a cf       	rjmp	.-268    	; 0x2960 <main+0x20>
		} else {
			/* GREEN led on */
			DIO_u8SetPinValue(DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_LOW);
    2a6c:	82 e0       	ldi	r24, 0x02	; 2
    2a6e:	60 e0       	ldi	r22, 0x00	; 0
    2a70:	40 e0       	ldi	r20, 0x00	; 0
    2a72:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_LOW);
    2a76:	82 e0       	ldi	r24, 0x02	; 2
    2a78:	61 e0       	ldi	r22, 0x01	; 1
    2a7a:	40 e0       	ldi	r20, 0x00	; 0
    2a7c:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_HIGH);
    2a80:	82 e0       	ldi	r24, 0x02	; 2
    2a82:	62 e0       	ldi	r22, 0x02	; 2
    2a84:	41 e0       	ldi	r20, 0x01	; 1
    2a86:	0e 94 a9 09 	call	0x1352	; 0x1352 <DIO_u8SetPinValue>
    2a8a:	6a cf       	rjmp	.-300    	; 0x2960 <main+0x20>

00002a8c <__prologue_saves__>:
    2a8c:	2f 92       	push	r2
    2a8e:	3f 92       	push	r3
    2a90:	4f 92       	push	r4
    2a92:	5f 92       	push	r5
    2a94:	6f 92       	push	r6
    2a96:	7f 92       	push	r7
    2a98:	8f 92       	push	r8
    2a9a:	9f 92       	push	r9
    2a9c:	af 92       	push	r10
    2a9e:	bf 92       	push	r11
    2aa0:	cf 92       	push	r12
    2aa2:	df 92       	push	r13
    2aa4:	ef 92       	push	r14
    2aa6:	ff 92       	push	r15
    2aa8:	0f 93       	push	r16
    2aaa:	1f 93       	push	r17
    2aac:	cf 93       	push	r28
    2aae:	df 93       	push	r29
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	ca 1b       	sub	r28, r26
    2ab6:	db 0b       	sbc	r29, r27
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	09 94       	ijmp

00002ac4 <__epilogue_restores__>:
    2ac4:	2a 88       	ldd	r2, Y+18	; 0x12
    2ac6:	39 88       	ldd	r3, Y+17	; 0x11
    2ac8:	48 88       	ldd	r4, Y+16	; 0x10
    2aca:	5f 84       	ldd	r5, Y+15	; 0x0f
    2acc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ace:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ad0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ad2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ad4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ad6:	b9 84       	ldd	r11, Y+9	; 0x09
    2ad8:	c8 84       	ldd	r12, Y+8	; 0x08
    2ada:	df 80       	ldd	r13, Y+7	; 0x07
    2adc:	ee 80       	ldd	r14, Y+6	; 0x06
    2ade:	fd 80       	ldd	r15, Y+5	; 0x05
    2ae0:	0c 81       	ldd	r16, Y+4	; 0x04
    2ae2:	1b 81       	ldd	r17, Y+3	; 0x03
    2ae4:	aa 81       	ldd	r26, Y+2	; 0x02
    2ae6:	b9 81       	ldd	r27, Y+1	; 0x01
    2ae8:	ce 0f       	add	r28, r30
    2aea:	d1 1d       	adc	r29, r1
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	de bf       	out	0x3e, r29	; 62
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	cd bf       	out	0x3d, r28	; 61
    2af6:	ed 01       	movw	r28, r26
    2af8:	08 95       	ret

00002afa <sprintf>:
    2afa:	ae e0       	ldi	r26, 0x0E	; 14
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	e3 e8       	ldi	r30, 0x83	; 131
    2b00:	f5 e1       	ldi	r31, 0x15	; 21
    2b02:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__prologue_saves__+0x1c>
    2b06:	0d 89       	ldd	r16, Y+21	; 0x15
    2b08:	1e 89       	ldd	r17, Y+22	; 0x16
    2b0a:	86 e0       	ldi	r24, 0x06	; 6
    2b0c:	8c 83       	std	Y+4, r24	; 0x04
    2b0e:	1a 83       	std	Y+2, r17	; 0x02
    2b10:	09 83       	std	Y+1, r16	; 0x01
    2b12:	8f ef       	ldi	r24, 0xFF	; 255
    2b14:	9f e7       	ldi	r25, 0x7F	; 127
    2b16:	9e 83       	std	Y+6, r25	; 0x06
    2b18:	8d 83       	std	Y+5, r24	; 0x05
    2b1a:	9e 01       	movw	r18, r28
    2b1c:	27 5e       	subi	r18, 0xE7	; 231
    2b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b20:	ce 01       	movw	r24, r28
    2b22:	01 96       	adiw	r24, 0x01	; 1
    2b24:	6f 89       	ldd	r22, Y+23	; 0x17
    2b26:	78 8d       	ldd	r23, Y+24	; 0x18
    2b28:	a9 01       	movw	r20, r18
    2b2a:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <vfprintf>
    2b2e:	2f 81       	ldd	r18, Y+7	; 0x07
    2b30:	38 85       	ldd	r19, Y+8	; 0x08
    2b32:	02 0f       	add	r16, r18
    2b34:	13 1f       	adc	r17, r19
    2b36:	f8 01       	movw	r30, r16
    2b38:	10 82       	st	Z, r1
    2b3a:	2e 96       	adiw	r28, 0x0e	; 14
    2b3c:	e4 e0       	ldi	r30, 0x04	; 4
    2b3e:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <__epilogue_restores__+0x1c>

00002b42 <vfprintf>:
    2b42:	ab e0       	ldi	r26, 0x0B	; 11
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	e7 ea       	ldi	r30, 0xA7	; 167
    2b48:	f5 e1       	ldi	r31, 0x15	; 21
    2b4a:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__prologue_saves__>
    2b4e:	3c 01       	movw	r6, r24
    2b50:	2b 01       	movw	r4, r22
    2b52:	5a 01       	movw	r10, r20
    2b54:	fc 01       	movw	r30, r24
    2b56:	17 82       	std	Z+7, r1	; 0x07
    2b58:	16 82       	std	Z+6, r1	; 0x06
    2b5a:	83 81       	ldd	r24, Z+3	; 0x03
    2b5c:	81 fd       	sbrc	r24, 1
    2b5e:	03 c0       	rjmp	.+6      	; 0x2b66 <vfprintf+0x24>
    2b60:	6f ef       	ldi	r22, 0xFF	; 255
    2b62:	7f ef       	ldi	r23, 0xFF	; 255
    2b64:	c6 c1       	rjmp	.+908    	; 0x2ef2 <vfprintf+0x3b0>
    2b66:	9a e0       	ldi	r25, 0x0A	; 10
    2b68:	89 2e       	mov	r8, r25
    2b6a:	1e 01       	movw	r2, r28
    2b6c:	08 94       	sec
    2b6e:	21 1c       	adc	r2, r1
    2b70:	31 1c       	adc	r3, r1
    2b72:	f3 01       	movw	r30, r6
    2b74:	23 81       	ldd	r18, Z+3	; 0x03
    2b76:	f2 01       	movw	r30, r4
    2b78:	23 fd       	sbrc	r18, 3
    2b7a:	85 91       	lpm	r24, Z+
    2b7c:	23 ff       	sbrs	r18, 3
    2b7e:	81 91       	ld	r24, Z+
    2b80:	2f 01       	movw	r4, r30
    2b82:	88 23       	and	r24, r24
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <vfprintf+0x46>
    2b86:	b2 c1       	rjmp	.+868    	; 0x2eec <vfprintf+0x3aa>
    2b88:	85 32       	cpi	r24, 0x25	; 37
    2b8a:	39 f4       	brne	.+14     	; 0x2b9a <vfprintf+0x58>
    2b8c:	23 fd       	sbrc	r18, 3
    2b8e:	85 91       	lpm	r24, Z+
    2b90:	23 ff       	sbrs	r18, 3
    2b92:	81 91       	ld	r24, Z+
    2b94:	2f 01       	movw	r4, r30
    2b96:	85 32       	cpi	r24, 0x25	; 37
    2b98:	29 f4       	brne	.+10     	; 0x2ba4 <vfprintf+0x62>
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	b3 01       	movw	r22, r6
    2b9e:	0e 94 94 17 	call	0x2f28	; 0x2f28 <fputc>
    2ba2:	e7 cf       	rjmp	.-50     	; 0x2b72 <vfprintf+0x30>
    2ba4:	98 2f       	mov	r25, r24
    2ba6:	ff 24       	eor	r15, r15
    2ba8:	ee 24       	eor	r14, r14
    2baa:	99 24       	eor	r9, r9
    2bac:	ff e1       	ldi	r31, 0x1F	; 31
    2bae:	ff 15       	cp	r31, r15
    2bb0:	d0 f0       	brcs	.+52     	; 0x2be6 <vfprintf+0xa4>
    2bb2:	9b 32       	cpi	r25, 0x2B	; 43
    2bb4:	69 f0       	breq	.+26     	; 0x2bd0 <vfprintf+0x8e>
    2bb6:	9c 32       	cpi	r25, 0x2C	; 44
    2bb8:	28 f4       	brcc	.+10     	; 0x2bc4 <vfprintf+0x82>
    2bba:	90 32       	cpi	r25, 0x20	; 32
    2bbc:	59 f0       	breq	.+22     	; 0x2bd4 <vfprintf+0x92>
    2bbe:	93 32       	cpi	r25, 0x23	; 35
    2bc0:	91 f4       	brne	.+36     	; 0x2be6 <vfprintf+0xa4>
    2bc2:	0e c0       	rjmp	.+28     	; 0x2be0 <vfprintf+0x9e>
    2bc4:	9d 32       	cpi	r25, 0x2D	; 45
    2bc6:	49 f0       	breq	.+18     	; 0x2bda <vfprintf+0x98>
    2bc8:	90 33       	cpi	r25, 0x30	; 48
    2bca:	69 f4       	brne	.+26     	; 0x2be6 <vfprintf+0xa4>
    2bcc:	41 e0       	ldi	r20, 0x01	; 1
    2bce:	24 c0       	rjmp	.+72     	; 0x2c18 <vfprintf+0xd6>
    2bd0:	52 e0       	ldi	r21, 0x02	; 2
    2bd2:	f5 2a       	or	r15, r21
    2bd4:	84 e0       	ldi	r24, 0x04	; 4
    2bd6:	f8 2a       	or	r15, r24
    2bd8:	28 c0       	rjmp	.+80     	; 0x2c2a <vfprintf+0xe8>
    2bda:	98 e0       	ldi	r25, 0x08	; 8
    2bdc:	f9 2a       	or	r15, r25
    2bde:	25 c0       	rjmp	.+74     	; 0x2c2a <vfprintf+0xe8>
    2be0:	e0 e1       	ldi	r30, 0x10	; 16
    2be2:	fe 2a       	or	r15, r30
    2be4:	22 c0       	rjmp	.+68     	; 0x2c2a <vfprintf+0xe8>
    2be6:	f7 fc       	sbrc	r15, 7
    2be8:	29 c0       	rjmp	.+82     	; 0x2c3c <vfprintf+0xfa>
    2bea:	89 2f       	mov	r24, r25
    2bec:	80 53       	subi	r24, 0x30	; 48
    2bee:	8a 30       	cpi	r24, 0x0A	; 10
    2bf0:	70 f4       	brcc	.+28     	; 0x2c0e <vfprintf+0xcc>
    2bf2:	f6 fe       	sbrs	r15, 6
    2bf4:	05 c0       	rjmp	.+10     	; 0x2c00 <vfprintf+0xbe>
    2bf6:	98 9c       	mul	r9, r8
    2bf8:	90 2c       	mov	r9, r0
    2bfa:	11 24       	eor	r1, r1
    2bfc:	98 0e       	add	r9, r24
    2bfe:	15 c0       	rjmp	.+42     	; 0x2c2a <vfprintf+0xe8>
    2c00:	e8 9c       	mul	r14, r8
    2c02:	e0 2c       	mov	r14, r0
    2c04:	11 24       	eor	r1, r1
    2c06:	e8 0e       	add	r14, r24
    2c08:	f0 e2       	ldi	r31, 0x20	; 32
    2c0a:	ff 2a       	or	r15, r31
    2c0c:	0e c0       	rjmp	.+28     	; 0x2c2a <vfprintf+0xe8>
    2c0e:	9e 32       	cpi	r25, 0x2E	; 46
    2c10:	29 f4       	brne	.+10     	; 0x2c1c <vfprintf+0xda>
    2c12:	f6 fc       	sbrc	r15, 6
    2c14:	6b c1       	rjmp	.+726    	; 0x2eec <vfprintf+0x3aa>
    2c16:	40 e4       	ldi	r20, 0x40	; 64
    2c18:	f4 2a       	or	r15, r20
    2c1a:	07 c0       	rjmp	.+14     	; 0x2c2a <vfprintf+0xe8>
    2c1c:	9c 36       	cpi	r25, 0x6C	; 108
    2c1e:	19 f4       	brne	.+6      	; 0x2c26 <vfprintf+0xe4>
    2c20:	50 e8       	ldi	r21, 0x80	; 128
    2c22:	f5 2a       	or	r15, r21
    2c24:	02 c0       	rjmp	.+4      	; 0x2c2a <vfprintf+0xe8>
    2c26:	98 36       	cpi	r25, 0x68	; 104
    2c28:	49 f4       	brne	.+18     	; 0x2c3c <vfprintf+0xfa>
    2c2a:	f2 01       	movw	r30, r4
    2c2c:	23 fd       	sbrc	r18, 3
    2c2e:	95 91       	lpm	r25, Z+
    2c30:	23 ff       	sbrs	r18, 3
    2c32:	91 91       	ld	r25, Z+
    2c34:	2f 01       	movw	r4, r30
    2c36:	99 23       	and	r25, r25
    2c38:	09 f0       	breq	.+2      	; 0x2c3c <vfprintf+0xfa>
    2c3a:	b8 cf       	rjmp	.-144    	; 0x2bac <vfprintf+0x6a>
    2c3c:	89 2f       	mov	r24, r25
    2c3e:	85 54       	subi	r24, 0x45	; 69
    2c40:	83 30       	cpi	r24, 0x03	; 3
    2c42:	18 f0       	brcs	.+6      	; 0x2c4a <vfprintf+0x108>
    2c44:	80 52       	subi	r24, 0x20	; 32
    2c46:	83 30       	cpi	r24, 0x03	; 3
    2c48:	38 f4       	brcc	.+14     	; 0x2c58 <vfprintf+0x116>
    2c4a:	44 e0       	ldi	r20, 0x04	; 4
    2c4c:	50 e0       	ldi	r21, 0x00	; 0
    2c4e:	a4 0e       	add	r10, r20
    2c50:	b5 1e       	adc	r11, r21
    2c52:	5f e3       	ldi	r21, 0x3F	; 63
    2c54:	59 83       	std	Y+1, r21	; 0x01
    2c56:	0f c0       	rjmp	.+30     	; 0x2c76 <vfprintf+0x134>
    2c58:	93 36       	cpi	r25, 0x63	; 99
    2c5a:	31 f0       	breq	.+12     	; 0x2c68 <vfprintf+0x126>
    2c5c:	93 37       	cpi	r25, 0x73	; 115
    2c5e:	79 f0       	breq	.+30     	; 0x2c7e <vfprintf+0x13c>
    2c60:	93 35       	cpi	r25, 0x53	; 83
    2c62:	09 f0       	breq	.+2      	; 0x2c66 <vfprintf+0x124>
    2c64:	56 c0       	rjmp	.+172    	; 0x2d12 <vfprintf+0x1d0>
    2c66:	20 c0       	rjmp	.+64     	; 0x2ca8 <vfprintf+0x166>
    2c68:	f5 01       	movw	r30, r10
    2c6a:	80 81       	ld	r24, Z
    2c6c:	89 83       	std	Y+1, r24	; 0x01
    2c6e:	42 e0       	ldi	r20, 0x02	; 2
    2c70:	50 e0       	ldi	r21, 0x00	; 0
    2c72:	a4 0e       	add	r10, r20
    2c74:	b5 1e       	adc	r11, r21
    2c76:	61 01       	movw	r12, r2
    2c78:	01 e0       	ldi	r16, 0x01	; 1
    2c7a:	10 e0       	ldi	r17, 0x00	; 0
    2c7c:	12 c0       	rjmp	.+36     	; 0x2ca2 <vfprintf+0x160>
    2c7e:	f5 01       	movw	r30, r10
    2c80:	c0 80       	ld	r12, Z
    2c82:	d1 80       	ldd	r13, Z+1	; 0x01
    2c84:	f6 fc       	sbrc	r15, 6
    2c86:	03 c0       	rjmp	.+6      	; 0x2c8e <vfprintf+0x14c>
    2c88:	6f ef       	ldi	r22, 0xFF	; 255
    2c8a:	7f ef       	ldi	r23, 0xFF	; 255
    2c8c:	02 c0       	rjmp	.+4      	; 0x2c92 <vfprintf+0x150>
    2c8e:	69 2d       	mov	r22, r9
    2c90:	70 e0       	ldi	r23, 0x00	; 0
    2c92:	42 e0       	ldi	r20, 0x02	; 2
    2c94:	50 e0       	ldi	r21, 0x00	; 0
    2c96:	a4 0e       	add	r10, r20
    2c98:	b5 1e       	adc	r11, r21
    2c9a:	c6 01       	movw	r24, r12
    2c9c:	0e 94 89 17 	call	0x2f12	; 0x2f12 <strnlen>
    2ca0:	8c 01       	movw	r16, r24
    2ca2:	5f e7       	ldi	r21, 0x7F	; 127
    2ca4:	f5 22       	and	r15, r21
    2ca6:	14 c0       	rjmp	.+40     	; 0x2cd0 <vfprintf+0x18e>
    2ca8:	f5 01       	movw	r30, r10
    2caa:	c0 80       	ld	r12, Z
    2cac:	d1 80       	ldd	r13, Z+1	; 0x01
    2cae:	f6 fc       	sbrc	r15, 6
    2cb0:	03 c0       	rjmp	.+6      	; 0x2cb8 <vfprintf+0x176>
    2cb2:	6f ef       	ldi	r22, 0xFF	; 255
    2cb4:	7f ef       	ldi	r23, 0xFF	; 255
    2cb6:	02 c0       	rjmp	.+4      	; 0x2cbc <vfprintf+0x17a>
    2cb8:	69 2d       	mov	r22, r9
    2cba:	70 e0       	ldi	r23, 0x00	; 0
    2cbc:	42 e0       	ldi	r20, 0x02	; 2
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	a4 0e       	add	r10, r20
    2cc2:	b5 1e       	adc	r11, r21
    2cc4:	c6 01       	movw	r24, r12
    2cc6:	0e 94 7e 17 	call	0x2efc	; 0x2efc <strnlen_P>
    2cca:	8c 01       	movw	r16, r24
    2ccc:	50 e8       	ldi	r21, 0x80	; 128
    2cce:	f5 2a       	or	r15, r21
    2cd0:	f3 fe       	sbrs	r15, 3
    2cd2:	07 c0       	rjmp	.+14     	; 0x2ce2 <vfprintf+0x1a0>
    2cd4:	1a c0       	rjmp	.+52     	; 0x2d0a <vfprintf+0x1c8>
    2cd6:	80 e2       	ldi	r24, 0x20	; 32
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	b3 01       	movw	r22, r6
    2cdc:	0e 94 94 17 	call	0x2f28	; 0x2f28 <fputc>
    2ce0:	ea 94       	dec	r14
    2ce2:	8e 2d       	mov	r24, r14
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	08 17       	cp	r16, r24
    2ce8:	19 07       	cpc	r17, r25
    2cea:	a8 f3       	brcs	.-22     	; 0x2cd6 <vfprintf+0x194>
    2cec:	0e c0       	rjmp	.+28     	; 0x2d0a <vfprintf+0x1c8>
    2cee:	f6 01       	movw	r30, r12
    2cf0:	f7 fc       	sbrc	r15, 7
    2cf2:	85 91       	lpm	r24, Z+
    2cf4:	f7 fe       	sbrs	r15, 7
    2cf6:	81 91       	ld	r24, Z+
    2cf8:	6f 01       	movw	r12, r30
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	b3 01       	movw	r22, r6
    2cfe:	0e 94 94 17 	call	0x2f28	; 0x2f28 <fputc>
    2d02:	e1 10       	cpse	r14, r1
    2d04:	ea 94       	dec	r14
    2d06:	01 50       	subi	r16, 0x01	; 1
    2d08:	10 40       	sbci	r17, 0x00	; 0
    2d0a:	01 15       	cp	r16, r1
    2d0c:	11 05       	cpc	r17, r1
    2d0e:	79 f7       	brne	.-34     	; 0x2cee <vfprintf+0x1ac>
    2d10:	ea c0       	rjmp	.+468    	; 0x2ee6 <vfprintf+0x3a4>
    2d12:	94 36       	cpi	r25, 0x64	; 100
    2d14:	11 f0       	breq	.+4      	; 0x2d1a <vfprintf+0x1d8>
    2d16:	99 36       	cpi	r25, 0x69	; 105
    2d18:	69 f5       	brne	.+90     	; 0x2d74 <vfprintf+0x232>
    2d1a:	f7 fe       	sbrs	r15, 7
    2d1c:	08 c0       	rjmp	.+16     	; 0x2d2e <vfprintf+0x1ec>
    2d1e:	f5 01       	movw	r30, r10
    2d20:	20 81       	ld	r18, Z
    2d22:	31 81       	ldd	r19, Z+1	; 0x01
    2d24:	42 81       	ldd	r20, Z+2	; 0x02
    2d26:	53 81       	ldd	r21, Z+3	; 0x03
    2d28:	84 e0       	ldi	r24, 0x04	; 4
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	0a c0       	rjmp	.+20     	; 0x2d42 <vfprintf+0x200>
    2d2e:	f5 01       	movw	r30, r10
    2d30:	80 81       	ld	r24, Z
    2d32:	91 81       	ldd	r25, Z+1	; 0x01
    2d34:	9c 01       	movw	r18, r24
    2d36:	44 27       	eor	r20, r20
    2d38:	37 fd       	sbrc	r19, 7
    2d3a:	40 95       	com	r20
    2d3c:	54 2f       	mov	r21, r20
    2d3e:	82 e0       	ldi	r24, 0x02	; 2
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	a8 0e       	add	r10, r24
    2d44:	b9 1e       	adc	r11, r25
    2d46:	9f e6       	ldi	r25, 0x6F	; 111
    2d48:	f9 22       	and	r15, r25
    2d4a:	57 ff       	sbrs	r21, 7
    2d4c:	09 c0       	rjmp	.+18     	; 0x2d60 <vfprintf+0x21e>
    2d4e:	50 95       	com	r21
    2d50:	40 95       	com	r20
    2d52:	30 95       	com	r19
    2d54:	21 95       	neg	r18
    2d56:	3f 4f       	sbci	r19, 0xFF	; 255
    2d58:	4f 4f       	sbci	r20, 0xFF	; 255
    2d5a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d5c:	e0 e8       	ldi	r30, 0x80	; 128
    2d5e:	fe 2a       	or	r15, r30
    2d60:	ca 01       	movw	r24, r20
    2d62:	b9 01       	movw	r22, r18
    2d64:	a1 01       	movw	r20, r2
    2d66:	2a e0       	ldi	r18, 0x0A	; 10
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <__ultoa_invert>
    2d6e:	d8 2e       	mov	r13, r24
    2d70:	d2 18       	sub	r13, r2
    2d72:	40 c0       	rjmp	.+128    	; 0x2df4 <vfprintf+0x2b2>
    2d74:	95 37       	cpi	r25, 0x75	; 117
    2d76:	29 f4       	brne	.+10     	; 0x2d82 <vfprintf+0x240>
    2d78:	1f 2d       	mov	r17, r15
    2d7a:	1f 7e       	andi	r17, 0xEF	; 239
    2d7c:	2a e0       	ldi	r18, 0x0A	; 10
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	1d c0       	rjmp	.+58     	; 0x2dbc <vfprintf+0x27a>
    2d82:	1f 2d       	mov	r17, r15
    2d84:	19 7f       	andi	r17, 0xF9	; 249
    2d86:	9f 36       	cpi	r25, 0x6F	; 111
    2d88:	61 f0       	breq	.+24     	; 0x2da2 <vfprintf+0x260>
    2d8a:	90 37       	cpi	r25, 0x70	; 112
    2d8c:	20 f4       	brcc	.+8      	; 0x2d96 <vfprintf+0x254>
    2d8e:	98 35       	cpi	r25, 0x58	; 88
    2d90:	09 f0       	breq	.+2      	; 0x2d94 <vfprintf+0x252>
    2d92:	ac c0       	rjmp	.+344    	; 0x2eec <vfprintf+0x3aa>
    2d94:	0f c0       	rjmp	.+30     	; 0x2db4 <vfprintf+0x272>
    2d96:	90 37       	cpi	r25, 0x70	; 112
    2d98:	39 f0       	breq	.+14     	; 0x2da8 <vfprintf+0x266>
    2d9a:	98 37       	cpi	r25, 0x78	; 120
    2d9c:	09 f0       	breq	.+2      	; 0x2da0 <vfprintf+0x25e>
    2d9e:	a6 c0       	rjmp	.+332    	; 0x2eec <vfprintf+0x3aa>
    2da0:	04 c0       	rjmp	.+8      	; 0x2daa <vfprintf+0x268>
    2da2:	28 e0       	ldi	r18, 0x08	; 8
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	0a c0       	rjmp	.+20     	; 0x2dbc <vfprintf+0x27a>
    2da8:	10 61       	ori	r17, 0x10	; 16
    2daa:	14 fd       	sbrc	r17, 4
    2dac:	14 60       	ori	r17, 0x04	; 4
    2dae:	20 e1       	ldi	r18, 0x10	; 16
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	04 c0       	rjmp	.+8      	; 0x2dbc <vfprintf+0x27a>
    2db4:	14 fd       	sbrc	r17, 4
    2db6:	16 60       	ori	r17, 0x06	; 6
    2db8:	20 e1       	ldi	r18, 0x10	; 16
    2dba:	32 e0       	ldi	r19, 0x02	; 2
    2dbc:	17 ff       	sbrs	r17, 7
    2dbe:	08 c0       	rjmp	.+16     	; 0x2dd0 <vfprintf+0x28e>
    2dc0:	f5 01       	movw	r30, r10
    2dc2:	60 81       	ld	r22, Z
    2dc4:	71 81       	ldd	r23, Z+1	; 0x01
    2dc6:	82 81       	ldd	r24, Z+2	; 0x02
    2dc8:	93 81       	ldd	r25, Z+3	; 0x03
    2dca:	44 e0       	ldi	r20, 0x04	; 4
    2dcc:	50 e0       	ldi	r21, 0x00	; 0
    2dce:	08 c0       	rjmp	.+16     	; 0x2de0 <vfprintf+0x29e>
    2dd0:	f5 01       	movw	r30, r10
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	bc 01       	movw	r22, r24
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	42 e0       	ldi	r20, 0x02	; 2
    2dde:	50 e0       	ldi	r21, 0x00	; 0
    2de0:	a4 0e       	add	r10, r20
    2de2:	b5 1e       	adc	r11, r21
    2de4:	a1 01       	movw	r20, r2
    2de6:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <__ultoa_invert>
    2dea:	d8 2e       	mov	r13, r24
    2dec:	d2 18       	sub	r13, r2
    2dee:	8f e7       	ldi	r24, 0x7F	; 127
    2df0:	f8 2e       	mov	r15, r24
    2df2:	f1 22       	and	r15, r17
    2df4:	f6 fe       	sbrs	r15, 6
    2df6:	0b c0       	rjmp	.+22     	; 0x2e0e <vfprintf+0x2cc>
    2df8:	5e ef       	ldi	r21, 0xFE	; 254
    2dfa:	f5 22       	and	r15, r21
    2dfc:	d9 14       	cp	r13, r9
    2dfe:	38 f4       	brcc	.+14     	; 0x2e0e <vfprintf+0x2cc>
    2e00:	f4 fe       	sbrs	r15, 4
    2e02:	07 c0       	rjmp	.+14     	; 0x2e12 <vfprintf+0x2d0>
    2e04:	f2 fc       	sbrc	r15, 2
    2e06:	05 c0       	rjmp	.+10     	; 0x2e12 <vfprintf+0x2d0>
    2e08:	8f ee       	ldi	r24, 0xEF	; 239
    2e0a:	f8 22       	and	r15, r24
    2e0c:	02 c0       	rjmp	.+4      	; 0x2e12 <vfprintf+0x2d0>
    2e0e:	1d 2d       	mov	r17, r13
    2e10:	01 c0       	rjmp	.+2      	; 0x2e14 <vfprintf+0x2d2>
    2e12:	19 2d       	mov	r17, r9
    2e14:	f4 fe       	sbrs	r15, 4
    2e16:	0d c0       	rjmp	.+26     	; 0x2e32 <vfprintf+0x2f0>
    2e18:	fe 01       	movw	r30, r28
    2e1a:	ed 0d       	add	r30, r13
    2e1c:	f1 1d       	adc	r31, r1
    2e1e:	80 81       	ld	r24, Z
    2e20:	80 33       	cpi	r24, 0x30	; 48
    2e22:	19 f4       	brne	.+6      	; 0x2e2a <vfprintf+0x2e8>
    2e24:	99 ee       	ldi	r25, 0xE9	; 233
    2e26:	f9 22       	and	r15, r25
    2e28:	08 c0       	rjmp	.+16     	; 0x2e3a <vfprintf+0x2f8>
    2e2a:	1f 5f       	subi	r17, 0xFF	; 255
    2e2c:	f2 fe       	sbrs	r15, 2
    2e2e:	05 c0       	rjmp	.+10     	; 0x2e3a <vfprintf+0x2f8>
    2e30:	03 c0       	rjmp	.+6      	; 0x2e38 <vfprintf+0x2f6>
    2e32:	8f 2d       	mov	r24, r15
    2e34:	86 78       	andi	r24, 0x86	; 134
    2e36:	09 f0       	breq	.+2      	; 0x2e3a <vfprintf+0x2f8>
    2e38:	1f 5f       	subi	r17, 0xFF	; 255
    2e3a:	0f 2d       	mov	r16, r15
    2e3c:	f3 fc       	sbrc	r15, 3
    2e3e:	14 c0       	rjmp	.+40     	; 0x2e68 <vfprintf+0x326>
    2e40:	f0 fe       	sbrs	r15, 0
    2e42:	0f c0       	rjmp	.+30     	; 0x2e62 <vfprintf+0x320>
    2e44:	1e 15       	cp	r17, r14
    2e46:	10 f0       	brcs	.+4      	; 0x2e4c <vfprintf+0x30a>
    2e48:	9d 2c       	mov	r9, r13
    2e4a:	0b c0       	rjmp	.+22     	; 0x2e62 <vfprintf+0x320>
    2e4c:	9d 2c       	mov	r9, r13
    2e4e:	9e 0c       	add	r9, r14
    2e50:	91 1a       	sub	r9, r17
    2e52:	1e 2d       	mov	r17, r14
    2e54:	06 c0       	rjmp	.+12     	; 0x2e62 <vfprintf+0x320>
    2e56:	80 e2       	ldi	r24, 0x20	; 32
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	b3 01       	movw	r22, r6
    2e5c:	0e 94 94 17 	call	0x2f28	; 0x2f28 <fputc>
    2e60:	1f 5f       	subi	r17, 0xFF	; 255
    2e62:	1e 15       	cp	r17, r14
    2e64:	c0 f3       	brcs	.-16     	; 0x2e56 <vfprintf+0x314>
    2e66:	04 c0       	rjmp	.+8      	; 0x2e70 <vfprintf+0x32e>
    2e68:	1e 15       	cp	r17, r14
    2e6a:	10 f4       	brcc	.+4      	; 0x2e70 <vfprintf+0x32e>
    2e6c:	e1 1a       	sub	r14, r17
    2e6e:	01 c0       	rjmp	.+2      	; 0x2e72 <vfprintf+0x330>
    2e70:	ee 24       	eor	r14, r14
    2e72:	04 ff       	sbrs	r16, 4
    2e74:	0f c0       	rjmp	.+30     	; 0x2e94 <vfprintf+0x352>
    2e76:	80 e3       	ldi	r24, 0x30	; 48
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	b3 01       	movw	r22, r6
    2e7c:	0e 94 94 17 	call	0x2f28	; 0x2f28 <fputc>
    2e80:	02 ff       	sbrs	r16, 2
    2e82:	1d c0       	rjmp	.+58     	; 0x2ebe <vfprintf+0x37c>
    2e84:	01 fd       	sbrc	r16, 1
    2e86:	03 c0       	rjmp	.+6      	; 0x2e8e <vfprintf+0x34c>
    2e88:	88 e7       	ldi	r24, 0x78	; 120
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	0e c0       	rjmp	.+28     	; 0x2eaa <vfprintf+0x368>
    2e8e:	88 e5       	ldi	r24, 0x58	; 88
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	0b c0       	rjmp	.+22     	; 0x2eaa <vfprintf+0x368>
    2e94:	80 2f       	mov	r24, r16
    2e96:	86 78       	andi	r24, 0x86	; 134
    2e98:	91 f0       	breq	.+36     	; 0x2ebe <vfprintf+0x37c>
    2e9a:	01 ff       	sbrs	r16, 1
    2e9c:	02 c0       	rjmp	.+4      	; 0x2ea2 <vfprintf+0x360>
    2e9e:	8b e2       	ldi	r24, 0x2B	; 43
    2ea0:	01 c0       	rjmp	.+2      	; 0x2ea4 <vfprintf+0x362>
    2ea2:	80 e2       	ldi	r24, 0x20	; 32
    2ea4:	f7 fc       	sbrc	r15, 7
    2ea6:	8d e2       	ldi	r24, 0x2D	; 45
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	b3 01       	movw	r22, r6
    2eac:	0e 94 94 17 	call	0x2f28	; 0x2f28 <fputc>
    2eb0:	06 c0       	rjmp	.+12     	; 0x2ebe <vfprintf+0x37c>
    2eb2:	80 e3       	ldi	r24, 0x30	; 48
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	b3 01       	movw	r22, r6
    2eb8:	0e 94 94 17 	call	0x2f28	; 0x2f28 <fputc>
    2ebc:	9a 94       	dec	r9
    2ebe:	d9 14       	cp	r13, r9
    2ec0:	c0 f3       	brcs	.-16     	; 0x2eb2 <vfprintf+0x370>
    2ec2:	da 94       	dec	r13
    2ec4:	f1 01       	movw	r30, r2
    2ec6:	ed 0d       	add	r30, r13
    2ec8:	f1 1d       	adc	r31, r1
    2eca:	80 81       	ld	r24, Z
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	b3 01       	movw	r22, r6
    2ed0:	0e 94 94 17 	call	0x2f28	; 0x2f28 <fputc>
    2ed4:	dd 20       	and	r13, r13
    2ed6:	a9 f7       	brne	.-22     	; 0x2ec2 <vfprintf+0x380>
    2ed8:	06 c0       	rjmp	.+12     	; 0x2ee6 <vfprintf+0x3a4>
    2eda:	80 e2       	ldi	r24, 0x20	; 32
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	b3 01       	movw	r22, r6
    2ee0:	0e 94 94 17 	call	0x2f28	; 0x2f28 <fputc>
    2ee4:	ea 94       	dec	r14
    2ee6:	ee 20       	and	r14, r14
    2ee8:	c1 f7       	brne	.-16     	; 0x2eda <vfprintf+0x398>
    2eea:	43 ce       	rjmp	.-890    	; 0x2b72 <vfprintf+0x30>
    2eec:	f3 01       	movw	r30, r6
    2eee:	66 81       	ldd	r22, Z+6	; 0x06
    2ef0:	77 81       	ldd	r23, Z+7	; 0x07
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	2b 96       	adiw	r28, 0x0b	; 11
    2ef6:	e2 e1       	ldi	r30, 0x12	; 18
    2ef8:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__epilogue_restores__>

00002efc <strnlen_P>:
    2efc:	fc 01       	movw	r30, r24
    2efe:	05 90       	lpm	r0, Z+
    2f00:	61 50       	subi	r22, 0x01	; 1
    2f02:	70 40       	sbci	r23, 0x00	; 0
    2f04:	01 10       	cpse	r0, r1
    2f06:	d8 f7       	brcc	.-10     	; 0x2efe <strnlen_P+0x2>
    2f08:	80 95       	com	r24
    2f0a:	90 95       	com	r25
    2f0c:	8e 0f       	add	r24, r30
    2f0e:	9f 1f       	adc	r25, r31
    2f10:	08 95       	ret

00002f12 <strnlen>:
    2f12:	fc 01       	movw	r30, r24
    2f14:	61 50       	subi	r22, 0x01	; 1
    2f16:	70 40       	sbci	r23, 0x00	; 0
    2f18:	01 90       	ld	r0, Z+
    2f1a:	01 10       	cpse	r0, r1
    2f1c:	d8 f7       	brcc	.-10     	; 0x2f14 <strnlen+0x2>
    2f1e:	80 95       	com	r24
    2f20:	90 95       	com	r25
    2f22:	8e 0f       	add	r24, r30
    2f24:	9f 1f       	adc	r25, r31
    2f26:	08 95       	ret

00002f28 <fputc>:
    2f28:	0f 93       	push	r16
    2f2a:	1f 93       	push	r17
    2f2c:	cf 93       	push	r28
    2f2e:	df 93       	push	r29
    2f30:	8c 01       	movw	r16, r24
    2f32:	eb 01       	movw	r28, r22
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	81 ff       	sbrs	r24, 1
    2f38:	1b c0       	rjmp	.+54     	; 0x2f70 <fputc+0x48>
    2f3a:	82 ff       	sbrs	r24, 2
    2f3c:	0d c0       	rjmp	.+26     	; 0x2f58 <fputc+0x30>
    2f3e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f40:	3f 81       	ldd	r19, Y+7	; 0x07
    2f42:	8c 81       	ldd	r24, Y+4	; 0x04
    2f44:	9d 81       	ldd	r25, Y+5	; 0x05
    2f46:	28 17       	cp	r18, r24
    2f48:	39 07       	cpc	r19, r25
    2f4a:	64 f4       	brge	.+24     	; 0x2f64 <fputc+0x3c>
    2f4c:	e8 81       	ld	r30, Y
    2f4e:	f9 81       	ldd	r31, Y+1	; 0x01
    2f50:	01 93       	st	Z+, r16
    2f52:	f9 83       	std	Y+1, r31	; 0x01
    2f54:	e8 83       	st	Y, r30
    2f56:	06 c0       	rjmp	.+12     	; 0x2f64 <fputc+0x3c>
    2f58:	e8 85       	ldd	r30, Y+8	; 0x08
    2f5a:	f9 85       	ldd	r31, Y+9	; 0x09
    2f5c:	80 2f       	mov	r24, r16
    2f5e:	09 95       	icall
    2f60:	89 2b       	or	r24, r25
    2f62:	31 f4       	brne	.+12     	; 0x2f70 <fputc+0x48>
    2f64:	8e 81       	ldd	r24, Y+6	; 0x06
    2f66:	9f 81       	ldd	r25, Y+7	; 0x07
    2f68:	01 96       	adiw	r24, 0x01	; 1
    2f6a:	9f 83       	std	Y+7, r25	; 0x07
    2f6c:	8e 83       	std	Y+6, r24	; 0x06
    2f6e:	02 c0       	rjmp	.+4      	; 0x2f74 <fputc+0x4c>
    2f70:	0f ef       	ldi	r16, 0xFF	; 255
    2f72:	1f ef       	ldi	r17, 0xFF	; 255
    2f74:	c8 01       	movw	r24, r16
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	1f 91       	pop	r17
    2f7c:	0f 91       	pop	r16
    2f7e:	08 95       	ret

00002f80 <__ultoa_invert>:
    2f80:	fa 01       	movw	r30, r20
    2f82:	aa 27       	eor	r26, r26
    2f84:	28 30       	cpi	r18, 0x08	; 8
    2f86:	51 f1       	breq	.+84     	; 0x2fdc <__ultoa_invert+0x5c>
    2f88:	20 31       	cpi	r18, 0x10	; 16
    2f8a:	81 f1       	breq	.+96     	; 0x2fec <__ultoa_invert+0x6c>
    2f8c:	e8 94       	clt
    2f8e:	6f 93       	push	r22
    2f90:	6e 7f       	andi	r22, 0xFE	; 254
    2f92:	6e 5f       	subi	r22, 0xFE	; 254
    2f94:	7f 4f       	sbci	r23, 0xFF	; 255
    2f96:	8f 4f       	sbci	r24, 0xFF	; 255
    2f98:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9a:	af 4f       	sbci	r26, 0xFF	; 255
    2f9c:	b1 e0       	ldi	r27, 0x01	; 1
    2f9e:	3e d0       	rcall	.+124    	; 0x301c <__ultoa_invert+0x9c>
    2fa0:	b4 e0       	ldi	r27, 0x04	; 4
    2fa2:	3c d0       	rcall	.+120    	; 0x301c <__ultoa_invert+0x9c>
    2fa4:	67 0f       	add	r22, r23
    2fa6:	78 1f       	adc	r23, r24
    2fa8:	89 1f       	adc	r24, r25
    2faa:	9a 1f       	adc	r25, r26
    2fac:	a1 1d       	adc	r26, r1
    2fae:	68 0f       	add	r22, r24
    2fb0:	79 1f       	adc	r23, r25
    2fb2:	8a 1f       	adc	r24, r26
    2fb4:	91 1d       	adc	r25, r1
    2fb6:	a1 1d       	adc	r26, r1
    2fb8:	6a 0f       	add	r22, r26
    2fba:	71 1d       	adc	r23, r1
    2fbc:	81 1d       	adc	r24, r1
    2fbe:	91 1d       	adc	r25, r1
    2fc0:	a1 1d       	adc	r26, r1
    2fc2:	20 d0       	rcall	.+64     	; 0x3004 <__ultoa_invert+0x84>
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <__ultoa_invert+0x48>
    2fc6:	68 94       	set
    2fc8:	3f 91       	pop	r19
    2fca:	2a e0       	ldi	r18, 0x0A	; 10
    2fcc:	26 9f       	mul	r18, r22
    2fce:	11 24       	eor	r1, r1
    2fd0:	30 19       	sub	r19, r0
    2fd2:	30 5d       	subi	r19, 0xD0	; 208
    2fd4:	31 93       	st	Z+, r19
    2fd6:	de f6       	brtc	.-74     	; 0x2f8e <__ultoa_invert+0xe>
    2fd8:	cf 01       	movw	r24, r30
    2fda:	08 95       	ret
    2fdc:	46 2f       	mov	r20, r22
    2fde:	47 70       	andi	r20, 0x07	; 7
    2fe0:	40 5d       	subi	r20, 0xD0	; 208
    2fe2:	41 93       	st	Z+, r20
    2fe4:	b3 e0       	ldi	r27, 0x03	; 3
    2fe6:	0f d0       	rcall	.+30     	; 0x3006 <__ultoa_invert+0x86>
    2fe8:	c9 f7       	brne	.-14     	; 0x2fdc <__ultoa_invert+0x5c>
    2fea:	f6 cf       	rjmp	.-20     	; 0x2fd8 <__ultoa_invert+0x58>
    2fec:	46 2f       	mov	r20, r22
    2fee:	4f 70       	andi	r20, 0x0F	; 15
    2ff0:	40 5d       	subi	r20, 0xD0	; 208
    2ff2:	4a 33       	cpi	r20, 0x3A	; 58
    2ff4:	18 f0       	brcs	.+6      	; 0x2ffc <__ultoa_invert+0x7c>
    2ff6:	49 5d       	subi	r20, 0xD9	; 217
    2ff8:	31 fd       	sbrc	r19, 1
    2ffa:	40 52       	subi	r20, 0x20	; 32
    2ffc:	41 93       	st	Z+, r20
    2ffe:	02 d0       	rcall	.+4      	; 0x3004 <__ultoa_invert+0x84>
    3000:	a9 f7       	brne	.-22     	; 0x2fec <__ultoa_invert+0x6c>
    3002:	ea cf       	rjmp	.-44     	; 0x2fd8 <__ultoa_invert+0x58>
    3004:	b4 e0       	ldi	r27, 0x04	; 4
    3006:	a6 95       	lsr	r26
    3008:	97 95       	ror	r25
    300a:	87 95       	ror	r24
    300c:	77 95       	ror	r23
    300e:	67 95       	ror	r22
    3010:	ba 95       	dec	r27
    3012:	c9 f7       	brne	.-14     	; 0x3006 <__ultoa_invert+0x86>
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	61 05       	cpc	r22, r1
    3018:	71 05       	cpc	r23, r1
    301a:	08 95       	ret
    301c:	9b 01       	movw	r18, r22
    301e:	ac 01       	movw	r20, r24
    3020:	0a 2e       	mov	r0, r26
    3022:	06 94       	lsr	r0
    3024:	57 95       	ror	r21
    3026:	47 95       	ror	r20
    3028:	37 95       	ror	r19
    302a:	27 95       	ror	r18
    302c:	ba 95       	dec	r27
    302e:	c9 f7       	brne	.-14     	; 0x3022 <__ultoa_invert+0xa2>
    3030:	62 0f       	add	r22, r18
    3032:	73 1f       	adc	r23, r19
    3034:	84 1f       	adc	r24, r20
    3036:	95 1f       	adc	r25, r21
    3038:	a0 1d       	adc	r26, r0
    303a:	08 95       	ret

0000303c <_exit>:
    303c:	f8 94       	cli

0000303e <__stop_program>:
    303e:	ff cf       	rjmp	.-2      	; 0x303e <__stop_program>
