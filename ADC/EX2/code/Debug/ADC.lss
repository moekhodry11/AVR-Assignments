
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  000030cc  00003160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800186  00800186  00003286  2**0
                  ALLOC
  3 .stab         00002250  00000000  00000000  00003288  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001074  00000000  00000000  000054d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000654c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  000066cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000689d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  000088ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00009a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000aa14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000abb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000ae72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8f 14 	call	0x291e	; 0x291e <main>
      8a:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__fixsfsi+0x80>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__fixsfsi+0x80>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__fixsfsi+0x8a>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__fixsfsi+0x94>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__fixsfsi+0x80>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__fixsfsi+0x8a>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__fixsfsi+0x94>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__fixsfsi+0x68>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__fixsfsi+0x60>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__fixsfsi+0x9c>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__fixsfsi+0x9c>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__fixsfsi+0x9c>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__fixsfsi+0x9c>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e2 58       	subi	r30, 0x82	; 130
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <ADC_voidInit>:
static void(*ADC_pfNotification)(u16) = NULL;
/* ADC busy flag */
static u8 ADC_u8BusyFlag = 0;

void ADC_voidInit(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
		2- Right Adjust
		3- Disable AutoTrigger
		4- Select CLK/64
		5- Enable ADC
	 */
	CLR_BIT(ADC_u8_ADMUX_REG,7);
     ca8:	a7 e2       	ldi	r26, 0x27	; 39
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e7 e2       	ldi	r30, 0x27	; 39
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
     cb6:	a7 e2       	ldi	r26, 0x27	; 39
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e7 e2       	ldi	r30, 0x27	; 39
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	80 64       	ori	r24, 0x40	; 64
     cc2:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADMUX_REG,5);
     cc4:	a7 e2       	ldi	r26, 0x27	; 39
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e7 e2       	ldi	r30, 0x27	; 39
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8f 7d       	andi	r24, 0xDF	; 223
     cd0:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADCSRA_REG,5);
     cd2:	a6 e2       	ldi	r26, 0x26	; 38
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e6 e2       	ldi	r30, 0x26	; 38
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	8f 7d       	andi	r24, 0xDF	; 223
     cde:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,2);
     ce0:	a6 e2       	ldi	r26, 0x26	; 38
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e6 e2       	ldi	r30, 0x26	; 38
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	84 60       	ori	r24, 0x04	; 4
     cec:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
     cee:	a6 e2       	ldi	r26, 0x26	; 38
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e6 e2       	ldi	r30, 0x26	; 38
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	82 60       	ori	r24, 0x02	; 2
     cfa:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
     cfc:	a6 e2       	ldi	r26, 0x26	; 38
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e6 e2       	ldi	r30, 0x26	; 38
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	8e 7f       	andi	r24, 0xFE	; 254
     d08:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,7);
     d0a:	a6 e2       	ldi	r26, 0x26	; 38
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e6 e2       	ldi	r30, 0x26	; 38
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	80 68       	ori	r24, 0x80	; 128
     d16:	8c 93       	st	X, r24
}
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <ADC_u8GetDigitalValueSynchNonBlocking>:

u8   ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 * Copy_pu16DigitalValue)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	28 97       	sbiw	r28, 0x08	; 8
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	8e 83       	std	Y+6, r24	; 0x06
     d34:	78 87       	std	Y+8, r23	; 0x08
     d36:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
     d3c:	19 82       	std	Y+1, r1	; 0x01
     d3e:	1a 82       	std	Y+2, r1	; 0x02
     d40:	1b 82       	std	Y+3, r1	; 0x03
     d42:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32) && (Copy_pu16DigitalValue != NULL))
     d44:	8e 81       	ldd	r24, Y+6	; 0x06
     d46:	80 32       	cpi	r24, 0x20	; 32
     d48:	08 f0       	brcs	.+2      	; 0xd4c <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
     d4a:	5b c0       	rjmp	.+182    	; 0xe02 <ADC_u8GetDigitalValueSynchNonBlocking+0xe4>
     d4c:	8f 81       	ldd	r24, Y+7	; 0x07
     d4e:	98 85       	ldd	r25, Y+8	; 0x08
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	09 f4       	brne	.+2      	; 0xd56 <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
     d54:	56 c0       	rjmp	.+172    	; 0xe02 <ADC_u8GetDigitalValueSynchNonBlocking+0xe4>
	{
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     d56:	a7 e2       	ldi	r26, 0x27	; 39
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e7 e2       	ldi	r30, 0x27	; 39
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	80 7e       	andi	r24, 0xE0	; 224
     d62:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     d64:	a7 e2       	ldi	r26, 0x27	; 39
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e2       	ldi	r30, 0x27	; 39
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	90 81       	ld	r25, Z
     d6e:	8e 81       	ldd	r24, Y+6	; 0x06
     d70:	89 2b       	or	r24, r25
     d72:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     d74:	a6 e2       	ldi	r26, 0x26	; 38
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e6 e2       	ldi	r30, 0x26	; 38
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	80 64       	ori	r24, 0x40	; 64
     d80:	8c 93       	st	X, r24
     d82:	0b c0       	rjmp	.+22     	; 0xd9a <ADC_u8GetDigitalValueSynchNonBlocking+0x7c>
		/* Wait flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)== 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
		{
			Local_u32TimeOutCounter++;
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	ab 81       	ldd	r26, Y+3	; 0x03
     d8a:	bc 81       	ldd	r27, Y+4	; 0x04
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	a1 1d       	adc	r26, r1
     d90:	b1 1d       	adc	r27, r1
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	ab 83       	std	Y+3, r26	; 0x03
     d98:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)== 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
     d9a:	e6 e2       	ldi	r30, 0x26	; 38
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	82 95       	swap	r24
     da2:	8f 70       	andi	r24, 0x0F	; 15
     da4:	88 2f       	mov	r24, r24
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	81 70       	andi	r24, 0x01	; 1
     daa:	90 70       	andi	r25, 0x00	; 0
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	61 f4       	brne	.+24     	; 0xdc8 <ADC_u8GetDigitalValueSynchNonBlocking+0xaa>
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	ab 81       	ldd	r26, Y+3	; 0x03
     db6:	bc 81       	ldd	r27, Y+4	; 0x04
     db8:	80 35       	cpi	r24, 0x50	; 80
     dba:	23 ec       	ldi	r18, 0xC3	; 195
     dbc:	92 07       	cpc	r25, r18
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	a2 07       	cpc	r26, r18
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	b2 07       	cpc	r27, r18
     dc6:	f0 f2       	brcs	.-68     	; 0xd84 <ADC_u8GetDigitalValueSynchNonBlocking+0x66>
		{
			Local_u32TimeOutCounter++;
		}
		//while(!GET_BIT(ADC_u8_ADCSRA_REG,4));
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
     dc8:	e6 e2       	ldi	r30, 0x26	; 38
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	82 95       	swap	r24
     dd0:	8f 70       	andi	r24, 0x0F	; 15
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	81 70       	andi	r24, 0x01	; 1
     dd8:	90 70       	andi	r25, 0x00	; 0
     dda:	88 23       	and	r24, r24
     ddc:	81 f0       	breq	.+32     	; 0xdfe <ADC_u8GetDigitalValueSynchNonBlocking+0xe0>
		{
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
     dde:	a6 e2       	ldi	r26, 0x26	; 38
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e6 e2       	ldi	r30, 0x26	; 38
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	80 61       	ori	r24, 0x10	; 16
     dea:	8c 93       	st	X, r24
			/* Read the Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
     dec:	e4 e2       	ldi	r30, 0x24	; 36
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	91 81       	ldd	r25, Z+1	; 0x01
     df4:	ef 81       	ldd	r30, Y+7	; 0x07
     df6:	f8 85       	ldd	r31, Y+8	; 0x08
     df8:	91 83       	std	Z+1, r25	; 0x01
     dfa:	80 83       	st	Z, r24
     dfc:	03 c0       	rjmp	.+6      	; 0xe04 <ADC_u8GetDigitalValueSynchNonBlocking+0xe6>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
     dfe:	1d 82       	std	Y+5, r1	; 0x05
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <ADC_u8GetDigitalValueSynchNonBlocking+0xe6>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e02:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e06:	28 96       	adiw	r28, 0x08	; 8
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <ADC_u8GetDigitalValueAsynch>:
u8   ADC_u8GetDigitalValueAsynch          (u8 Copy_u8ChannelNb,void(*Copy_pfNotification)(u16))
{
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <ADC_u8GetDigitalValueAsynch+0x6>
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <ADC_u8GetDigitalValueAsynch+0x8>
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	8a 83       	std	Y+2, r24	; 0x02
     e26:	7c 83       	std	Y+4, r23	; 0x04
     e28:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32) && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag == 0))
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	80 32       	cpi	r24, 0x20	; 32
     e32:	78 f5       	brcc	.+94     	; 0xe92 <ADC_u8GetDigitalValueAsynch+0x7a>
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	59 f1       	breq	.+86     	; 0xe92 <ADC_u8GetDigitalValueAsynch+0x7a>
     e3c:	80 91 88 01 	lds	r24, 0x0188
     e40:	88 23       	and	r24, r24
     e42:	39 f5       	brne	.+78     	; 0xe92 <ADC_u8GetDigitalValueAsynch+0x7a>
	{
		/* Set Flag to make ADC is Busy */
		ADC_u8BusyFlag = 1;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 88 01 	sts	0x0188, r24
		/* update Global Pointer to a function */
		ADC_pfNotification = Copy_pfNotification;
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	90 93 87 01 	sts	0x0187, r25
     e52:	80 93 86 01 	sts	0x0186, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
     e56:	a6 e2       	ldi	r26, 0x26	; 38
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e6 e2       	ldi	r30, 0x26	; 38
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	8c 93       	st	X, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     e64:	a7 e2       	ldi	r26, 0x27	; 39
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e7 e2       	ldi	r30, 0x27	; 39
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 7e       	andi	r24, 0xE0	; 224
     e70:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     e72:	a7 e2       	ldi	r26, 0x27	; 39
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e7 e2       	ldi	r30, 0x27	; 39
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	90 81       	ld	r25, Z
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	89 2b       	or	r24, r25
     e80:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     e82:	a6 e2       	ldi	r26, 0x26	; 38
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e6 e2       	ldi	r30, 0x26	; 38
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	80 64       	ori	r24, 0x40	; 64
     e8e:	8c 93       	st	X, r24
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <ADC_u8GetDigitalValueAsynch+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e92:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     e94:	89 81       	ldd	r24, Y+1	; 0x01
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <ADC_u8GetADCRegValue>:
u8   ADC_u8GetADCRegValue                 (u16 * Copy_pu16ADCValue)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <ADC_u8GetADCRegValue+0x6>
     eaa:	0f 92       	push	r0
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	9b 83       	std	Y+3, r25	; 0x03
     eb2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCValue != NULL)
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	9b 81       	ldd	r25, Y+3	; 0x03
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	49 f0       	breq	.+18     	; 0xed2 <ADC_u8GetADCRegValue+0x2e>
	{
		/* Read ADC Register */
		*Copy_pu16ADCValue = ADC_u16_ADC_REG;
     ec0:	e4 e2       	ldi	r30, 0x24	; 36
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	91 81       	ldd	r25, Z+1	; 0x01
     ec8:	ea 81       	ldd	r30, Y+2	; 0x02
     eca:	fb 81       	ldd	r31, Y+3	; 0x03
     ecc:	91 83       	std	Z+1, r25	; 0x01
     ece:	80 83       	st	Z, r24
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <ADC_u8GetADCRegValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     ed2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState ;
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <__vector_16>:

/* Prototype for ADC ISR */
void __vector_16(void)     __attribute__((signal));
void __vector_16(void)
{
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
     f0c:	80 91 86 01 	lds	r24, 0x0186
     f10:	90 91 87 01 	lds	r25, 0x0187
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	99 f0       	breq	.+38     	; 0xf3e <__vector_16+0x5c>
	{
		/* Clear Flag */
		ADC_u8BusyFlag = 0;
     f18:	10 92 88 01 	sts	0x0188, r1
		/* Clear PIE of ADC */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
     f1c:	a6 e2       	ldi	r26, 0x26	; 38
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e6 e2       	ldi	r30, 0x26	; 38
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	87 7f       	andi	r24, 0xF7	; 247
     f28:	8c 93       	st	X, r24
		/* Calling Notification function */
		ADC_pfNotification(ADC_u16_ADC_REG);
     f2a:	20 91 86 01 	lds	r18, 0x0186
     f2e:	30 91 87 01 	lds	r19, 0x0187
     f32:	e4 e2       	ldi	r30, 0x24	; 36
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	f9 01       	movw	r30, r18
     f3c:	09 95       	icall
	}
}
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	ff 91       	pop	r31
     f44:	ef 91       	pop	r30
     f46:	bf 91       	pop	r27
     f48:	af 91       	pop	r26
     f4a:	9f 91       	pop	r25
     f4c:	8f 91       	pop	r24
     f4e:	7f 91       	pop	r23
     f50:	6f 91       	pop	r22
     f52:	5f 91       	pop	r21
     f54:	4f 91       	pop	r20
     f56:	3f 91       	pop	r19
     f58:	2f 91       	pop	r18
     f5a:	0f 90       	pop	r0
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	0f 90       	pop	r0
     f60:	1f 90       	pop	r1
     f62:	18 95       	reti

00000f64 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit         (void)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
     f6c:	ea e3       	ldi	r30, 0x3A	; 58
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	8e e0       	ldi	r24, 0x0E	; 14
     f72:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
     f74:	e7 e3       	ldi	r30, 0x37	; 55
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	87 e0       	ldi	r24, 0x07	; 7
     f7a:	80 83       	st	Z, r24
						   DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
     f7c:	e4 e3       	ldi	r30, 0x34	; 52
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	87 e0       	ldi	r24, 0x07	; 7
     f82:	80 83       	st	Z, r24
						   DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
     f84:	e1 e3       	ldi	r30, 0x31	; 49
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	80 83       	st	Z, r24
						   DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);						   

	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
     f8c:	eb e3       	ldi	r30, 0x3B	; 59
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	8e ef       	ldi	r24, 0xFE	; 254
     f92:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);
											                    
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
     f94:	e8 e3       	ldi	r30, 0x38	; 56
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	10 82       	st	Z, r1
						   DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);
											 
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
     f9a:	e5 e3       	ldi	r30, 0x35	; 53
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	10 82       	st	Z, r1
						   DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);
											 
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
     fa0:	e2 e3       	ldi	r30, 0x32	; 50
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	10 82       	st	Z, r1
						   DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);
}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <DIO_u8SetPinDirection>:

u8  DIO_u8SetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinDirection)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	2e 97       	sbiw	r28, 0x0e	; 14
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	8a 83       	std	Y+2, r24	; 0x02
     fc2:	6b 83       	std	Y+3, r22	; 0x03
     fc4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))		
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	84 30       	cpi	r24, 0x04	; 4
     fce:	08 f0       	brcs	.+2      	; 0xfd2 <DIO_u8SetPinDirection+0x26>
     fd0:	0c c1       	rjmp	.+536    	; 0x11ea <DIO_u8SetPinDirection+0x23e>
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	88 30       	cpi	r24, 0x08	; 8
     fd6:	08 f0       	brcs	.+2      	; 0xfda <DIO_u8SetPinDirection+0x2e>
     fd8:	08 c1       	rjmp	.+528    	; 0x11ea <DIO_u8SetPinDirection+0x23e>
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	21 f0       	breq	.+8      	; 0xfe8 <DIO_u8SetPinDirection+0x3c>
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	88 23       	and	r24, r24
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <DIO_u8SetPinDirection+0x3c>
     fe6:	01 c1       	rjmp	.+514    	; 0x11ea <DIO_u8SetPinDirection+0x23e>
	{
		switch (Copy_u8PortId)
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	3e 87       	std	Y+14, r19	; 0x0e
     ff0:	2d 87       	std	Y+13, r18	; 0x0d
     ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	91 05       	cpc	r25, r1
     ffa:	09 f4       	brne	.+2      	; 0xffe <DIO_u8SetPinDirection+0x52>
     ffc:	4f c0       	rjmp	.+158    	; 0x109c <DIO_u8SetPinDirection+0xf0>
     ffe:	2d 85       	ldd	r18, Y+13	; 0x0d
    1000:	3e 85       	ldd	r19, Y+14	; 0x0e
    1002:	22 30       	cpi	r18, 0x02	; 2
    1004:	31 05       	cpc	r19, r1
    1006:	2c f4       	brge	.+10     	; 0x1012 <DIO_u8SetPinDirection+0x66>
    1008:	8d 85       	ldd	r24, Y+13	; 0x0d
    100a:	9e 85       	ldd	r25, Y+14	; 0x0e
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	71 f0       	breq	.+28     	; 0x102c <DIO_u8SetPinDirection+0x80>
    1010:	ed c0       	rjmp	.+474    	; 0x11ec <DIO_u8SetPinDirection+0x240>
    1012:	2d 85       	ldd	r18, Y+13	; 0x0d
    1014:	3e 85       	ldd	r19, Y+14	; 0x0e
    1016:	22 30       	cpi	r18, 0x02	; 2
    1018:	31 05       	cpc	r19, r1
    101a:	09 f4       	brne	.+2      	; 0x101e <DIO_u8SetPinDirection+0x72>
    101c:	77 c0       	rjmp	.+238    	; 0x110c <DIO_u8SetPinDirection+0x160>
    101e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1020:	9e 85       	ldd	r25, Y+14	; 0x0e
    1022:	83 30       	cpi	r24, 0x03	; 3
    1024:	91 05       	cpc	r25, r1
    1026:	09 f4       	brne	.+2      	; 0x102a <DIO_u8SetPinDirection+0x7e>
    1028:	a9 c0       	rjmp	.+338    	; 0x117c <DIO_u8SetPinDirection+0x1d0>
    102a:	e0 c0       	rjmp	.+448    	; 0x11ec <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinDirection)
    102c:	8c 81       	ldd	r24, Y+4	; 0x04
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	3c 87       	std	Y+12, r19	; 0x0c
    1034:	2b 87       	std	Y+11, r18	; 0x0b
    1036:	8b 85       	ldd	r24, Y+11	; 0x0b
    1038:	9c 85       	ldd	r25, Y+12	; 0x0c
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	d1 f0       	breq	.+52     	; 0x1072 <DIO_u8SetPinDirection+0xc6>
    103e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1040:	3c 85       	ldd	r19, Y+12	; 0x0c
    1042:	21 30       	cpi	r18, 0x01	; 1
    1044:	31 05       	cpc	r19, r1
    1046:	09 f0       	breq	.+2      	; 0x104a <DIO_u8SetPinDirection+0x9e>
    1048:	d1 c0       	rjmp	.+418    	; 0x11ec <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    104a:	aa e3       	ldi	r26, 0x3A	; 58
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ea e3       	ldi	r30, 0x3A	; 58
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_u8SetPinDirection+0xbc>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_u8SetPinDirection+0xb8>
    106c:	84 2b       	or	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	bd c0       	rjmp	.+378    	; 0x11ec <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    1072:	aa e3       	ldi	r26, 0x3A	; 58
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ea e3       	ldi	r30, 0x3A	; 58
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_u8SetPinDirection+0xe4>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_u8SetPinDirection+0xe0>
    1094:	80 95       	com	r24
    1096:	84 23       	and	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	a8 c0       	rjmp	.+336    	; 0x11ec <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinDirection)
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	3a 87       	std	Y+10, r19	; 0x0a
    10a4:	29 87       	std	Y+9, r18	; 0x09
    10a6:	89 85       	ldd	r24, Y+9	; 0x09
    10a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	d1 f0       	breq	.+52     	; 0x10e2 <DIO_u8SetPinDirection+0x136>
    10ae:	29 85       	ldd	r18, Y+9	; 0x09
    10b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b2:	21 30       	cpi	r18, 0x01	; 1
    10b4:	31 05       	cpc	r19, r1
    10b6:	09 f0       	breq	.+2      	; 0x10ba <DIO_u8SetPinDirection+0x10e>
    10b8:	99 c0       	rjmp	.+306    	; 0x11ec <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    10ba:	a7 e3       	ldi	r26, 0x37	; 55
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e7 e3       	ldi	r30, 0x37	; 55
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_u8SetPinDirection+0x12c>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_u8SetPinDirection+0x128>
    10dc:	84 2b       	or	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	85 c0       	rjmp	.+266    	; 0x11ec <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    10e2:	a7 e3       	ldi	r26, 0x37	; 55
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e7 e3       	ldi	r30, 0x37	; 55
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_u8SetPinDirection+0x154>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_u8SetPinDirection+0x150>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	70 c0       	rjmp	.+224    	; 0x11ec <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinDirection)
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	38 87       	std	Y+8, r19	; 0x08
    1114:	2f 83       	std	Y+7, r18	; 0x07
    1116:	8f 81       	ldd	r24, Y+7	; 0x07
    1118:	98 85       	ldd	r25, Y+8	; 0x08
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	d1 f0       	breq	.+52     	; 0x1152 <DIO_u8SetPinDirection+0x1a6>
    111e:	2f 81       	ldd	r18, Y+7	; 0x07
    1120:	38 85       	ldd	r19, Y+8	; 0x08
    1122:	21 30       	cpi	r18, 0x01	; 1
    1124:	31 05       	cpc	r19, r1
    1126:	09 f0       	breq	.+2      	; 0x112a <DIO_u8SetPinDirection+0x17e>
    1128:	61 c0       	rjmp	.+194    	; 0x11ec <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    112a:	a4 e3       	ldi	r26, 0x34	; 52
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e4 e3       	ldi	r30, 0x34	; 52
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_u8SetPinDirection+0x19c>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_u8SetPinDirection+0x198>
    114c:	84 2b       	or	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	4d c0       	rjmp	.+154    	; 0x11ec <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    1152:	a4 e3       	ldi	r26, 0x34	; 52
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e4 e3       	ldi	r30, 0x34	; 52
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_u8SetPinDirection+0x1c4>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_u8SetPinDirection+0x1c0>
    1174:	80 95       	com	r24
    1176:	84 23       	and	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	38 c0       	rjmp	.+112    	; 0x11ec <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinDirection)
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	3e 83       	std	Y+6, r19	; 0x06
    1184:	2d 83       	std	Y+5, r18	; 0x05
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	c9 f0       	breq	.+50     	; 0x11c0 <DIO_u8SetPinDirection+0x214>
    118e:	2d 81       	ldd	r18, Y+5	; 0x05
    1190:	3e 81       	ldd	r19, Y+6	; 0x06
    1192:	21 30       	cpi	r18, 0x01	; 1
    1194:	31 05       	cpc	r19, r1
    1196:	51 f5       	brne	.+84     	; 0x11ec <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    1198:	a1 e3       	ldi	r26, 0x31	; 49
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e1 e3       	ldi	r30, 0x31	; 49
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_u8SetPinDirection+0x20a>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_u8SetPinDirection+0x206>
    11ba:	84 2b       	or	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	16 c0       	rjmp	.+44     	; 0x11ec <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    11c0:	a1 e3       	ldi	r26, 0x31	; 49
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e1 e3       	ldi	r30, 0x31	; 49
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_u8SetPinDirection+0x232>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_u8SetPinDirection+0x22e>
    11e2:	80 95       	com	r24
    11e4:	84 23       	and	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <DIO_u8SetPinDirection+0x240>
			break;			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    11ea:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ee:	2e 96       	adiw	r28, 0x0e	; 14
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <DIO_u8SetPinValue>:

u8  DIO_u8SetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinValue)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	2e 97       	sbiw	r28, 0x0e	; 14
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	8a 83       	std	Y+2, r24	; 0x02
    1216:	6b 83       	std	Y+3, r22	; 0x03
    1218:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	88 30       	cpi	r24, 0x08	; 8
    1222:	08 f0       	brcs	.+2      	; 0x1226 <DIO_u8SetPinValue+0x26>
    1224:	08 c1       	rjmp	.+528    	; 0x1436 <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	3e 87       	std	Y+14, r19	; 0x0e
    122e:	2d 87       	std	Y+13, r18	; 0x0d
    1230:	8d 85       	ldd	r24, Y+13	; 0x0d
    1232:	9e 85       	ldd	r25, Y+14	; 0x0e
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	91 05       	cpc	r25, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <DIO_u8SetPinValue+0x3c>
    123a:	50 c0       	rjmp	.+160    	; 0x12dc <DIO_u8SetPinValue+0xdc>
    123c:	2d 85       	ldd	r18, Y+13	; 0x0d
    123e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1240:	22 30       	cpi	r18, 0x02	; 2
    1242:	31 05       	cpc	r19, r1
    1244:	2c f4       	brge	.+10     	; 0x1250 <DIO_u8SetPinValue+0x50>
    1246:	8d 85       	ldd	r24, Y+13	; 0x0d
    1248:	9e 85       	ldd	r25, Y+14	; 0x0e
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	71 f0       	breq	.+28     	; 0x126a <DIO_u8SetPinValue+0x6a>
    124e:	f1 c0       	rjmp	.+482    	; 0x1432 <DIO_u8SetPinValue+0x232>
    1250:	2d 85       	ldd	r18, Y+13	; 0x0d
    1252:	3e 85       	ldd	r19, Y+14	; 0x0e
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	09 f4       	brne	.+2      	; 0x125c <DIO_u8SetPinValue+0x5c>
    125a:	79 c0       	rjmp	.+242    	; 0x134e <DIO_u8SetPinValue+0x14e>
    125c:	8d 85       	ldd	r24, Y+13	; 0x0d
    125e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	91 05       	cpc	r25, r1
    1264:	09 f4       	brne	.+2      	; 0x1268 <DIO_u8SetPinValue+0x68>
    1266:	ac c0       	rjmp	.+344    	; 0x13c0 <DIO_u8SetPinValue+0x1c0>
    1268:	e4 c0       	rjmp	.+456    	; 0x1432 <DIO_u8SetPinValue+0x232>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinValue)
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	3c 87       	std	Y+12, r19	; 0x0c
    1272:	2b 87       	std	Y+11, r18	; 0x0b
    1274:	8b 85       	ldd	r24, Y+11	; 0x0b
    1276:	9c 85       	ldd	r25, Y+12	; 0x0c
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	c9 f0       	breq	.+50     	; 0x12ae <DIO_u8SetPinValue+0xae>
    127c:	2b 85       	ldd	r18, Y+11	; 0x0b
    127e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1280:	21 30       	cpi	r18, 0x01	; 1
    1282:	31 05       	cpc	r19, r1
    1284:	49 f5       	brne	.+82     	; 0x12d8 <DIO_u8SetPinValue+0xd8>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    1286:	ab e3       	ldi	r26, 0x3B	; 59
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	eb e3       	ldi	r30, 0x3B	; 59
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_u8SetPinValue+0xa4>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_u8SetPinValue+0xa0>
    12a8:	84 2b       	or	r24, r20
    12aa:	8c 93       	st	X, r24
    12ac:	c5 c0       	rjmp	.+394    	; 0x1438 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    12ae:	ab e3       	ldi	r26, 0x3B	; 59
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	eb e3       	ldi	r30, 0x3B	; 59
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_u8SetPinValue+0xcc>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_u8SetPinValue+0xc8>
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	b0 c0       	rjmp	.+352    	; 0x1438 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    12d8:	19 82       	std	Y+1, r1	; 0x01
    12da:	ae c0       	rjmp	.+348    	; 0x1438 <DIO_u8SetPinValue+0x238>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinValue)
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3a 87       	std	Y+10, r19	; 0x0a
    12e4:	29 87       	std	Y+9, r18	; 0x09
    12e6:	89 85       	ldd	r24, Y+9	; 0x09
    12e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	c9 f0       	breq	.+50     	; 0x1320 <DIO_u8SetPinValue+0x120>
    12ee:	29 85       	ldd	r18, Y+9	; 0x09
    12f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    12f2:	21 30       	cpi	r18, 0x01	; 1
    12f4:	31 05       	cpc	r19, r1
    12f6:	49 f5       	brne	.+82     	; 0x134a <DIO_u8SetPinValue+0x14a>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    12f8:	a8 e3       	ldi	r26, 0x38	; 56
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e8 e3       	ldi	r30, 0x38	; 56
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_u8SetPinValue+0x116>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_u8SetPinValue+0x112>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	8c c0       	rjmp	.+280    	; 0x1438 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1320:	a8 e3       	ldi	r26, 0x38	; 56
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e8 e3       	ldi	r30, 0x38	; 56
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_u8SetPinValue+0x13e>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_u8SetPinValue+0x13a>
    1342:	80 95       	com	r24
    1344:	84 23       	and	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	77 c0       	rjmp	.+238    	; 0x1438 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    134a:	19 82       	std	Y+1, r1	; 0x01
    134c:	75 c0       	rjmp	.+234    	; 0x1438 <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinValue)
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	38 87       	std	Y+8, r19	; 0x08
    1356:	2f 83       	std	Y+7, r18	; 0x07
    1358:	8f 81       	ldd	r24, Y+7	; 0x07
    135a:	98 85       	ldd	r25, Y+8	; 0x08
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	c9 f0       	breq	.+50     	; 0x1392 <DIO_u8SetPinValue+0x192>
    1360:	2f 81       	ldd	r18, Y+7	; 0x07
    1362:	38 85       	ldd	r19, Y+8	; 0x08
    1364:	21 30       	cpi	r18, 0x01	; 1
    1366:	31 05       	cpc	r19, r1
    1368:	49 f5       	brne	.+82     	; 0x13bc <DIO_u8SetPinValue+0x1bc>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    136a:	a5 e3       	ldi	r26, 0x35	; 53
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e3       	ldi	r30, 0x35	; 53
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_u8SetPinValue+0x188>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_u8SetPinValue+0x184>
    138c:	84 2b       	or	r24, r20
    138e:	8c 93       	st	X, r24
    1390:	53 c0       	rjmp	.+166    	; 0x1438 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1392:	a5 e3       	ldi	r26, 0x35	; 53
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e5 e3       	ldi	r30, 0x35	; 53
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_u8SetPinValue+0x1b0>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_u8SetPinValue+0x1ac>
    13b4:	80 95       	com	r24
    13b6:	84 23       	and	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	3e c0       	rjmp	.+124    	; 0x1438 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    13bc:	19 82       	std	Y+1, r1	; 0x01
    13be:	3c c0       	rjmp	.+120    	; 0x1438 <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinValue)
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	3e 83       	std	Y+6, r19	; 0x06
    13c8:	2d 83       	std	Y+5, r18	; 0x05
    13ca:	8d 81       	ldd	r24, Y+5	; 0x05
    13cc:	9e 81       	ldd	r25, Y+6	; 0x06
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	c9 f0       	breq	.+50     	; 0x1404 <DIO_u8SetPinValue+0x204>
    13d2:	2d 81       	ldd	r18, Y+5	; 0x05
    13d4:	3e 81       	ldd	r19, Y+6	; 0x06
    13d6:	21 30       	cpi	r18, 0x01	; 1
    13d8:	31 05       	cpc	r19, r1
    13da:	49 f5       	brne	.+82     	; 0x142e <DIO_u8SetPinValue+0x22e>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    13dc:	a2 e3       	ldi	r26, 0x32	; 50
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e2 e3       	ldi	r30, 0x32	; 50
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <DIO_u8SetPinValue+0x1fa>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <DIO_u8SetPinValue+0x1f6>
    13fe:	84 2b       	or	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	1a c0       	rjmp	.+52     	; 0x1438 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1404:	a2 e3       	ldi	r26, 0x32	; 50
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e2 e3       	ldi	r30, 0x32	; 50
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 2e       	mov	r0, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_u8SetPinValue+0x222>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <DIO_u8SetPinValue+0x21e>
    1426:	80 95       	com	r24
    1428:	84 23       	and	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    142e:	19 82       	std	Y+1, r1	; 0x01
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <DIO_u8SetPinValue+0x238>
				}		
			break;
			default :
				Local_u8ErrorState = STD_TYPES_NOK;
    1432:	19 82       	std	Y+1, r1	; 0x01
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <DIO_u8SetPinValue+0x238>
		}
			
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1436:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1438:	89 81       	ldd	r24, Y+1	; 0x01
}
    143a:	2e 96       	adiw	r28, 0x0e	; 14
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <DIO_u8GetPinValue>:

u8  DIO_u8GetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 * Copy_pu8ReturnedPinValue)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	28 97       	sbiw	r28, 0x08	; 8
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	8b 83       	std	Y+3, r24	; 0x03
    1462:	6c 83       	std	Y+4, r22	; 0x04
    1464:	5e 83       	std	Y+6, r21	; 0x06
    1466:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	84 30       	cpi	r24, 0x04	; 4
    1470:	08 f0       	brcs	.+2      	; 0x1474 <DIO_u8GetPinValue+0x28>
    1472:	9f c0       	rjmp	.+318    	; 0x15b2 <DIO_u8GetPinValue+0x166>
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	88 30       	cpi	r24, 0x08	; 8
    1478:	08 f0       	brcs	.+2      	; 0x147c <DIO_u8GetPinValue+0x30>
    147a:	9b c0       	rjmp	.+310    	; 0x15b2 <DIO_u8GetPinValue+0x166>
    147c:	8d 81       	ldd	r24, Y+5	; 0x05
    147e:	9e 81       	ldd	r25, Y+6	; 0x06
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	09 f4       	brne	.+2      	; 0x1486 <DIO_u8GetPinValue+0x3a>
    1484:	96 c0       	rjmp	.+300    	; 0x15b2 <DIO_u8GetPinValue+0x166>
	{
		switch (Copy_u8PortId)
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	38 87       	std	Y+8, r19	; 0x08
    148e:	2f 83       	std	Y+7, r18	; 0x07
    1490:	4f 81       	ldd	r20, Y+7	; 0x07
    1492:	58 85       	ldd	r21, Y+8	; 0x08
    1494:	41 30       	cpi	r20, 0x01	; 1
    1496:	51 05       	cpc	r21, r1
    1498:	a9 f1       	breq	.+106    	; 0x1504 <DIO_u8GetPinValue+0xb8>
    149a:	8f 81       	ldd	r24, Y+7	; 0x07
    149c:	98 85       	ldd	r25, Y+8	; 0x08
    149e:	82 30       	cpi	r24, 0x02	; 2
    14a0:	91 05       	cpc	r25, r1
    14a2:	34 f4       	brge	.+12     	; 0x14b0 <DIO_u8GetPinValue+0x64>
    14a4:	2f 81       	ldd	r18, Y+7	; 0x07
    14a6:	38 85       	ldd	r19, Y+8	; 0x08
    14a8:	21 15       	cp	r18, r1
    14aa:	31 05       	cpc	r19, r1
    14ac:	71 f0       	breq	.+28     	; 0x14ca <DIO_u8GetPinValue+0x7e>
    14ae:	82 c0       	rjmp	.+260    	; 0x15b4 <DIO_u8GetPinValue+0x168>
    14b0:	4f 81       	ldd	r20, Y+7	; 0x07
    14b2:	58 85       	ldd	r21, Y+8	; 0x08
    14b4:	42 30       	cpi	r20, 0x02	; 2
    14b6:	51 05       	cpc	r21, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <DIO_u8GetPinValue+0x70>
    14ba:	41 c0       	rjmp	.+130    	; 0x153e <DIO_u8GetPinValue+0xf2>
    14bc:	8f 81       	ldd	r24, Y+7	; 0x07
    14be:	98 85       	ldd	r25, Y+8	; 0x08
    14c0:	83 30       	cpi	r24, 0x03	; 3
    14c2:	91 05       	cpc	r25, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <DIO_u8GetPinValue+0x7c>
    14c6:	58 c0       	rjmp	.+176    	; 0x1578 <DIO_u8GetPinValue+0x12c>
    14c8:	75 c0       	rjmp	.+234    	; 0x15b4 <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA:
				Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    14ca:	e9 e3       	ldi	r30, 0x39	; 57
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	a9 01       	movw	r20, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <DIO_u8GetPinValue+0x96>
    14de:	55 95       	asr	r21
    14e0:	47 95       	ror	r20
    14e2:	8a 95       	dec	r24
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <DIO_u8GetPinValue+0x92>
    14e6:	ca 01       	movw	r24, r20
    14e8:	81 70       	andi	r24, 0x01	; 1
    14ea:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	88 23       	and	r24, r24
    14f0:	21 f4       	brne	.+8      	; 0x14fa <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    14f2:	ed 81       	ldd	r30, Y+5	; 0x05
    14f4:	fe 81       	ldd	r31, Y+6	; 0x06
    14f6:	10 82       	st	Z, r1
    14f8:	5d c0       	rjmp	.+186    	; 0x15b4 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    14fa:	ed 81       	ldd	r30, Y+5	; 0x05
    14fc:	fe 81       	ldd	r31, Y+6	; 0x06
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 83       	st	Z, r24
    1502:	58 c0       	rjmp	.+176    	; 0x15b4 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTB:
				Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    1504:	e6 e3       	ldi	r30, 0x36	; 54
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a9 01       	movw	r20, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_u8GetPinValue+0xd0>
    1518:	55 95       	asr	r21
    151a:	47 95       	ror	r20
    151c:	8a 95       	dec	r24
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_u8GetPinValue+0xcc>
    1520:	ca 01       	movw	r24, r20
    1522:	81 70       	andi	r24, 0x01	; 1
    1524:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	88 23       	and	r24, r24
    152a:	21 f4       	brne	.+8      	; 0x1534 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    152c:	ed 81       	ldd	r30, Y+5	; 0x05
    152e:	fe 81       	ldd	r31, Y+6	; 0x06
    1530:	10 82       	st	Z, r1
    1532:	40 c0       	rjmp	.+128    	; 0x15b4 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1534:	ed 81       	ldd	r30, Y+5	; 0x05
    1536:	fe 81       	ldd	r31, Y+6	; 0x06
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	80 83       	st	Z, r24
    153c:	3b c0       	rjmp	.+118    	; 0x15b4 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTC:
				Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    153e:	e3 e3       	ldi	r30, 0x33	; 51
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a9 01       	movw	r20, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_u8GetPinValue+0x10a>
    1552:	55 95       	asr	r21
    1554:	47 95       	ror	r20
    1556:	8a 95       	dec	r24
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <DIO_u8GetPinValue+0x106>
    155a:	ca 01       	movw	r24, r20
    155c:	81 70       	andi	r24, 0x01	; 1
    155e:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	88 23       	and	r24, r24
    1564:	21 f4       	brne	.+8      	; 0x156e <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1566:	ed 81       	ldd	r30, Y+5	; 0x05
    1568:	fe 81       	ldd	r31, Y+6	; 0x06
    156a:	10 82       	st	Z, r1
    156c:	23 c0       	rjmp	.+70     	; 0x15b4 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    156e:	ed 81       	ldd	r30, Y+5	; 0x05
    1570:	fe 81       	ldd	r31, Y+6	; 0x06
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	80 83       	st	Z, r24
    1576:	1e c0       	rjmp	.+60     	; 0x15b4 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTD:
				Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    1578:	e0 e3       	ldi	r30, 0x30	; 48
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a9 01       	movw	r20, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_u8GetPinValue+0x144>
    158c:	55 95       	asr	r21
    158e:	47 95       	ror	r20
    1590:	8a 95       	dec	r24
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_u8GetPinValue+0x140>
    1594:	ca 01       	movw	r24, r20
    1596:	81 70       	andi	r24, 0x01	; 1
    1598:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	88 23       	and	r24, r24
    159e:	21 f4       	brne	.+8      	; 0x15a8 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    15a0:	ed 81       	ldd	r30, Y+5	; 0x05
    15a2:	fe 81       	ldd	r31, Y+6	; 0x06
    15a4:	10 82       	st	Z, r1
    15a6:	06 c0       	rjmp	.+12     	; 0x15b4 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    15a8:	ed 81       	ldd	r30, Y+5	; 0x05
    15aa:	fe 81       	ldd	r31, Y+6	; 0x06
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	80 83       	st	Z, r24
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <DIO_u8GetPinValue+0x168>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    15b2:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15b6:	28 96       	adiw	r28, 0x08	; 8
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <DIO_u8SetPortDirection>:

u8  DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	2d 97       	sbiw	r28, 0x0d	; 13
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	8a 83       	std	Y+2, r24	; 0x02
    15de:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	21 f0       	breq	.+8      	; 0x15f2 <DIO_u8SetPortDirection+0x2a>
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	88 23       	and	r24, r24
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <DIO_u8SetPortDirection+0x2a>
    15f0:	7f c0       	rjmp	.+254    	; 0x16f0 <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	3d 87       	std	Y+13, r19	; 0x0d
    15fa:	2c 87       	std	Y+12, r18	; 0x0c
    15fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    15fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	91 05       	cpc	r25, r1
    1604:	71 f1       	breq	.+92     	; 0x1662 <DIO_u8SetPortDirection+0x9a>
    1606:	2c 85       	ldd	r18, Y+12	; 0x0c
    1608:	3d 85       	ldd	r19, Y+13	; 0x0d
    160a:	22 30       	cpi	r18, 0x02	; 2
    160c:	31 05       	cpc	r19, r1
    160e:	2c f4       	brge	.+10     	; 0x161a <DIO_u8SetPortDirection+0x52>
    1610:	8c 85       	ldd	r24, Y+12	; 0x0c
    1612:	9d 85       	ldd	r25, Y+13	; 0x0d
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	69 f0       	breq	.+26     	; 0x1632 <DIO_u8SetPortDirection+0x6a>
    1618:	69 c0       	rjmp	.+210    	; 0x16ec <DIO_u8SetPortDirection+0x124>
    161a:	2c 85       	ldd	r18, Y+12	; 0x0c
    161c:	3d 85       	ldd	r19, Y+13	; 0x0d
    161e:	22 30       	cpi	r18, 0x02	; 2
    1620:	31 05       	cpc	r19, r1
    1622:	b1 f1       	breq	.+108    	; 0x1690 <DIO_u8SetPortDirection+0xc8>
    1624:	8c 85       	ldd	r24, Y+12	; 0x0c
    1626:	9d 85       	ldd	r25, Y+13	; 0x0d
    1628:	83 30       	cpi	r24, 0x03	; 3
    162a:	91 05       	cpc	r25, r1
    162c:	09 f4       	brne	.+2      	; 0x1630 <DIO_u8SetPortDirection+0x68>
    162e:	47 c0       	rjmp	.+142    	; 0x16be <DIO_u8SetPortDirection+0xf6>
    1630:	5d c0       	rjmp	.+186    	; 0x16ec <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PortDirection)
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	3b 87       	std	Y+11, r19	; 0x0b
    163a:	2a 87       	std	Y+10, r18	; 0x0a
    163c:	8a 85       	ldd	r24, Y+10	; 0x0a
    163e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	59 f0       	breq	.+22     	; 0x165a <DIO_u8SetPortDirection+0x92>
    1644:	2a 85       	ldd	r18, Y+10	; 0x0a
    1646:	3b 85       	ldd	r19, Y+11	; 0x0b
    1648:	21 30       	cpi	r18, 0x01	; 1
    164a:	31 05       	cpc	r19, r1
    164c:	09 f0       	breq	.+2      	; 0x1650 <DIO_u8SetPortDirection+0x88>
    164e:	51 c0       	rjmp	.+162    	; 0x16f2 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xff;break;
    1650:	ea e3       	ldi	r30, 0x3A	; 58
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	8f ef       	ldi	r24, 0xFF	; 255
    1656:	80 83       	st	Z, r24
    1658:	4c c0       	rjmp	.+152    	; 0x16f2 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break;
    165a:	ea e3       	ldi	r30, 0x3A	; 58
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	10 82       	st	Z, r1
    1660:	48 c0       	rjmp	.+144    	; 0x16f2 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PortDirection)
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	39 87       	std	Y+9, r19	; 0x09
    166a:	28 87       	std	Y+8, r18	; 0x08
    166c:	88 85       	ldd	r24, Y+8	; 0x08
    166e:	99 85       	ldd	r25, Y+9	; 0x09
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	51 f0       	breq	.+20     	; 0x1688 <DIO_u8SetPortDirection+0xc0>
    1674:	28 85       	ldd	r18, Y+8	; 0x08
    1676:	39 85       	ldd	r19, Y+9	; 0x09
    1678:	21 30       	cpi	r18, 0x01	; 1
    167a:	31 05       	cpc	r19, r1
    167c:	d1 f5       	brne	.+116    	; 0x16f2 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xff;break;
    167e:	e7 e3       	ldi	r30, 0x37	; 55
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	80 83       	st	Z, r24
    1686:	35 c0       	rjmp	.+106    	; 0x16f2 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break;
    1688:	e7 e3       	ldi	r30, 0x37	; 55
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	10 82       	st	Z, r1
    168e:	31 c0       	rjmp	.+98     	; 0x16f2 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PortDirection)
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	3f 83       	std	Y+7, r19	; 0x07
    1698:	2e 83       	std	Y+6, r18	; 0x06
    169a:	8e 81       	ldd	r24, Y+6	; 0x06
    169c:	9f 81       	ldd	r25, Y+7	; 0x07
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	51 f0       	breq	.+20     	; 0x16b6 <DIO_u8SetPortDirection+0xee>
    16a2:	2e 81       	ldd	r18, Y+6	; 0x06
    16a4:	3f 81       	ldd	r19, Y+7	; 0x07
    16a6:	21 30       	cpi	r18, 0x01	; 1
    16a8:	31 05       	cpc	r19, r1
    16aa:	19 f5       	brne	.+70     	; 0x16f2 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xff;break;
    16ac:	e4 e3       	ldi	r30, 0x34	; 52
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	8f ef       	ldi	r24, 0xFF	; 255
    16b2:	80 83       	st	Z, r24
    16b4:	1e c0       	rjmp	.+60     	; 0x16f2 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break;
    16b6:	e4 e3       	ldi	r30, 0x34	; 52
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	10 82       	st	Z, r1
    16bc:	1a c0       	rjmp	.+52     	; 0x16f2 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PortDirection)
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	3d 83       	std	Y+5, r19	; 0x05
    16c6:	2c 83       	std	Y+4, r18	; 0x04
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	9d 81       	ldd	r25, Y+5	; 0x05
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	51 f0       	breq	.+20     	; 0x16e4 <DIO_u8SetPortDirection+0x11c>
    16d0:	2c 81       	ldd	r18, Y+4	; 0x04
    16d2:	3d 81       	ldd	r19, Y+5	; 0x05
    16d4:	21 30       	cpi	r18, 0x01	; 1
    16d6:	31 05       	cpc	r19, r1
    16d8:	61 f4       	brne	.+24     	; 0x16f2 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xff;break;
    16da:	e1 e3       	ldi	r30, 0x31	; 49
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	8f ef       	ldi	r24, 0xFF	; 255
    16e0:	80 83       	st	Z, r24
    16e2:	07 c0       	rjmp	.+14     	; 0x16f2 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break;
    16e4:	e1 e3       	ldi	r30, 0x31	; 49
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	10 82       	st	Z, r1
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			default :Local_u8ErrorState = STD_TYPES_NOK;
    16ec:	19 82       	std	Y+1, r1	; 0x01
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <DIO_u8SetPortDirection+0x12a>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    16f0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f4:	2d 96       	adiw	r28, 0x0d	; 13
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <DIO_u8SetPortValue>:

u8  DIO_u8SetPortValue    (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <DIO_u8SetPortValue+0x6>
    170c:	00 d0       	rcall	.+0      	; 0x170e <DIO_u8SetPortValue+0x8>
    170e:	0f 92       	push	r0
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	8a 83       	std	Y+2, r24	; 0x02
    1716:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	3d 83       	std	Y+5, r19	; 0x05
    1724:	2c 83       	std	Y+4, r18	; 0x04
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	9d 81       	ldd	r25, Y+5	; 0x05
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	d1 f0       	breq	.+52     	; 0x1764 <DIO_u8SetPortValue+0x5e>
    1730:	2c 81       	ldd	r18, Y+4	; 0x04
    1732:	3d 81       	ldd	r19, Y+5	; 0x05
    1734:	22 30       	cpi	r18, 0x02	; 2
    1736:	31 05       	cpc	r19, r1
    1738:	2c f4       	brge	.+10     	; 0x1744 <DIO_u8SetPortValue+0x3e>
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	9d 81       	ldd	r25, Y+5	; 0x05
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	61 f0       	breq	.+24     	; 0x175a <DIO_u8SetPortValue+0x54>
    1742:	1f c0       	rjmp	.+62     	; 0x1782 <DIO_u8SetPortValue+0x7c>
    1744:	2c 81       	ldd	r18, Y+4	; 0x04
    1746:	3d 81       	ldd	r19, Y+5	; 0x05
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	81 f0       	breq	.+32     	; 0x176e <DIO_u8SetPortValue+0x68>
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	83 30       	cpi	r24, 0x03	; 3
    1754:	91 05       	cpc	r25, r1
    1756:	81 f0       	breq	.+32     	; 0x1778 <DIO_u8SetPortValue+0x72>
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    175a:	eb e3       	ldi	r30, 0x3B	; 59
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	80 83       	st	Z, r24
    1762:	10 c0       	rjmp	.+32     	; 0x1784 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    1764:	e8 e3       	ldi	r30, 0x38	; 56
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	80 83       	st	Z, r24
    176c:	0b c0       	rjmp	.+22     	; 0x1784 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    176e:	e5 e3       	ldi	r30, 0x35	; 53
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	80 83       	st	Z, r24
    1776:	06 c0       	rjmp	.+12     	; 0x1784 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    1778:	e2 e3       	ldi	r30, 0x32	; 50
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	80 83       	st	Z, r24
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState = STD_TYPES_NOK;
    1782:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1784:	89 81       	ldd	r24, Y+1	; 0x01
}
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <DIO_u8GetPortValue>:

u8  DIO_u8GetPortValue    (u8 Copy_u8PortId, u8 * Copy_pu8ReturnedPortValue)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <DIO_u8GetPortValue+0x6>
    179c:	00 d0       	rcall	.+0      	; 0x179e <DIO_u8GetPortValue+0x8>
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <DIO_u8GetPortValue+0xa>
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	8a 83       	std	Y+2, r24	; 0x02
    17a6:	7c 83       	std	Y+4, r23	; 0x04
    17a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_pu8ReturnedPortValue != NULL)
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	e9 f1       	breq	.+122    	; 0x1830 <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3e 83       	std	Y+6, r19	; 0x06
    17be:	2d 83       	std	Y+5, r18	; 0x05
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	e1 f0       	breq	.+56     	; 0x1802 <DIO_u8GetPortValue+0x6c>
    17ca:	2d 81       	ldd	r18, Y+5	; 0x05
    17cc:	3e 81       	ldd	r19, Y+6	; 0x06
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	2c f4       	brge	.+10     	; 0x17de <DIO_u8GetPortValue+0x48>
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	61 f0       	breq	.+24     	; 0x17f4 <DIO_u8GetPortValue+0x5e>
    17dc:	27 c0       	rjmp	.+78     	; 0x182c <DIO_u8GetPortValue+0x96>
    17de:	2d 81       	ldd	r18, Y+5	; 0x05
    17e0:	3e 81       	ldd	r19, Y+6	; 0x06
    17e2:	22 30       	cpi	r18, 0x02	; 2
    17e4:	31 05       	cpc	r19, r1
    17e6:	a1 f0       	breq	.+40     	; 0x1810 <DIO_u8GetPortValue+0x7a>
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ea:	9e 81       	ldd	r25, Y+6	; 0x06
    17ec:	83 30       	cpi	r24, 0x03	; 3
    17ee:	91 05       	cpc	r25, r1
    17f0:	b1 f0       	breq	.+44     	; 0x181e <DIO_u8GetPortValue+0x88>
    17f2:	1c c0       	rjmp	.+56     	; 0x182c <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    17f4:	e9 e3       	ldi	r30, 0x39	; 57
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	eb 81       	ldd	r30, Y+3	; 0x03
    17fc:	fc 81       	ldd	r31, Y+4	; 0x04
    17fe:	80 83       	st	Z, r24
    1800:	18 c0       	rjmp	.+48     	; 0x1832 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    1802:	e6 e3       	ldi	r30, 0x36	; 54
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	eb 81       	ldd	r30, Y+3	; 0x03
    180a:	fc 81       	ldd	r31, Y+4	; 0x04
    180c:	80 83       	st	Z, r24
    180e:	11 c0       	rjmp	.+34     	; 0x1832 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    1810:	e3 e3       	ldi	r30, 0x33	; 51
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	eb 81       	ldd	r30, Y+3	; 0x03
    1818:	fc 81       	ldd	r31, Y+4	; 0x04
    181a:	80 83       	st	Z, r24
    181c:	0a c0       	rjmp	.+20     	; 0x1832 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    181e:	e0 e3       	ldi	r30, 0x30	; 48
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	eb 81       	ldd	r30, Y+3	; 0x03
    1826:	fc 81       	ldd	r31, Y+4	; 0x04
    1828:	80 83       	st	Z, r24
    182a:	03 c0       	rjmp	.+6      	; 0x1832 <DIO_u8GetPortValue+0x9c>
			default : Local_u8ErrorState = STD_TYPES_NOK;
    182c:	19 82       	std	Y+1, r1	; 0x01
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1830:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	26 96       	adiw	r28, 0x06	; 6
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <LCD_voidInit>:
/***************************************************************************************/
/* Description! Apply initialization sequence for LCD module                           */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidInit(void) {
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	c4 55       	subi	r28, 0x54	; 84
    1854:	d0 40       	sbci	r29, 0x00	; 0
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	fe 01       	movw	r30, r28
    1862:	ef 5a       	subi	r30, 0xAF	; 175
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a0 ef       	ldi	r26, 0xF0	; 240
    186c:	b1 e4       	ldi	r27, 0x41	; 65
    186e:	80 83       	st	Z, r24
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	a2 83       	std	Z+2, r26	; 0x02
    1874:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1876:	8e 01       	movw	r16, r28
    1878:	03 5b       	subi	r16, 0xB3	; 179
    187a:	1f 4f       	sbci	r17, 0xFF	; 255
    187c:	fe 01       	movw	r30, r28
    187e:	ef 5a       	subi	r30, 0xAF	; 175
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	4a ef       	ldi	r20, 0xFA	; 250
    1890:	54 e4       	ldi	r21, 0x44	; 68
    1892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	f8 01       	movw	r30, r16
    189c:	80 83       	st	Z, r24
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	a2 83       	std	Z+2, r26	; 0x02
    18a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18a4:	fe 01       	movw	r30, r28
    18a6:	e3 5b       	subi	r30, 0xB3	; 179
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	60 81       	ld	r22, Z
    18ac:	71 81       	ldd	r23, Z+1	; 0x01
    18ae:	82 81       	ldd	r24, Z+2	; 0x02
    18b0:	93 81       	ldd	r25, Z+3	; 0x03
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18be:	88 23       	and	r24, r24
    18c0:	44 f4       	brge	.+16     	; 0x18d2 <LCD_voidInit+0x8c>
		__ticks = 1;
    18c2:	fe 01       	movw	r30, r28
    18c4:	e5 5b       	subi	r30, 0xB5	; 181
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	91 83       	std	Z+1, r25	; 0x01
    18ce:	80 83       	st	Z, r24
    18d0:	64 c0       	rjmp	.+200    	; 0x199a <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    18d2:	fe 01       	movw	r30, r28
    18d4:	e3 5b       	subi	r30, 0xB3	; 179
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	60 81       	ld	r22, Z
    18da:	71 81       	ldd	r23, Z+1	; 0x01
    18dc:	82 81       	ldd	r24, Z+2	; 0x02
    18de:	93 81       	ldd	r25, Z+3	; 0x03
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	0c f0       	brlt	.+2      	; 0x18f2 <LCD_voidInit+0xac>
    18f0:	43 c0       	rjmp	.+134    	; 0x1978 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f2:	fe 01       	movw	r30, r28
    18f4:	ef 5a       	subi	r30, 0xAF	; 175
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	8e 01       	movw	r16, r28
    1912:	05 5b       	subi	r16, 0xB5	; 181
    1914:	1f 4f       	sbci	r17, 0xFF	; 255
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	f8 01       	movw	r30, r16
    1924:	91 83       	std	Z+1, r25	; 0x01
    1926:	80 83       	st	Z, r24
    1928:	1f c0       	rjmp	.+62     	; 0x1968 <LCD_voidInit+0x122>
    192a:	fe 01       	movw	r30, r28
    192c:	e7 5b       	subi	r30, 0xB7	; 183
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	88 ec       	ldi	r24, 0xC8	; 200
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	91 83       	std	Z+1, r25	; 0x01
    1936:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1938:	fe 01       	movw	r30, r28
    193a:	e7 5b       	subi	r30, 0xB7	; 183
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	80 81       	ld	r24, Z
    1940:	91 81       	ldd	r25, Z+1	; 0x01
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_voidInit+0xfc>
    1946:	fe 01       	movw	r30, r28
    1948:	e7 5b       	subi	r30, 0xB7	; 183
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	de 01       	movw	r26, r28
    1952:	a5 5b       	subi	r26, 0xB5	; 181
    1954:	bf 4f       	sbci	r27, 0xFF	; 255
    1956:	fe 01       	movw	r30, r28
    1958:	e5 5b       	subi	r30, 0xB5	; 181
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	80 81       	ld	r24, Z
    195e:	91 81       	ldd	r25, Z+1	; 0x01
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	11 96       	adiw	r26, 0x01	; 1
    1964:	9c 93       	st	X, r25
    1966:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1968:	fe 01       	movw	r30, r28
    196a:	e5 5b       	subi	r30, 0xB5	; 181
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	80 81       	ld	r24, Z
    1970:	91 81       	ldd	r25, Z+1	; 0x01
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	d1 f6       	brne	.-76     	; 0x192a <LCD_voidInit+0xe4>
    1976:	27 c0       	rjmp	.+78     	; 0x19c6 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1978:	8e 01       	movw	r16, r28
    197a:	05 5b       	subi	r16, 0xB5	; 181
    197c:	1f 4f       	sbci	r17, 0xFF	; 255
    197e:	fe 01       	movw	r30, r28
    1980:	e3 5b       	subi	r30, 0xB3	; 179
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	f8 01       	movw	r30, r16
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	80 83       	st	Z, r24
    199a:	de 01       	movw	r26, r28
    199c:	a9 5b       	subi	r26, 0xB9	; 185
    199e:	bf 4f       	sbci	r27, 0xFF	; 255
    19a0:	fe 01       	movw	r30, r28
    19a2:	e5 5b       	subi	r30, 0xB5	; 181
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 81       	ld	r24, Z
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	8d 93       	st	X+, r24
    19ac:	9c 93       	st	X, r25
    19ae:	fe 01       	movw	r30, r28
    19b0:	e9 5b       	subi	r30, 0xB9	; 185
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <LCD_voidInit+0x172>
    19bc:	fe 01       	movw	r30, r28
    19be:	e9 5b       	subi	r30, 0xB9	; 185
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	91 83       	std	Z+1, r25	; 0x01
    19c4:	80 83       	st	Z, r24
#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Return Home  */
	LCD_voidSendCmnd(lcd_Home);
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidSendCmnd>
    19cc:	fe 01       	movw	r30, r28
    19ce:	ed 5b       	subi	r30, 0xBD	; 189
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a0 e7       	ldi	r26, 0x70	; 112
    19d8:	b1 e4       	ldi	r27, 0x41	; 65
    19da:	80 83       	st	Z, r24
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	a2 83       	std	Z+2, r26	; 0x02
    19e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e2:	8e 01       	movw	r16, r28
    19e4:	01 5c       	subi	r16, 0xC1	; 193
    19e6:	1f 4f       	sbci	r17, 0xFF	; 255
    19e8:	fe 01       	movw	r30, r28
    19ea:	ed 5b       	subi	r30, 0xBD	; 189
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	60 81       	ld	r22, Z
    19f0:	71 81       	ldd	r23, Z+1	; 0x01
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	4a ef       	ldi	r20, 0xFA	; 250
    19fc:	54 e4       	ldi	r21, 0x44	; 68
    19fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	f8 01       	movw	r30, r16
    1a08:	80 83       	st	Z, r24
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	a2 83       	std	Z+2, r26	; 0x02
    1a0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a10:	fe 01       	movw	r30, r28
    1a12:	ff 96       	adiw	r30, 0x3f	; 63
    1a14:	60 81       	ld	r22, Z
    1a16:	71 81       	ldd	r23, Z+1	; 0x01
    1a18:	82 81       	ldd	r24, Z+2	; 0x02
    1a1a:	93 81       	ldd	r25, Z+3	; 0x03
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	2c f4       	brge	.+10     	; 0x1a36 <LCD_voidInit+0x1f0>
		__ticks = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9e af       	std	Y+62, r25	; 0x3e
    1a32:	8d af       	std	Y+61, r24	; 0x3d
    1a34:	46 c0       	rjmp	.+140    	; 0x1ac2 <LCD_voidInit+0x27c>
	else if (__tmp > 65535)
    1a36:	fe 01       	movw	r30, r28
    1a38:	ff 96       	adiw	r30, 0x3f	; 63
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	93 81       	ldd	r25, Z+3	; 0x03
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	3f ef       	ldi	r19, 0xFF	; 255
    1a46:	4f e7       	ldi	r20, 0x7F	; 127
    1a48:	57 e4       	ldi	r21, 0x47	; 71
    1a4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a4e:	18 16       	cp	r1, r24
    1a50:	64 f5       	brge	.+88     	; 0x1aaa <LCD_voidInit+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a52:	fe 01       	movw	r30, r28
    1a54:	ed 5b       	subi	r30, 0xBD	; 189
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	60 81       	ld	r22, Z
    1a5a:	71 81       	ldd	r23, Z+1	; 0x01
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e2       	ldi	r20, 0x20	; 32
    1a66:	51 e4       	ldi	r21, 0x41	; 65
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9e af       	std	Y+62, r25	; 0x3e
    1a7e:	8d af       	std	Y+61, r24	; 0x3d
    1a80:	0f c0       	rjmp	.+30     	; 0x1aa0 <LCD_voidInit+0x25a>
    1a82:	88 ec       	ldi	r24, 0xC8	; 200
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9c af       	std	Y+60, r25	; 0x3c
    1a88:	8b af       	std	Y+59, r24	; 0x3b
    1a8a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a8c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_voidInit+0x248>
    1a92:	9c af       	std	Y+60, r25	; 0x3c
    1a94:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a96:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a98:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	9e af       	std	Y+62, r25	; 0x3e
    1a9e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aa2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	69 f7       	brne	.-38     	; 0x1a82 <LCD_voidInit+0x23c>
    1aa8:	16 c0       	rjmp	.+44     	; 0x1ad6 <LCD_voidInit+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aaa:	fe 01       	movw	r30, r28
    1aac:	ff 96       	adiw	r30, 0x3f	; 63
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9e af       	std	Y+62, r25	; 0x3e
    1ac0:	8d af       	std	Y+61, r24	; 0x3d
    1ac2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ac4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ac6:	9a af       	std	Y+58, r25	; 0x3a
    1ac8:	89 af       	std	Y+57, r24	; 0x39
    1aca:	89 ad       	ldd	r24, Y+57	; 0x39
    1acc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <LCD_voidInit+0x288>
    1ad2:	9a af       	std	Y+58, r25	; 0x3a
    1ad4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	/* Function Set  */
	LCD_voidSendCmnd(lcd_FunctionSet4bit);
    1ad6:	8f e2       	ldi	r24, 0x2F	; 47
    1ad8:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidSendCmnd>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a0 e8       	ldi	r26, 0x80	; 128
    1ae2:	bf e3       	ldi	r27, 0x3F	; 63
    1ae4:	8d ab       	std	Y+53, r24	; 0x35
    1ae6:	9e ab       	std	Y+54, r25	; 0x36
    1ae8:	af ab       	std	Y+55, r26	; 0x37
    1aea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aec:	6d a9       	ldd	r22, Y+53	; 0x35
    1aee:	7e a9       	ldd	r23, Y+54	; 0x36
    1af0:	8f a9       	ldd	r24, Y+55	; 0x37
    1af2:	98 ad       	ldd	r25, Y+56	; 0x38
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	4a ef       	ldi	r20, 0xFA	; 250
    1afa:	54 e4       	ldi	r21, 0x44	; 68
    1afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	89 ab       	std	Y+49, r24	; 0x31
    1b06:	9a ab       	std	Y+50, r25	; 0x32
    1b08:	ab ab       	std	Y+51, r26	; 0x33
    1b0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b10:	8b a9       	ldd	r24, Y+51	; 0x33
    1b12:	9c a9       	ldd	r25, Y+52	; 0x34
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e8       	ldi	r20, 0x80	; 128
    1b1a:	5f e3       	ldi	r21, 0x3F	; 63
    1b1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b20:	88 23       	and	r24, r24
    1b22:	2c f4       	brge	.+10     	; 0x1b2e <LCD_voidInit+0x2e8>
		__ticks = 1;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	98 ab       	std	Y+48, r25	; 0x30
    1b2a:	8f a7       	std	Y+47, r24	; 0x2f
    1b2c:	3f c0       	rjmp	.+126    	; 0x1bac <LCD_voidInit+0x366>
	else if (__tmp > 65535)
    1b2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b30:	7a a9       	ldd	r23, Y+50	; 0x32
    1b32:	8b a9       	ldd	r24, Y+51	; 0x33
    1b34:	9c a9       	ldd	r25, Y+52	; 0x34
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	3f ef       	ldi	r19, 0xFF	; 255
    1b3a:	4f e7       	ldi	r20, 0x7F	; 127
    1b3c:	57 e4       	ldi	r21, 0x47	; 71
    1b3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b42:	18 16       	cp	r1, r24
    1b44:	4c f5       	brge	.+82     	; 0x1b98 <LCD_voidInit+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b46:	6d a9       	ldd	r22, Y+53	; 0x35
    1b48:	7e a9       	ldd	r23, Y+54	; 0x36
    1b4a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b4c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e2       	ldi	r20, 0x20	; 32
    1b54:	51 e4       	ldi	r21, 0x41	; 65
    1b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	bc 01       	movw	r22, r24
    1b60:	cd 01       	movw	r24, r26
    1b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	98 ab       	std	Y+48, r25	; 0x30
    1b6c:	8f a7       	std	Y+47, r24	; 0x2f
    1b6e:	0f c0       	rjmp	.+30     	; 0x1b8e <LCD_voidInit+0x348>
    1b70:	88 ec       	ldi	r24, 0xC8	; 200
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	9e a7       	std	Y+46, r25	; 0x2e
    1b76:	8d a7       	std	Y+45, r24	; 0x2d
    1b78:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b7a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <LCD_voidInit+0x336>
    1b80:	9e a7       	std	Y+46, r25	; 0x2e
    1b82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b86:	98 a9       	ldd	r25, Y+48	; 0x30
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	98 ab       	std	Y+48, r25	; 0x30
    1b8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b90:	98 a9       	ldd	r25, Y+48	; 0x30
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	69 f7       	brne	.-38     	; 0x1b70 <LCD_voidInit+0x32a>
    1b96:	14 c0       	rjmp	.+40     	; 0x1bc0 <LCD_voidInit+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b98:	69 a9       	ldd	r22, Y+49	; 0x31
    1b9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	98 ab       	std	Y+48, r25	; 0x30
    1baa:	8f a7       	std	Y+47, r24	; 0x2f
    1bac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bae:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb0:	9c a7       	std	Y+44, r25	; 0x2c
    1bb2:	8b a7       	std	Y+43, r24	; 0x2b
    1bb4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bb6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <LCD_voidInit+0x372>
    1bbc:	9c a7       	std	Y+44, r25	; 0x2c
    1bbe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Display ON OFF Control */
	LCD_voidSendCmnd(lcd_DisplayOn);
    1bc0:	8c e0       	ldi	r24, 0x0C	; 12
    1bc2:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidSendCmnd>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	a0 e8       	ldi	r26, 0x80	; 128
    1bcc:	bf e3       	ldi	r27, 0x3F	; 63
    1bce:	8f a3       	std	Y+39, r24	; 0x27
    1bd0:	98 a7       	std	Y+40, r25	; 0x28
    1bd2:	a9 a7       	std	Y+41, r26	; 0x29
    1bd4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd6:	6f a1       	ldd	r22, Y+39	; 0x27
    1bd8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bda:	89 a5       	ldd	r24, Y+41	; 0x29
    1bdc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	4a ef       	ldi	r20, 0xFA	; 250
    1be4:	54 e4       	ldi	r21, 0x44	; 68
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	8b a3       	std	Y+35, r24	; 0x23
    1bf0:	9c a3       	std	Y+36, r25	; 0x24
    1bf2:	ad a3       	std	Y+37, r26	; 0x25
    1bf4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bf6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1bfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e8       	ldi	r20, 0x80	; 128
    1c04:	5f e3       	ldi	r21, 0x3F	; 63
    1c06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c0a:	88 23       	and	r24, r24
    1c0c:	2c f4       	brge	.+10     	; 0x1c18 <LCD_voidInit+0x3d2>
		__ticks = 1;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	9a a3       	std	Y+34, r25	; 0x22
    1c14:	89 a3       	std	Y+33, r24	; 0x21
    1c16:	3f c0       	rjmp	.+126    	; 0x1c96 <LCD_voidInit+0x450>
	else if (__tmp > 65535)
    1c18:	6b a1       	ldd	r22, Y+35	; 0x23
    1c1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	3f ef       	ldi	r19, 0xFF	; 255
    1c24:	4f e7       	ldi	r20, 0x7F	; 127
    1c26:	57 e4       	ldi	r21, 0x47	; 71
    1c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	4c f5       	brge	.+82     	; 0x1c82 <LCD_voidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c30:	6f a1       	ldd	r22, Y+39	; 0x27
    1c32:	78 a5       	ldd	r23, Y+40	; 0x28
    1c34:	89 a5       	ldd	r24, Y+41	; 0x29
    1c36:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e2       	ldi	r20, 0x20	; 32
    1c3e:	51 e4       	ldi	r21, 0x41	; 65
    1c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9a a3       	std	Y+34, r25	; 0x22
    1c56:	89 a3       	std	Y+33, r24	; 0x21
    1c58:	0f c0       	rjmp	.+30     	; 0x1c78 <LCD_voidInit+0x432>
    1c5a:	88 ec       	ldi	r24, 0xC8	; 200
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	98 a3       	std	Y+32, r25	; 0x20
    1c60:	8f 8f       	std	Y+31, r24	; 0x1f
    1c62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c64:	98 a1       	ldd	r25, Y+32	; 0x20
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_voidInit+0x420>
    1c6a:	98 a3       	std	Y+32, r25	; 0x20
    1c6c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c70:	9a a1       	ldd	r25, Y+34	; 0x22
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	9a a3       	std	Y+34, r25	; 0x22
    1c76:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c78:	89 a1       	ldd	r24, Y+33	; 0x21
    1c7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	69 f7       	brne	.-38     	; 0x1c5a <LCD_voidInit+0x414>
    1c80:	14 c0       	rjmp	.+40     	; 0x1caa <LCD_voidInit+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c82:	6b a1       	ldd	r22, Y+35	; 0x23
    1c84:	7c a1       	ldd	r23, Y+36	; 0x24
    1c86:	8d a1       	ldd	r24, Y+37	; 0x25
    1c88:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	9a a3       	std	Y+34, r25	; 0x22
    1c94:	89 a3       	std	Y+33, r24	; 0x21
    1c96:	89 a1       	ldd	r24, Y+33	; 0x21
    1c98:	9a a1       	ldd	r25, Y+34	; 0x22
    1c9a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c9c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ca0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <LCD_voidInit+0x45c>
    1ca6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ca8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display */
	LCD_voidSendCmnd(lcd_Clear);
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidSendCmnd>
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	a0 e7       	ldi	r26, 0x70	; 112
    1cb6:	b1 e4       	ldi	r27, 0x41	; 65
    1cb8:	89 8f       	std	Y+25, r24	; 0x19
    1cba:	9a 8f       	std	Y+26, r25	; 0x1a
    1cbc:	ab 8f       	std	Y+27, r26	; 0x1b
    1cbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	4a ef       	ldi	r20, 0xFA	; 250
    1cce:	54 e4       	ldi	r21, 0x44	; 68
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	8d 8b       	std	Y+21, r24	; 0x15
    1cda:	9e 8b       	std	Y+22, r25	; 0x16
    1cdc:	af 8b       	std	Y+23, r26	; 0x17
    1cde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ce0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e8       	ldi	r20, 0x80	; 128
    1cee:	5f e3       	ldi	r21, 0x3F	; 63
    1cf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf4:	88 23       	and	r24, r24
    1cf6:	2c f4       	brge	.+10     	; 0x1d02 <LCD_voidInit+0x4bc>
		__ticks = 1;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9c 8b       	std	Y+20, r25	; 0x14
    1cfe:	8b 8b       	std	Y+19, r24	; 0x13
    1d00:	3f c0       	rjmp	.+126    	; 0x1d80 <LCD_voidInit+0x53a>
	else if (__tmp > 65535)
    1d02:	6d 89       	ldd	r22, Y+21	; 0x15
    1d04:	7e 89       	ldd	r23, Y+22	; 0x16
    1d06:	8f 89       	ldd	r24, Y+23	; 0x17
    1d08:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	3f ef       	ldi	r19, 0xFF	; 255
    1d0e:	4f e7       	ldi	r20, 0x7F	; 127
    1d10:	57 e4       	ldi	r21, 0x47	; 71
    1d12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d16:	18 16       	cp	r1, r24
    1d18:	4c f5       	brge	.+82     	; 0x1d6c <LCD_voidInit+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e2       	ldi	r20, 0x20	; 32
    1d28:	51 e4       	ldi	r21, 0x41	; 65
    1d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	bc 01       	movw	r22, r24
    1d34:	cd 01       	movw	r24, r26
    1d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	9c 8b       	std	Y+20, r25	; 0x14
    1d40:	8b 8b       	std	Y+19, r24	; 0x13
    1d42:	0f c0       	rjmp	.+30     	; 0x1d62 <LCD_voidInit+0x51c>
    1d44:	88 ec       	ldi	r24, 0xC8	; 200
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9a 8b       	std	Y+18, r25	; 0x12
    1d4a:	89 8b       	std	Y+17, r24	; 0x11
    1d4c:	89 89       	ldd	r24, Y+17	; 0x11
    1d4e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <LCD_voidInit+0x50a>
    1d54:	9a 8b       	std	Y+18, r25	; 0x12
    1d56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d58:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	9c 8b       	std	Y+20, r25	; 0x14
    1d60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d62:	8b 89       	ldd	r24, Y+19	; 0x13
    1d64:	9c 89       	ldd	r25, Y+20	; 0x14
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	69 f7       	brne	.-38     	; 0x1d44 <LCD_voidInit+0x4fe>
    1d6a:	14 c0       	rjmp	.+40     	; 0x1d94 <LCD_voidInit+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d70:	8f 89       	ldd	r24, Y+23	; 0x17
    1d72:	98 8d       	ldd	r25, Y+24	; 0x18
    1d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	9c 8b       	std	Y+20, r25	; 0x14
    1d7e:	8b 8b       	std	Y+19, r24	; 0x13
    1d80:	8b 89       	ldd	r24, Y+19	; 0x13
    1d82:	9c 89       	ldd	r25, Y+20	; 0x14
    1d84:	98 8b       	std	Y+16, r25	; 0x10
    1d86:	8f 87       	std	Y+15, r24	; 0x0f
    1d88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8a:	98 89       	ldd	r25, Y+16	; 0x10
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <LCD_voidInit+0x546>
    1d90:	98 8b       	std	Y+16, r25	; 0x10
    1d92:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);

	/* Entry Mode Set  */
	LCD_voidSendCmnd(lcd_EntryMode);
    1d94:	86 e0       	ldi	r24, 0x06	; 6
    1d96:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidSendCmnd>
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	a0 e0       	ldi	r26, 0x00	; 0
    1da0:	b0 e4       	ldi	r27, 0x40	; 64
    1da2:	8b 87       	std	Y+11, r24	; 0x0b
    1da4:	9c 87       	std	Y+12, r25	; 0x0c
    1da6:	ad 87       	std	Y+13, r26	; 0x0d
    1da8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1daa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	4a ef       	ldi	r20, 0xFA	; 250
    1db8:	54 e4       	ldi	r21, 0x44	; 68
    1dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	8f 83       	std	Y+7, r24	; 0x07
    1dc4:	98 87       	std	Y+8, r25	; 0x08
    1dc6:	a9 87       	std	Y+9, r26	; 0x09
    1dc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dca:	6f 81       	ldd	r22, Y+7	; 0x07
    1dcc:	78 85       	ldd	r23, Y+8	; 0x08
    1dce:	89 85       	ldd	r24, Y+9	; 0x09
    1dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e8       	ldi	r20, 0x80	; 128
    1dd8:	5f e3       	ldi	r21, 0x3F	; 63
    1dda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dde:	88 23       	and	r24, r24
    1de0:	2c f4       	brge	.+10     	; 0x1dec <LCD_voidInit+0x5a6>
		__ticks = 1;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	9e 83       	std	Y+6, r25	; 0x06
    1de8:	8d 83       	std	Y+5, r24	; 0x05
    1dea:	3f c0       	rjmp	.+126    	; 0x1e6a <LCD_voidInit+0x624>
	else if (__tmp > 65535)
    1dec:	6f 81       	ldd	r22, Y+7	; 0x07
    1dee:	78 85       	ldd	r23, Y+8	; 0x08
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	3f ef       	ldi	r19, 0xFF	; 255
    1df8:	4f e7       	ldi	r20, 0x7F	; 127
    1dfa:	57 e4       	ldi	r21, 0x47	; 71
    1dfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e00:	18 16       	cp	r1, r24
    1e02:	4c f5       	brge	.+82     	; 0x1e56 <LCD_voidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	51 e4       	ldi	r21, 0x41	; 65
    1e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	8d 83       	std	Y+5, r24	; 0x05
    1e2c:	0f c0       	rjmp	.+30     	; 0x1e4c <LCD_voidInit+0x606>
    1e2e:	88 ec       	ldi	r24, 0xC8	; 200
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9c 83       	std	Y+4, r25	; 0x04
    1e34:	8b 83       	std	Y+3, r24	; 0x03
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <LCD_voidInit+0x5f4>
    1e3e:	9c 83       	std	Y+4, r25	; 0x04
    1e40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	9e 81       	ldd	r25, Y+6	; 0x06
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	69 f7       	brne	.-38     	; 0x1e2e <LCD_voidInit+0x5e8>
    1e54:	14 c0       	rjmp	.+40     	; 0x1e7e <LCD_voidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e56:	6f 81       	ldd	r22, Y+7	; 0x07
    1e58:	78 85       	ldd	r23, Y+8	; 0x08
    1e5a:	89 85       	ldd	r24, Y+9	; 0x09
    1e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    1e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6e:	9a 83       	std	Y+2, r25	; 0x02
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	9a 81       	ldd	r25, Y+2	; 0x02
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <LCD_voidInit+0x630>
    1e7a:	9a 83       	std	Y+2, r25	; 0x02
    1e7c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    1e7e:	cc 5a       	subi	r28, 0xAC	; 172
    1e80:	df 4f       	sbci	r29, 0xFF	; 255
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	08 95       	ret

00001e96 <LCD_voidSendCmnd>:
/***************************************************************************************/
/* Description! Interface to send the configuration commands to the LCD Driver         */
/* Input      ! Command number                                                         */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendCmnd(u8 Copy_u8Cmnd) {
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	6d 97       	sbiw	r28, 0x1d	; 29
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);

#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT

	/* Set RS to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RS_PIN, DIO_u8_LOW);
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>

	/* Set R/W to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	61 e0       	ldi	r22, 0x01	; 1
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>

	/* Load Command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd);
    1ec0:	83 e0       	ldi	r24, 0x03	; 3
    1ec2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ec4:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_HIGH  */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	62 e0       	ldi	r22, 0x02	; 2
    1ecc:	41 e0       	ldi	r20, 0x01	; 1
    1ece:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	a0 e8       	ldi	r26, 0x80	; 128
    1ed8:	bf e3       	ldi	r27, 0x3F	; 63
    1eda:	89 8f       	std	Y+25, r24	; 0x19
    1edc:	9a 8f       	std	Y+26, r25	; 0x1a
    1ede:	ab 8f       	std	Y+27, r26	; 0x1b
    1ee0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	4a ef       	ldi	r20, 0xFA	; 250
    1ef0:	54 e4       	ldi	r21, 0x44	; 68
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	8d 8b       	std	Y+21, r24	; 0x15
    1efc:	9e 8b       	std	Y+22, r25	; 0x16
    1efe:	af 8b       	std	Y+23, r26	; 0x17
    1f00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f02:	6d 89       	ldd	r22, Y+21	; 0x15
    1f04:	7e 89       	ldd	r23, Y+22	; 0x16
    1f06:	8f 89       	ldd	r24, Y+23	; 0x17
    1f08:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e8       	ldi	r20, 0x80	; 128
    1f10:	5f e3       	ldi	r21, 0x3F	; 63
    1f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f16:	88 23       	and	r24, r24
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <LCD_voidSendCmnd+0x8e>
		__ticks = 1;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	9c 8b       	std	Y+20, r25	; 0x14
    1f20:	8b 8b       	std	Y+19, r24	; 0x13
    1f22:	3f c0       	rjmp	.+126    	; 0x1fa2 <LCD_voidSendCmnd+0x10c>
	else if (__tmp > 65535)
    1f24:	6d 89       	ldd	r22, Y+21	; 0x15
    1f26:	7e 89       	ldd	r23, Y+22	; 0x16
    1f28:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	3f ef       	ldi	r19, 0xFF	; 255
    1f30:	4f e7       	ldi	r20, 0x7F	; 127
    1f32:	57 e4       	ldi	r21, 0x47	; 71
    1f34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	4c f5       	brge	.+82     	; 0x1f8e <LCD_voidSendCmnd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e2       	ldi	r20, 0x20	; 32
    1f4a:	51 e4       	ldi	r21, 0x41	; 65
    1f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	9c 8b       	std	Y+20, r25	; 0x14
    1f62:	8b 8b       	std	Y+19, r24	; 0x13
    1f64:	0f c0       	rjmp	.+30     	; 0x1f84 <LCD_voidSendCmnd+0xee>
    1f66:	88 ec       	ldi	r24, 0xC8	; 200
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	9a 8b       	std	Y+18, r25	; 0x12
    1f6c:	89 8b       	std	Y+17, r24	; 0x11
    1f6e:	89 89       	ldd	r24, Y+17	; 0x11
    1f70:	9a 89       	ldd	r25, Y+18	; 0x12
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <LCD_voidSendCmnd+0xdc>
    1f76:	9a 8b       	std	Y+18, r25	; 0x12
    1f78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	9c 8b       	std	Y+20, r25	; 0x14
    1f82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f84:	8b 89       	ldd	r24, Y+19	; 0x13
    1f86:	9c 89       	ldd	r25, Y+20	; 0x14
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	69 f7       	brne	.-38     	; 0x1f66 <LCD_voidSendCmnd+0xd0>
    1f8c:	14 c0       	rjmp	.+40     	; 0x1fb6 <LCD_voidSendCmnd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f90:	7e 89       	ldd	r23, Y+22	; 0x16
    1f92:	8f 89       	ldd	r24, Y+23	; 0x17
    1f94:	98 8d       	ldd	r25, Y+24	; 0x18
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	9c 8b       	std	Y+20, r25	; 0x14
    1fa0:	8b 8b       	std	Y+19, r24	; 0x13
    1fa2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa6:	98 8b       	std	Y+16, r25	; 0x10
    1fa8:	8f 87       	std	Y+15, r24	; 0x0f
    1faa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fac:	98 89       	ldd	r25, Y+16	; 0x10
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <LCD_voidSendCmnd+0x118>
    1fb2:	98 8b       	std	Y+16, r25	; 0x10
    1fb4:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(1);

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	62 e0       	ldi	r22, 0x02	; 2
    1fba:	40 e0       	ldi	r20, 0x00	; 0
    1fbc:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>

	/*write the rest of the command */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd << 4);
    1fc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc2:	98 2f       	mov	r25, r24
    1fc4:	92 95       	swap	r25
    1fc6:	90 7f       	andi	r25, 0xF0	; 240
    1fc8:	83 e0       	ldi	r24, 0x03	; 3
    1fca:	69 2f       	mov	r22, r25
    1fcc:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_HIGH  */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	62 e0       	ldi	r22, 0x02	; 2
    1fd4:	41 e0       	ldi	r20, 0x01	; 1
    1fd6:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a0 e8       	ldi	r26, 0x80	; 128
    1fe0:	bf e3       	ldi	r27, 0x3F	; 63
    1fe2:	8b 87       	std	Y+11, r24	; 0x0b
    1fe4:	9c 87       	std	Y+12, r25	; 0x0c
    1fe6:	ad 87       	std	Y+13, r26	; 0x0d
    1fe8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	4a ef       	ldi	r20, 0xFA	; 250
    1ff8:	54 e4       	ldi	r21, 0x44	; 68
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	8f 83       	std	Y+7, r24	; 0x07
    2004:	98 87       	std	Y+8, r25	; 0x08
    2006:	a9 87       	std	Y+9, r26	; 0x09
    2008:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    200a:	6f 81       	ldd	r22, Y+7	; 0x07
    200c:	78 85       	ldd	r23, Y+8	; 0x08
    200e:	89 85       	ldd	r24, Y+9	; 0x09
    2010:	9a 85       	ldd	r25, Y+10	; 0x0a
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e8       	ldi	r20, 0x80	; 128
    2018:	5f e3       	ldi	r21, 0x3F	; 63
    201a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    201e:	88 23       	and	r24, r24
    2020:	2c f4       	brge	.+10     	; 0x202c <LCD_voidSendCmnd+0x196>
		__ticks = 1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
    202a:	3f c0       	rjmp	.+126    	; 0x20aa <LCD_voidSendCmnd+0x214>
	else if (__tmp > 65535)
    202c:	6f 81       	ldd	r22, Y+7	; 0x07
    202e:	78 85       	ldd	r23, Y+8	; 0x08
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	3f ef       	ldi	r19, 0xFF	; 255
    2038:	4f e7       	ldi	r20, 0x7F	; 127
    203a:	57 e4       	ldi	r21, 0x47	; 71
    203c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2040:	18 16       	cp	r1, r24
    2042:	4c f5       	brge	.+82     	; 0x2096 <LCD_voidSendCmnd+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2044:	6b 85       	ldd	r22, Y+11	; 0x0b
    2046:	7c 85       	ldd	r23, Y+12	; 0x0c
    2048:	8d 85       	ldd	r24, Y+13	; 0x0d
    204a:	9e 85       	ldd	r25, Y+14	; 0x0e
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e2       	ldi	r20, 0x20	; 32
    2052:	51 e4       	ldi	r21, 0x41	; 65
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	bc 01       	movw	r22, r24
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9e 83       	std	Y+6, r25	; 0x06
    206a:	8d 83       	std	Y+5, r24	; 0x05
    206c:	0f c0       	rjmp	.+30     	; 0x208c <LCD_voidSendCmnd+0x1f6>
    206e:	88 ec       	ldi	r24, 0xC8	; 200
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9c 83       	std	Y+4, r25	; 0x04
    2074:	8b 83       	std	Y+3, r24	; 0x03
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <LCD_voidSendCmnd+0x1e4>
    207e:	9c 83       	std	Y+4, r25	; 0x04
    2080:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2082:	8d 81       	ldd	r24, Y+5	; 0x05
    2084:	9e 81       	ldd	r25, Y+6	; 0x06
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	69 f7       	brne	.-38     	; 0x206e <LCD_voidSendCmnd+0x1d8>
    2094:	14 c0       	rjmp	.+40     	; 0x20be <LCD_voidSendCmnd+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2096:	6f 81       	ldd	r22, Y+7	; 0x07
    2098:	78 85       	ldd	r23, Y+8	; 0x08
    209a:	89 85       	ldd	r24, Y+9	; 0x09
    209c:	9a 85       	ldd	r25, Y+10	; 0x0a
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <LCD_voidSendCmnd+0x220>
    20ba:	9a 83       	std	Y+2, r25	; 0x02
    20bc:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for E to settle */
	_delay_ms(1);

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	62 e0       	ldi	r22, 0x02	; 2
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>
#endif

}
    20c8:	6d 96       	adiw	r28, 0x1d	; 29
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <LCD_voidSendChar>:
/***************************************************************************************/
/* Description! Interface to write character on LCD screen                             */
/* Input      ! Data to send                                                           */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendChar(u8 Copy_u8Data) {
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	ab 97       	sbiw	r28, 0x2b	; 43
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	8b a7       	std	Y+43, r24	; 0x2b
	/* Delay to let the LCD Display the character */
	_delay_ms(2);

#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	/* Set RS to HIG */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RS_PIN, DIO_u8_HIGH);
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>

	/* Set R/W to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	61 e0       	ldi	r22, 0x01	; 1
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	62 e0       	ldi	r22, 0x02	; 2
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>

	/* Load Command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Data);
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	6b a5       	ldd	r22, Y+43	; 0x2b
    2112:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	62 e0       	ldi	r22, 0x02	; 2
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a0 e8       	ldi	r26, 0x80	; 128
    2126:	bf e3       	ldi	r27, 0x3F	; 63
    2128:	8f a3       	std	Y+39, r24	; 0x27
    212a:	98 a7       	std	Y+40, r25	; 0x28
    212c:	a9 a7       	std	Y+41, r26	; 0x29
    212e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2130:	6f a1       	ldd	r22, Y+39	; 0x27
    2132:	78 a5       	ldd	r23, Y+40	; 0x28
    2134:	89 a5       	ldd	r24, Y+41	; 0x29
    2136:	9a a5       	ldd	r25, Y+42	; 0x2a
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4a ef       	ldi	r20, 0xFA	; 250
    213e:	54 e4       	ldi	r21, 0x44	; 68
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	8b a3       	std	Y+35, r24	; 0x23
    214a:	9c a3       	std	Y+36, r25	; 0x24
    214c:	ad a3       	std	Y+37, r26	; 0x25
    214e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2150:	6b a1       	ldd	r22, Y+35	; 0x23
    2152:	7c a1       	ldd	r23, Y+36	; 0x24
    2154:	8d a1       	ldd	r24, Y+37	; 0x25
    2156:	9e a1       	ldd	r25, Y+38	; 0x26
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e8       	ldi	r20, 0x80	; 128
    215e:	5f e3       	ldi	r21, 0x3F	; 63
    2160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2164:	88 23       	and	r24, r24
    2166:	2c f4       	brge	.+10     	; 0x2172 <LCD_voidSendChar+0x98>
		__ticks = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9a a3       	std	Y+34, r25	; 0x22
    216e:	89 a3       	std	Y+33, r24	; 0x21
    2170:	3f c0       	rjmp	.+126    	; 0x21f0 <LCD_voidSendChar+0x116>
	else if (__tmp > 65535)
    2172:	6b a1       	ldd	r22, Y+35	; 0x23
    2174:	7c a1       	ldd	r23, Y+36	; 0x24
    2176:	8d a1       	ldd	r24, Y+37	; 0x25
    2178:	9e a1       	ldd	r25, Y+38	; 0x26
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	3f ef       	ldi	r19, 0xFF	; 255
    217e:	4f e7       	ldi	r20, 0x7F	; 127
    2180:	57 e4       	ldi	r21, 0x47	; 71
    2182:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2186:	18 16       	cp	r1, r24
    2188:	4c f5       	brge	.+82     	; 0x21dc <LCD_voidSendChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218a:	6f a1       	ldd	r22, Y+39	; 0x27
    218c:	78 a5       	ldd	r23, Y+40	; 0x28
    218e:	89 a5       	ldd	r24, Y+41	; 0x29
    2190:	9a a5       	ldd	r25, Y+42	; 0x2a
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e2       	ldi	r20, 0x20	; 32
    2198:	51 e4       	ldi	r21, 0x41	; 65
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	bc 01       	movw	r22, r24
    21a4:	cd 01       	movw	r24, r26
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9a a3       	std	Y+34, r25	; 0x22
    21b0:	89 a3       	std	Y+33, r24	; 0x21
    21b2:	0f c0       	rjmp	.+30     	; 0x21d2 <LCD_voidSendChar+0xf8>
    21b4:	88 ec       	ldi	r24, 0xC8	; 200
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	98 a3       	std	Y+32, r25	; 0x20
    21ba:	8f 8f       	std	Y+31, r24	; 0x1f
    21bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21be:	98 a1       	ldd	r25, Y+32	; 0x20
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <LCD_voidSendChar+0xe6>
    21c4:	98 a3       	std	Y+32, r25	; 0x20
    21c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ca:	9a a1       	ldd	r25, Y+34	; 0x22
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	9a a3       	std	Y+34, r25	; 0x22
    21d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d2:	89 a1       	ldd	r24, Y+33	; 0x21
    21d4:	9a a1       	ldd	r25, Y+34	; 0x22
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	69 f7       	brne	.-38     	; 0x21b4 <LCD_voidSendChar+0xda>
    21da:	14 c0       	rjmp	.+40     	; 0x2204 <LCD_voidSendChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21dc:	6b a1       	ldd	r22, Y+35	; 0x23
    21de:	7c a1       	ldd	r23, Y+36	; 0x24
    21e0:	8d a1       	ldd	r24, Y+37	; 0x25
    21e2:	9e a1       	ldd	r25, Y+38	; 0x26
    21e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	9a a3       	std	Y+34, r25	; 0x22
    21ee:	89 a3       	std	Y+33, r24	; 0x21
    21f0:	89 a1       	ldd	r24, Y+33	; 0x21
    21f2:	9a a1       	ldd	r25, Y+34	; 0x22
    21f4:	9e 8f       	std	Y+30, r25	; 0x1e
    21f6:	8d 8f       	std	Y+29, r24	; 0x1d
    21f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD_voidSendChar+0x122>
    2200:	9e 8f       	std	Y+30, r25	; 0x1e
    2202:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Wait for E to settle */
	_delay_ms(1);

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	62 e0       	ldi	r22, 0x02	; 2
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>

	/*Load the rest of the command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Data << 4);
    220e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2210:	98 2f       	mov	r25, r24
    2212:	92 95       	swap	r25
    2214:	90 7f       	andi	r25, 0xF0	; 240
    2216:	83 e0       	ldi	r24, 0x03	; 3
    2218:	69 2f       	mov	r22, r25
    221a:	0e 94 83 0b 	call	0x1706	; 0x1706 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	62 e0       	ldi	r22, 0x02	; 2
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	a0 e8       	ldi	r26, 0x80	; 128
    222e:	bf e3       	ldi	r27, 0x3F	; 63
    2230:	89 8f       	std	Y+25, r24	; 0x19
    2232:	9a 8f       	std	Y+26, r25	; 0x1a
    2234:	ab 8f       	std	Y+27, r26	; 0x1b
    2236:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2238:	69 8d       	ldd	r22, Y+25	; 0x19
    223a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    223c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    223e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	4a ef       	ldi	r20, 0xFA	; 250
    2246:	54 e4       	ldi	r21, 0x44	; 68
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	8d 8b       	std	Y+21, r24	; 0x15
    2252:	9e 8b       	std	Y+22, r25	; 0x16
    2254:	af 8b       	std	Y+23, r26	; 0x17
    2256:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2258:	6d 89       	ldd	r22, Y+21	; 0x15
    225a:	7e 89       	ldd	r23, Y+22	; 0x16
    225c:	8f 89       	ldd	r24, Y+23	; 0x17
    225e:	98 8d       	ldd	r25, Y+24	; 0x18
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e8       	ldi	r20, 0x80	; 128
    2266:	5f e3       	ldi	r21, 0x3F	; 63
    2268:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    226c:	88 23       	and	r24, r24
    226e:	2c f4       	brge	.+10     	; 0x227a <LCD_voidSendChar+0x1a0>
		__ticks = 1;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9c 8b       	std	Y+20, r25	; 0x14
    2276:	8b 8b       	std	Y+19, r24	; 0x13
    2278:	3f c0       	rjmp	.+126    	; 0x22f8 <LCD_voidSendChar+0x21e>
	else if (__tmp > 65535)
    227a:	6d 89       	ldd	r22, Y+21	; 0x15
    227c:	7e 89       	ldd	r23, Y+22	; 0x16
    227e:	8f 89       	ldd	r24, Y+23	; 0x17
    2280:	98 8d       	ldd	r25, Y+24	; 0x18
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	3f ef       	ldi	r19, 0xFF	; 255
    2286:	4f e7       	ldi	r20, 0x7F	; 127
    2288:	57 e4       	ldi	r21, 0x47	; 71
    228a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    228e:	18 16       	cp	r1, r24
    2290:	4c f5       	brge	.+82     	; 0x22e4 <LCD_voidSendChar+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	69 8d       	ldd	r22, Y+25	; 0x19
    2294:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2296:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2298:	9c 8d       	ldd	r25, Y+28	; 0x1c
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	9c 8b       	std	Y+20, r25	; 0x14
    22b8:	8b 8b       	std	Y+19, r24	; 0x13
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <LCD_voidSendChar+0x200>
    22bc:	88 ec       	ldi	r24, 0xC8	; 200
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9a 8b       	std	Y+18, r25	; 0x12
    22c2:	89 8b       	std	Y+17, r24	; 0x11
    22c4:	89 89       	ldd	r24, Y+17	; 0x11
    22c6:	9a 89       	ldd	r25, Y+18	; 0x12
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <LCD_voidSendChar+0x1ee>
    22cc:	9a 8b       	std	Y+18, r25	; 0x12
    22ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d0:	8b 89       	ldd	r24, Y+19	; 0x13
    22d2:	9c 89       	ldd	r25, Y+20	; 0x14
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	9c 8b       	std	Y+20, r25	; 0x14
    22d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22da:	8b 89       	ldd	r24, Y+19	; 0x13
    22dc:	9c 89       	ldd	r25, Y+20	; 0x14
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	69 f7       	brne	.-38     	; 0x22bc <LCD_voidSendChar+0x1e2>
    22e2:	14 c0       	rjmp	.+40     	; 0x230c <LCD_voidSendChar+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e4:	6d 89       	ldd	r22, Y+21	; 0x15
    22e6:	7e 89       	ldd	r23, Y+22	; 0x16
    22e8:	8f 89       	ldd	r24, Y+23	; 0x17
    22ea:	98 8d       	ldd	r25, Y+24	; 0x18
    22ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9c 8b       	std	Y+20, r25	; 0x14
    22f6:	8b 8b       	std	Y+19, r24	; 0x13
    22f8:	8b 89       	ldd	r24, Y+19	; 0x13
    22fa:	9c 89       	ldd	r25, Y+20	; 0x14
    22fc:	98 8b       	std	Y+16, r25	; 0x10
    22fe:	8f 87       	std	Y+15, r24	; 0x0f
    2300:	8f 85       	ldd	r24, Y+15	; 0x0f
    2302:	98 89       	ldd	r25, Y+16	; 0x10
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <LCD_voidSendChar+0x22a>
    2308:	98 8b       	std	Y+16, r25	; 0x10
    230a:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(1);

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	62 e0       	ldi	r22, 0x02	; 2
    2310:	41 e0       	ldi	r20, 0x01	; 1
    2312:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	a0 e8       	ldi	r26, 0x80	; 128
    231c:	bf e3       	ldi	r27, 0x3F	; 63
    231e:	8b 87       	std	Y+11, r24	; 0x0b
    2320:	9c 87       	std	Y+12, r25	; 0x0c
    2322:	ad 87       	std	Y+13, r26	; 0x0d
    2324:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2326:	6b 85       	ldd	r22, Y+11	; 0x0b
    2328:	7c 85       	ldd	r23, Y+12	; 0x0c
    232a:	8d 85       	ldd	r24, Y+13	; 0x0d
    232c:	9e 85       	ldd	r25, Y+14	; 0x0e
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	4a ef       	ldi	r20, 0xFA	; 250
    2334:	54 e4       	ldi	r21, 0x44	; 68
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	8f 83       	std	Y+7, r24	; 0x07
    2340:	98 87       	std	Y+8, r25	; 0x08
    2342:	a9 87       	std	Y+9, r26	; 0x09
    2344:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2346:	6f 81       	ldd	r22, Y+7	; 0x07
    2348:	78 85       	ldd	r23, Y+8	; 0x08
    234a:	89 85       	ldd	r24, Y+9	; 0x09
    234c:	9a 85       	ldd	r25, Y+10	; 0x0a
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    235a:	88 23       	and	r24, r24
    235c:	2c f4       	brge	.+10     	; 0x2368 <LCD_voidSendChar+0x28e>
		__ticks = 1;
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
    2366:	3f c0       	rjmp	.+126    	; 0x23e6 <LCD_voidSendChar+0x30c>
	else if (__tmp > 65535)
    2368:	6f 81       	ldd	r22, Y+7	; 0x07
    236a:	78 85       	ldd	r23, Y+8	; 0x08
    236c:	89 85       	ldd	r24, Y+9	; 0x09
    236e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	4f e7       	ldi	r20, 0x7F	; 127
    2376:	57 e4       	ldi	r21, 0x47	; 71
    2378:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    237c:	18 16       	cp	r1, r24
    237e:	4c f5       	brge	.+82     	; 0x23d2 <LCD_voidSendChar+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2380:	6b 85       	ldd	r22, Y+11	; 0x0b
    2382:	7c 85       	ldd	r23, Y+12	; 0x0c
    2384:	8d 85       	ldd	r24, Y+13	; 0x0d
    2386:	9e 85       	ldd	r25, Y+14	; 0x0e
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e2       	ldi	r20, 0x20	; 32
    238e:	51 e4       	ldi	r21, 0x41	; 65
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
    23a8:	0f c0       	rjmp	.+30     	; 0x23c8 <LCD_voidSendChar+0x2ee>
    23aa:	88 ec       	ldi	r24, 0xC8	; 200
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9c 83       	std	Y+4, r25	; 0x04
    23b0:	8b 83       	std	Y+3, r24	; 0x03
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <LCD_voidSendChar+0x2dc>
    23ba:	9c 83       	std	Y+4, r25	; 0x04
    23bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23be:	8d 81       	ldd	r24, Y+5	; 0x05
    23c0:	9e 81       	ldd	r25, Y+6	; 0x06
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	9e 83       	std	Y+6, r25	; 0x06
    23c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ca:	9e 81       	ldd	r25, Y+6	; 0x06
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	69 f7       	brne	.-38     	; 0x23aa <LCD_voidSendChar+0x2d0>
    23d0:	14 c0       	rjmp	.+40     	; 0x23fa <LCD_voidSendChar+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d2:	6f 81       	ldd	r22, Y+7	; 0x07
    23d4:	78 85       	ldd	r23, Y+8	; 0x08
    23d6:	89 85       	ldd	r24, Y+9	; 0x09
    23d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9e 83       	std	Y+6, r25	; 0x06
    23e4:	8d 83       	std	Y+5, r24	; 0x05
    23e6:	8d 81       	ldd	r24, Y+5	; 0x05
    23e8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ea:	9a 83       	std	Y+2, r25	; 0x02
    23ec:	89 83       	std	Y+1, r24	; 0x01
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	9a 81       	ldd	r25, Y+2	; 0x02
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <LCD_voidSendChar+0x318>
    23f6:	9a 83       	std	Y+2, r25	; 0x02
    23f8:	89 83       	std	Y+1, r24	; 0x01
	/* Delay to let the LCD Display the character */
	_delay_ms(1);

#endif

}
    23fa:	ab 96       	adiw	r28, 0x2b	; 43
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <LCD_voidSendString>:
/***************************************************************************************/
/* Description! Interface to write string on LCD screen                                */
/* Input      ! Pointer to the string                                                  */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendString(u8 *Copy_pu8String) {
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	00 d0       	rcall	.+0      	; 0x2412 <LCD_voidSendString+0x6>
    2412:	0f 92       	push	r0
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	9b 83       	std	Y+3, r25	; 0x03
    241a:	8a 83       	std	Y+2, r24	; 0x02

	//	/* Local loop index */
	//	u8 u8Index = 0;
	u8 iteration = 0;
    241c:	19 82       	std	Y+1, r1	; 0x01
	//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration = 0; Copy_pu8String[iteration] != '\0'; iteration++) {
    241e:	19 82       	std	Y+1, r1	; 0x01
    2420:	0e c0       	rjmp	.+28     	; 0x243e <LCD_voidSendString+0x32>
		/* Write Character on LCD */
		LCD_voidSendChar(Copy_pu8String[iteration]);
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	9b 81       	ldd	r25, Y+3	; 0x03
    242c:	fc 01       	movw	r30, r24
    242e:	e2 0f       	add	r30, r18
    2430:	f3 1f       	adc	r31, r19
    2432:	80 81       	ld	r24, Z
    2434:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_voidSendChar>

	//	/* Local loop index */
	//	u8 u8Index = 0;
	u8 iteration = 0;
	//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration = 0; Copy_pu8String[iteration] != '\0'; iteration++) {
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	8f 5f       	subi	r24, 0xFF	; 255
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	9b 81       	ldd	r25, Y+3	; 0x03
    2448:	fc 01       	movw	r30, r24
    244a:	e2 0f       	add	r30, r18
    244c:	f3 1f       	adc	r31, r19
    244e:	80 81       	ld	r24, Z
    2450:	88 23       	and	r24, r24
    2452:	39 f7       	brne	.-50     	; 0x2422 <LCD_voidSendString+0x16>
		LCD_voidSendChar(Copy_pu8String[iteration]);

		//		/* Increment local loop index */
		//		u8Index++;
	}
}
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <LCD_voidSendIntger>:

void LCD_voidSendIntger(s32 Copy_s32Data) {
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	ac 97       	sbiw	r28, 0x2c	; 44
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	69 a7       	std	Y+41, r22	; 0x29
    2476:	7a a7       	std	Y+42, r23	; 0x2a
    2478:	8b a7       	std	Y+43, r24	; 0x2b
    247a:	9c a7       	std	Y+44, r25	; 0x2c
	u32 str[10];
	// Converts Int to String
	sprintf(str, "%ld", Copy_s32Data);
    247c:	ce 01       	movw	r24, r28
    247e:	01 96       	adiw	r24, 0x01	; 1
    2480:	2d b7       	in	r18, 0x3d	; 61
    2482:	3e b7       	in	r19, 0x3e	; 62
    2484:	28 50       	subi	r18, 0x08	; 8
    2486:	30 40       	sbci	r19, 0x00	; 0
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	3e bf       	out	0x3e, r19	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	2d bf       	out	0x3d, r18	; 61
    2492:	ed b7       	in	r30, 0x3d	; 61
    2494:	fe b7       	in	r31, 0x3e	; 62
    2496:	31 96       	adiw	r30, 0x01	; 1
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	80 83       	st	Z, r24
    249c:	80 e6       	ldi	r24, 0x60	; 96
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	93 83       	std	Z+3, r25	; 0x03
    24a2:	82 83       	std	Z+2, r24	; 0x02
    24a4:	89 a5       	ldd	r24, Y+41	; 0x29
    24a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    24a8:	ab a5       	ldd	r26, Y+43	; 0x2b
    24aa:	bc a5       	ldd	r27, Y+44	; 0x2c
    24ac:	84 83       	std	Z+4, r24	; 0x04
    24ae:	95 83       	std	Z+5, r25	; 0x05
    24b0:	a6 83       	std	Z+6, r26	; 0x06
    24b2:	b7 83       	std	Z+7, r27	; 0x07
    24b4:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <sprintf>
    24b8:	8d b7       	in	r24, 0x3d	; 61
    24ba:	9e b7       	in	r25, 0x3e	; 62
    24bc:	08 96       	adiw	r24, 0x08	; 8
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	9e bf       	out	0x3e, r25	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	8d bf       	out	0x3d, r24	; 61
	LCD_voidSendString(str);
    24c8:	ce 01       	movw	r24, r28
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_voidSendString>
}
    24d0:	ac 96       	adiw	r28, 0x2c	; 44
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <LCD_voidSendFloat>:

void LCD_voidSendFloat(f64 Copy_f32Data) {
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	2c 97       	sbiw	r28, 0x0c	; 12
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	69 87       	std	Y+9, r22	; 0x09
    24f8:	7a 87       	std	Y+10, r23	; 0x0a
    24fa:	8b 87       	std	Y+11, r24	; 0x0b
    24fc:	9c 87       	std	Y+12, r25	; 0x0c
	s32 int_part;
	f32 frac_part;
	// separate integer and fractional parts
	int_part = (s32) Copy_f32Data;
    24fe:	69 85       	ldd	r22, Y+9	; 0x09
    2500:	7a 85       	ldd	r23, Y+10	; 0x0a
    2502:	8b 85       	ldd	r24, Y+11	; 0x0b
    2504:	9c 85       	ldd	r25, Y+12	; 0x0c
    2506:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	af 83       	std	Y+7, r26	; 0x07
    2514:	b8 87       	std	Y+8, r27	; 0x08
	frac_part = Copy_f32Data - int_part;
    2516:	6d 81       	ldd	r22, Y+5	; 0x05
    2518:	7e 81       	ldd	r23, Y+6	; 0x06
    251a:	8f 81       	ldd	r24, Y+7	; 0x07
    251c:	98 85       	ldd	r25, Y+8	; 0x08
    251e:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2522:	9b 01       	movw	r18, r22
    2524:	ac 01       	movw	r20, r24
    2526:	69 85       	ldd	r22, Y+9	; 0x09
    2528:	7a 85       	ldd	r23, Y+10	; 0x0a
    252a:	8b 85       	ldd	r24, Y+11	; 0x0b
    252c:	9c 85       	ldd	r25, Y+12	; 0x0c
    252e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	9a 83       	std	Y+2, r25	; 0x02
    253a:	ab 83       	std	Y+3, r26	; 0x03
    253c:	bc 83       	std	Y+4, r27	; 0x04
	frac_part = (s32) (frac_part * 1000);
    253e:	69 81       	ldd	r22, Y+1	; 0x01
    2540:	7a 81       	ldd	r23, Y+2	; 0x02
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	4a e7       	ldi	r20, 0x7A	; 122
    254c:	54 e4       	ldi	r21, 0x44	; 68
    254e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	bc 01       	movw	r22, r24
    2558:	cd 01       	movw	r24, r26
    255a:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	bc 01       	movw	r22, r24
    2564:	cd 01       	movw	r24, r26
    2566:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	ab 83       	std	Y+3, r26	; 0x03
    2574:	bc 83       	std	Y+4, r27	; 0x04
	LCD_voidSendIntger(int_part);
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	af 81       	ldd	r26, Y+7	; 0x07
    257c:	b8 85       	ldd	r27, Y+8	; 0x08
    257e:	bc 01       	movw	r22, r24
    2580:	cd 01       	movw	r24, r26
    2582:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_voidSendIntger>
	LCD_voidSendChar('.');
    2586:	8e e2       	ldi	r24, 0x2E	; 46
    2588:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_voidSendChar>
	LCD_voidSendIntger(frac_part);
    258c:	69 81       	ldd	r22, Y+1	; 0x01
    258e:	7a 81       	ldd	r23, Y+2	; 0x02
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	9c 81       	ldd	r25, Y+4	; 0x04
    2594:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	bc 01       	movw	r22, r24
    259e:	cd 01       	movw	r24, r26
    25a0:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_voidSendIntger>
}
    25a4:	2c 96       	adiw	r28, 0x0c	; 12
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <LCD_voidGotoxy>:
/***************************************************************************************/
/* Description! Interface to start the writing process at certain digit in the LCD     */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidGotoxy(u8 Copy_u8Y, u8 Copy_u8X) {
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	00 d0       	rcall	.+0      	; 0x25bc <LCD_voidGotoxy+0x6>
    25bc:	00 d0       	rcall	.+0      	; 0x25be <LCD_voidGotoxy+0x8>
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	89 83       	std	Y+1, r24	; 0x01
    25c4:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8X > 0 && Copy_u8X <= 16) {
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	88 23       	and	r24, r24
    25ca:	e1 f0       	breq	.+56     	; 0x2604 <LCD_voidGotoxy+0x4e>
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	81 31       	cpi	r24, 0x11	; 17
    25d0:	c8 f4       	brcc	.+50     	; 0x2604 <LCD_voidGotoxy+0x4e>
		switch (Copy_u8Y) {
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	3c 83       	std	Y+4, r19	; 0x04
    25da:	2b 83       	std	Y+3, r18	; 0x03
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	9c 81       	ldd	r25, Y+4	; 0x04
    25e0:	81 30       	cpi	r24, 0x01	; 1
    25e2:	91 05       	cpc	r25, r1
    25e4:	31 f0       	breq	.+12     	; 0x25f2 <LCD_voidGotoxy+0x3c>
    25e6:	2b 81       	ldd	r18, Y+3	; 0x03
    25e8:	3c 81       	ldd	r19, Y+4	; 0x04
    25ea:	22 30       	cpi	r18, 0x02	; 2
    25ec:	31 05       	cpc	r19, r1
    25ee:	31 f0       	breq	.+12     	; 0x25fc <LCD_voidGotoxy+0x46>
    25f0:	09 c0       	rjmp	.+18     	; 0x2604 <LCD_voidGotoxy+0x4e>
		case 1:
			LCD_voidSendCmnd(Copy_u8X + 127);
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	81 58       	subi	r24, 0x81	; 129
    25f6:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidSendCmnd>
    25fa:	04 c0       	rjmp	.+8      	; 0x2604 <LCD_voidGotoxy+0x4e>
			break;
		case 2:
			LCD_voidSendCmnd(Copy_u8X + 191);
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	81 54       	subi	r24, 0x41	; 65
    2600:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidSendCmnd>
			break;
		default:
			break;
		}
	}
}
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <LCD_voidSendExtraChar>:
/***************************************************************************************/
/* Description! Interface to write extra characters saved in the CGRAM                 */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendExtraChar(u8 Copy_u8Y, u8 Copy_u8X) {
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	62 97       	sbiw	r28, 0x12	; 18
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	89 8b       	std	Y+17, r24	; 0x11
    2628:	6a 8b       	std	Y+18, r22	; 0x12
	u8 iteration1, iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCmnd(64);
    262a:	80 e4       	ldi	r24, 0x40	; 64
    262c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidSendCmnd>
	for (iteration1 = 0; iteration1 < 64; iteration1++) {
    2630:	18 8a       	std	Y+16, r1	; 0x10
    2632:	0c c0       	rjmp	.+24     	; 0x264c <LCD_voidSendExtraChar+0x3a>
		LCD_voidSendChar(ExtraChar[iteration1]);
    2634:	88 89       	ldd	r24, Y+16	; 0x10
    2636:	88 2f       	mov	r24, r24
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	fc 01       	movw	r30, r24
    263c:	e2 58       	subi	r30, 0x82	; 130
    263e:	fe 4f       	sbci	r31, 0xFE	; 254
    2640:	80 81       	ld	r24, Z
    2642:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_voidSendChar>
void LCD_voidSendExtraChar(u8 Copy_u8Y, u8 Copy_u8X) {
	u8 iteration1, iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCmnd(64);
	for (iteration1 = 0; iteration1 < 64; iteration1++) {
    2646:	88 89       	ldd	r24, Y+16	; 0x10
    2648:	8f 5f       	subi	r24, 0xFF	; 255
    264a:	88 8b       	std	Y+16, r24	; 0x10
    264c:	88 89       	ldd	r24, Y+16	; 0x10
    264e:	80 34       	cpi	r24, 0x40	; 64
    2650:	88 f3       	brcs	.-30     	; 0x2634 <LCD_voidSendExtraChar+0x22>
		LCD_voidSendChar(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_voidSendCmnd(128);
    2652:	80 e8       	ldi	r24, 0x80	; 128
    2654:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidSendCmnd>
	LCD_voidGotoxy(Copy_u8Y, Copy_u8X);
    2658:	89 89       	ldd	r24, Y+17	; 0x11
    265a:	6a 89       	ldd	r22, Y+18	; 0x12
    265c:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_voidGotoxy>
	/*First eight character which saved at CGRAM*/
	for (iteration2 = 0; iteration2 <= 7; iteration2++) {
    2660:	1f 86       	std	Y+15, r1	; 0x0f
    2662:	78 c0       	rjmp	.+240    	; 0x2754 <LCD_voidSendExtraChar+0x142>
		/* Write bytes of DDRAM */
		LCD_voidSendChar(iteration2);
    2664:	8f 85       	ldd	r24, Y+15	; 0x0f
    2666:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_voidSendChar>
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a0 ea       	ldi	r26, 0xA0	; 160
    2670:	b0 e4       	ldi	r27, 0x40	; 64
    2672:	8b 87       	std	Y+11, r24	; 0x0b
    2674:	9c 87       	std	Y+12, r25	; 0x0c
    2676:	ad 87       	std	Y+13, r26	; 0x0d
    2678:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	6b 85       	ldd	r22, Y+11	; 0x0b
    267c:	7c 85       	ldd	r23, Y+12	; 0x0c
    267e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2680:	9e 85       	ldd	r25, Y+14	; 0x0e
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	4a ef       	ldi	r20, 0xFA	; 250
    2688:	54 e4       	ldi	r21, 0x44	; 68
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	8f 83       	std	Y+7, r24	; 0x07
    2694:	98 87       	std	Y+8, r25	; 0x08
    2696:	a9 87       	std	Y+9, r26	; 0x09
    2698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269a:	6f 81       	ldd	r22, Y+7	; 0x07
    269c:	78 85       	ldd	r23, Y+8	; 0x08
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	2c f4       	brge	.+10     	; 0x26bc <LCD_voidSendExtraChar+0xaa>
		__ticks = 1;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
    26ba:	3f c0       	rjmp	.+126    	; 0x273a <LCD_voidSendExtraChar+0x128>
	else if (__tmp > 65535)
    26bc:	6f 81       	ldd	r22, Y+7	; 0x07
    26be:	78 85       	ldd	r23, Y+8	; 0x08
    26c0:	89 85       	ldd	r24, Y+9	; 0x09
    26c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	4f e7       	ldi	r20, 0x7F	; 127
    26ca:	57 e4       	ldi	r21, 0x47	; 71
    26cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d0:	18 16       	cp	r1, r24
    26d2:	4c f5       	brge	.+82     	; 0x2726 <LCD_voidSendExtraChar+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26da:	9e 85       	ldd	r25, Y+14	; 0x0e
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e2       	ldi	r20, 0x20	; 32
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9e 83       	std	Y+6, r25	; 0x06
    26fa:	8d 83       	std	Y+5, r24	; 0x05
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <LCD_voidSendExtraChar+0x10a>
    26fe:	88 ec       	ldi	r24, 0xC8	; 200
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9c 83       	std	Y+4, r25	; 0x04
    2704:	8b 83       	std	Y+3, r24	; 0x03
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	9c 81       	ldd	r25, Y+4	; 0x04
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <LCD_voidSendExtraChar+0xf8>
    270e:	9c 83       	std	Y+4, r25	; 0x04
    2710:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271c:	8d 81       	ldd	r24, Y+5	; 0x05
    271e:	9e 81       	ldd	r25, Y+6	; 0x06
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	69 f7       	brne	.-38     	; 0x26fe <LCD_voidSendExtraChar+0xec>
    2724:	14 c0       	rjmp	.+40     	; 0x274e <LCD_voidSendExtraChar+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2726:	6f 81       	ldd	r22, Y+7	; 0x07
    2728:	78 85       	ldd	r23, Y+8	; 0x08
    272a:	89 85       	ldd	r24, Y+9	; 0x09
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9e 83       	std	Y+6, r25	; 0x06
    2738:	8d 83       	std	Y+5, r24	; 0x05
    273a:	8d 81       	ldd	r24, Y+5	; 0x05
    273c:	9e 81       	ldd	r25, Y+6	; 0x06
    273e:	9a 83       	std	Y+2, r25	; 0x02
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	9a 81       	ldd	r25, Y+2	; 0x02
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <LCD_voidSendExtraChar+0x134>
    274a:	9a 83       	std	Y+2, r25	; 0x02
    274c:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_voidSendCmnd(128);
	LCD_voidGotoxy(Copy_u8Y, Copy_u8X);
	/*First eight character which saved at CGRAM*/
	for (iteration2 = 0; iteration2 <= 7; iteration2++) {
    274e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2750:	8f 5f       	subi	r24, 0xFF	; 255
    2752:	8f 87       	std	Y+15, r24	; 0x0f
    2754:	8f 85       	ldd	r24, Y+15	; 0x0f
    2756:	88 30       	cpi	r24, 0x08	; 8
    2758:	08 f4       	brcc	.+2      	; 0x275c <LCD_voidSendExtraChar+0x14a>
    275a:	84 cf       	rjmp	.-248    	; 0x2664 <LCD_voidSendExtraChar+0x52>
		/* Write bytes of DDRAM */
		LCD_voidSendChar(iteration2);

		_delay_ms(5);
	}
}
    275c:	62 96       	adiw	r28, 0x12	; 18
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	08 95       	ret

0000276e <LCD_voidWriteSpecialCharacter>:

/*  New */
void LCD_voidWriteSpecialCharacter(u8 *Copy_pu8Pattern, u8 Copy_u8PatternNumber,
		u8 Copy_u8XPos, u8 Copy_u8YPos) {
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	27 97       	sbiw	r28, 0x07	; 7
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	f8 94       	cli
    277c:	de bf       	out	0x3e, r29	; 62
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	cd bf       	out	0x3d, r28	; 61
    2782:	9c 83       	std	Y+4, r25	; 0x04
    2784:	8b 83       	std	Y+3, r24	; 0x03
    2786:	6d 83       	std	Y+5, r22	; 0x05
    2788:	4e 83       	std	Y+6, r20	; 0x06
    278a:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address, Local_u8PatternCounter;

	/*1- Calculate the required address of CGRAM*/
	Local_u8Address = Copy_u8PatternNumber * 8;
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	88 2f       	mov	r24, r24
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	88 0f       	add	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	8a 83       	std	Y+2, r24	; 0x02

	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	80 5c       	subi	r24, 0xC0	; 192
    27a4:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidSendCmnd>

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
    27a8:	19 82       	std	Y+1, r1	; 0x01
    27aa:	0e c0       	rjmp	.+28     	; 0x27c8 <LCD_voidWriteSpecialCharacter+0x5a>
			Local_u8PatternCounter++) {
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8PatternCounter]);
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
    27b4:	9c 81       	ldd	r25, Y+4	; 0x04
    27b6:	fc 01       	movw	r30, r24
    27b8:	e2 0f       	add	r30, r18
    27ba:	f3 1f       	adc	r31, r19
    27bc:	80 81       	ld	r24, Z
    27be:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_voidSendChar>
	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
			Local_u8PatternCounter++) {
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	8f 5f       	subi	r24, 0xFF	; 255
    27c6:	89 83       	std	Y+1, r24	; 0x01

	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	88 30       	cpi	r24, 0x08	; 8
    27cc:	78 f3       	brcs	.-34     	; 0x27ac <LCD_voidWriteSpecialCharacter+0x3e>
			Local_u8PatternCounter++) {
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8PatternCounter]);
	}

	/*4- shift the address counter to the DDRAM*/
	LCD_voidGotoxy(Copy_u8XPos, Copy_u8YPos);
    27ce:	8e 81       	ldd	r24, Y+6	; 0x06
    27d0:	6f 81       	ldd	r22, Y+7	; 0x07
    27d2:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_voidGotoxy>

	/*5- Display the CGRAM pattern on the LCD*/
	LCD_voidSendChar(Copy_u8PatternNumber);
    27d6:	8d 81       	ldd	r24, Y+5	; 0x05
    27d8:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_voidSendChar>

}
    27dc:	27 96       	adiw	r28, 0x07	; 7
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <delay_ms>:

/* HAL */
#include "LCD_interface.h"

void delay_ms(uint16_t milliseconds)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	61 97       	sbiw	r28, 0x11	; 17
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	98 8b       	std	Y+16, r25	; 0x10
    2804:	8f 87       	std	Y+15, r24	; 0x0f
    2806:	72 c0       	rjmp	.+228    	; 0x28ec <delay_ms+0xfe>
    while (milliseconds--)
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	a0 e8       	ldi	r26, 0x80	; 128
    280e:	bf e3       	ldi	r27, 0x3F	; 63
    2810:	8b 87       	std	Y+11, r24	; 0x0b
    2812:	9c 87       	std	Y+12, r25	; 0x0c
    2814:	ad 87       	std	Y+13, r26	; 0x0d
    2816:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2818:	6b 85       	ldd	r22, Y+11	; 0x0b
    281a:	7c 85       	ldd	r23, Y+12	; 0x0c
    281c:	8d 85       	ldd	r24, Y+13	; 0x0d
    281e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	4a e7       	ldi	r20, 0x7A	; 122
    2826:	53 e4       	ldi	r21, 0x43	; 67
    2828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	8f 83       	std	Y+7, r24	; 0x07
    2832:	98 87       	std	Y+8, r25	; 0x08
    2834:	a9 87       	std	Y+9, r26	; 0x09
    2836:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2838:	6f 81       	ldd	r22, Y+7	; 0x07
    283a:	78 85       	ldd	r23, Y+8	; 0x08
    283c:	89 85       	ldd	r24, Y+9	; 0x09
    283e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e8       	ldi	r20, 0x80	; 128
    2846:	5f e3       	ldi	r21, 0x3F	; 63
    2848:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    284c:	88 23       	and	r24, r24
    284e:	2c f4       	brge	.+10     	; 0x285a <delay_ms+0x6c>
		__ticks = 1;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9e 83       	std	Y+6, r25	; 0x06
    2856:	8d 83       	std	Y+5, r24	; 0x05
    2858:	3f c0       	rjmp	.+126    	; 0x28d8 <delay_ms+0xea>
	else if (__tmp > 65535)
    285a:	6f 81       	ldd	r22, Y+7	; 0x07
    285c:	78 85       	ldd	r23, Y+8	; 0x08
    285e:	89 85       	ldd	r24, Y+9	; 0x09
    2860:	9a 85       	ldd	r25, Y+10	; 0x0a
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	3f ef       	ldi	r19, 0xFF	; 255
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	57 e4       	ldi	r21, 0x47	; 71
    286a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    286e:	18 16       	cp	r1, r24
    2870:	4c f5       	brge	.+82     	; 0x28c4 <delay_ms+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2872:	6b 85       	ldd	r22, Y+11	; 0x0b
    2874:	7c 85       	ldd	r23, Y+12	; 0x0c
    2876:	8d 85       	ldd	r24, Y+13	; 0x0d
    2878:	9e 85       	ldd	r25, Y+14	; 0x0e
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e2       	ldi	r20, 0x20	; 32
    2880:	51 e4       	ldi	r21, 0x41	; 65
    2882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	9e 83       	std	Y+6, r25	; 0x06
    2898:	8d 83       	std	Y+5, r24	; 0x05
    289a:	0f c0       	rjmp	.+30     	; 0x28ba <delay_ms+0xcc>
    289c:	89 e1       	ldi	r24, 0x19	; 25
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	9c 83       	std	Y+4, r25	; 0x04
    28a2:	8b 83       	std	Y+3, r24	; 0x03
    28a4:	8b 81       	ldd	r24, Y+3	; 0x03
    28a6:	9c 81       	ldd	r25, Y+4	; 0x04
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <delay_ms+0xba>
    28ac:	9c 83       	std	Y+4, r25	; 0x04
    28ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	9e 81       	ldd	r25, Y+6	; 0x06
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	9e 83       	std	Y+6, r25	; 0x06
    28b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ba:	8d 81       	ldd	r24, Y+5	; 0x05
    28bc:	9e 81       	ldd	r25, Y+6	; 0x06
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	69 f7       	brne	.-38     	; 0x289c <delay_ms+0xae>
    28c2:	14 c0       	rjmp	.+40     	; 0x28ec <delay_ms+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c4:	6f 81       	ldd	r22, Y+7	; 0x07
    28c6:	78 85       	ldd	r23, Y+8	; 0x08
    28c8:	89 85       	ldd	r24, Y+9	; 0x09
    28ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	9e 83       	std	Y+6, r25	; 0x06
    28d6:	8d 83       	std	Y+5, r24	; 0x05
    28d8:	8d 81       	ldd	r24, Y+5	; 0x05
    28da:	9e 81       	ldd	r25, Y+6	; 0x06
    28dc:	9a 83       	std	Y+2, r25	; 0x02
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	9a 81       	ldd	r25, Y+2	; 0x02
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <delay_ms+0xf6>
    28e8:	9a 83       	std	Y+2, r25	; 0x02
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	19 8a       	std	Y+17, r1	; 0x11
    28ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f0:	98 89       	ldd	r25, Y+16	; 0x10
    28f2:	00 97       	sbiw	r24, 0x00	; 0
    28f4:	11 f0       	breq	.+4      	; 0x28fa <delay_ms+0x10c>
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	89 8b       	std	Y+17, r24	; 0x11
    28fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    28fc:	98 89       	ldd	r25, Y+16	; 0x10
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	98 8b       	std	Y+16, r25	; 0x10
    2902:	8f 87       	std	Y+15, r24	; 0x0f
    2904:	89 89       	ldd	r24, Y+17	; 0x11
    2906:	88 23       	and	r24, r24
    2908:	09 f0       	breq	.+2      	; 0x290c <delay_ms+0x11e>
    290a:	7e cf       	rjmp	.-260    	; 0x2808 <delay_ms+0x1a>
    {
        _delay_ms(1);
    }
}
    290c:	61 96       	adiw	r28, 0x11	; 17
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <main>:

int main(void) {
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	00 d0       	rcall	.+0      	; 0x2924 <main+0x6>
    2924:	00 d0       	rcall	.+0      	; 0x2926 <main+0x8>
    2926:	00 d0       	rcall	.+0      	; 0x2928 <main+0xa>
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62

	/* Initialization Functions */
	DIO_voidInit();
    292c:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidInit>
	LCD_voidInit();
    2930:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_voidInit>
	ADC_voidInit();
    2934:	0e 94 50 06 	call	0xca0	; 0xca0 <ADC_voidInit>

	/* Local Variables */
	/* Variable to get the ADC Digital value */
	u16 Local_u16ADCDigitalValue = 0;
    2938:	1e 82       	std	Y+6, r1	; 0x06
    293a:	1d 82       	std	Y+5, r1	; 0x05
	/* Variable to save the temperature value in C */
	u16 Local_u16TempValue = 0;
    293c:	1c 82       	std	Y+4, r1	; 0x04
    293e:	1b 82       	std	Y+3, r1	; 0x03
	/* Variable to save the temperature value in mv */
	u16 Local_u16TempValuemv = 0;
    2940:	1a 82       	std	Y+2, r1	; 0x02
    2942:	19 82       	std	Y+1, r1	; 0x01

	LCD_voidSendString("Temperature =");
    2944:	84 e6       	ldi	r24, 0x64	; 100
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_voidSendString>

	/* Super Loop */
	while (1) {

		ADC_u8GetDigitalValueSynchNonBlocking(ADC_u8_CHANNEL_0, &Local_u16ADCDigitalValue);
    294c:	9e 01       	movw	r18, r28
    294e:	2b 5f       	subi	r18, 0xFB	; 251
    2950:	3f 4f       	sbci	r19, 0xFF	; 255
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	b9 01       	movw	r22, r18
    2956:	0e 94 8f 06 	call	0xd1e	; 0xd1e <ADC_u8GetDigitalValueSynchNonBlocking>
		Local_u16TempValuemv = ((Local_u16ADCDigitalValue * 5000UL) / 1024);
    295a:	8d 81       	ldd	r24, Y+5	; 0x05
    295c:	9e 81       	ldd	r25, Y+6	; 0x06
    295e:	cc 01       	movw	r24, r24
    2960:	a0 e0       	ldi	r26, 0x00	; 0
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	28 e8       	ldi	r18, 0x88	; 136
    2966:	33 e1       	ldi	r19, 0x13	; 19
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__mulsi3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	07 2e       	mov	r0, r23
    297a:	7a e0       	ldi	r23, 0x0A	; 10
    297c:	b6 95       	lsr	r27
    297e:	a7 95       	ror	r26
    2980:	97 95       	ror	r25
    2982:	87 95       	ror	r24
    2984:	7a 95       	dec	r23
    2986:	d1 f7       	brne	.-12     	; 0x297c <main+0x5e>
    2988:	70 2d       	mov	r23, r0
    298a:	9a 83       	std	Y+2, r25	; 0x02
    298c:	89 83       	std	Y+1, r24	; 0x01
		Local_u16TempValue = Local_u16TempValuemv / 10;
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	9a 81       	ldd	r25, Y+2	; 0x02
    2992:	2a e0       	ldi	r18, 0x0A	; 10
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	b9 01       	movw	r22, r18
    2998:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodhi4>
    299c:	cb 01       	movw	r24, r22
    299e:	9c 83       	std	Y+4, r25	; 0x04
    29a0:	8b 83       	std	Y+3, r24	; 0x03

		LCD_voidGotoxy(1, 14);
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	6e e0       	ldi	r22, 0x0E	; 14
    29a6:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_voidGotoxy>
		LCD_voidSendString("   ");
    29aa:	82 e7       	ldi	r24, 0x72	; 114
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_voidSendString>
		LCD_voidGotoxy(1, 14);
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	6e e0       	ldi	r22, 0x0E	; 14
    29b6:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_voidGotoxy>
		LCD_voidSendIntger(Local_u16TempValue);
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	9c 81       	ldd	r25, Y+4	; 0x04
    29be:	cc 01       	movw	r24, r24
    29c0:	a0 e0       	ldi	r26, 0x00	; 0
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	bc 01       	movw	r22, r24
    29c6:	cd 01       	movw	r24, r26
    29c8:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_voidSendIntger>
    29cc:	5c c0       	rjmp	.+184    	; 0x2a86 <main+0x168>

		while (Local_u16TempValue >= 60) {

			DIO_u8SetPinValue( DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_HIGH);
    29ce:	82 e0       	ldi	r24, 0x02	; 2
    29d0:	61 e0       	ldi	r22, 0x01	; 1
    29d2:	41 e0       	ldi	r20, 0x01	; 1
    29d4:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>
			DIO_u8SetPinValue( DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_HIGH);
    29d8:	82 e0       	ldi	r24, 0x02	; 2
    29da:	62 e0       	ldi	r22, 0x02	; 2
    29dc:	41 e0       	ldi	r20, 0x01	; 1
    29de:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>

			DIO_u8SetPinValue( DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_HIGH);
    29e2:	82 e0       	ldi	r24, 0x02	; 2
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	41 e0       	ldi	r20, 0x01	; 1
    29e8:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>
			delay_ms(500);
    29ec:	84 ef       	ldi	r24, 0xF4	; 244
    29ee:	91 e0       	ldi	r25, 0x01	; 1
    29f0:	0e 94 f7 13 	call	0x27ee	; 0x27ee <delay_ms>
			DIO_u8SetPinValue( DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_LOW);
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	60 e0       	ldi	r22, 0x00	; 0
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>
			delay_ms(500);
    29fe:	84 ef       	ldi	r24, 0xF4	; 244
    2a00:	91 e0       	ldi	r25, 0x01	; 1
    2a02:	0e 94 f7 13 	call	0x27ee	; 0x27ee <delay_ms>

			LCD_voidGotoxy(1, 14);
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	6e e0       	ldi	r22, 0x0E	; 14
    2a0a:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_voidGotoxy>
			LCD_voidSendString("   ");
    2a0e:	82 e7       	ldi	r24, 0x72	; 114
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_voidSendString>
			LCD_voidGotoxy(1, 14);
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	6e e0       	ldi	r22, 0x0E	; 14
    2a1a:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_voidGotoxy>
			LCD_voidSendIntger(Local_u16TempValue);
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	9c 81       	ldd	r25, Y+4	; 0x04
    2a22:	cc 01       	movw	r24, r24
    2a24:	a0 e0       	ldi	r26, 0x00	; 0
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_voidSendIntger>

			ADC_u8GetDigitalValueSynchNonBlocking(ADC_u8_CHANNEL_0, &Local_u16ADCDigitalValue);
    2a30:	9e 01       	movw	r18, r28
    2a32:	2b 5f       	subi	r18, 0xFB	; 251
    2a34:	3f 4f       	sbci	r19, 0xFF	; 255
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	b9 01       	movw	r22, r18
    2a3a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <ADC_u8GetDigitalValueSynchNonBlocking>
			Local_u16TempValuemv = ((Local_u16ADCDigitalValue * 5000UL) / 1024);
    2a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a40:	9e 81       	ldd	r25, Y+6	; 0x06
    2a42:	cc 01       	movw	r24, r24
    2a44:	a0 e0       	ldi	r26, 0x00	; 0
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	28 e8       	ldi	r18, 0x88	; 136
    2a4a:	33 e1       	ldi	r19, 0x13	; 19
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	bc 01       	movw	r22, r24
    2a52:	cd 01       	movw	r24, r26
    2a54:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__mulsi3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	07 2e       	mov	r0, r23
    2a5e:	7a e0       	ldi	r23, 0x0A	; 10
    2a60:	b6 95       	lsr	r27
    2a62:	a7 95       	ror	r26
    2a64:	97 95       	ror	r25
    2a66:	87 95       	ror	r24
    2a68:	7a 95       	dec	r23
    2a6a:	d1 f7       	brne	.-12     	; 0x2a60 <main+0x142>
    2a6c:	70 2d       	mov	r23, r0
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	89 83       	std	Y+1, r24	; 0x01
			Local_u16TempValue = Local_u16TempValuemv / 10;
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	2a e0       	ldi	r18, 0x0A	; 10
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	b9 01       	movw	r22, r18
    2a7c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodhi4>
    2a80:	cb 01       	movw	r24, r22
    2a82:	9c 83       	std	Y+4, r25	; 0x04
    2a84:	8b 83       	std	Y+3, r24	; 0x03
		LCD_voidGotoxy(1, 14);
		LCD_voidSendString("   ");
		LCD_voidGotoxy(1, 14);
		LCD_voidSendIntger(Local_u16TempValue);

		while (Local_u16TempValue >= 60) {
    2a86:	8b 81       	ldd	r24, Y+3	; 0x03
    2a88:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8a:	8c 33       	cpi	r24, 0x3C	; 60
    2a8c:	91 05       	cpc	r25, r1
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <main+0x174>
    2a90:	9e cf       	rjmp	.-196    	; 0x29ce <main+0xb0>

			ADC_u8GetDigitalValueSynchNonBlocking(ADC_u8_CHANNEL_0, &Local_u16ADCDigitalValue);
			Local_u16TempValuemv = ((Local_u16ADCDigitalValue * 5000UL) / 1024);
			Local_u16TempValue = Local_u16TempValuemv / 10;
		}
		DIO_u8SetPinValue( DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_LOW);
    2a92:	82 e0       	ldi	r24, 0x02	; 2
    2a94:	60 e0       	ldi	r22, 0x00	; 0
    2a96:	40 e0       	ldi	r20, 0x00	; 0
    2a98:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>
		DIO_u8SetPinValue( DIO_u8_PORTC, DIO_u8_PIN1, DIO_u8_LOW);
    2a9c:	82 e0       	ldi	r24, 0x02	; 2
    2a9e:	61 e0       	ldi	r22, 0x01	; 1
    2aa0:	40 e0       	ldi	r20, 0x00	; 0
    2aa2:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>
		DIO_u8SetPinValue( DIO_u8_PORTC, DIO_u8_PIN2, DIO_u8_LOW);
    2aa6:	82 e0       	ldi	r24, 0x02	; 2
    2aa8:	62 e0       	ldi	r22, 0x02	; 2
    2aaa:	40 e0       	ldi	r20, 0x00	; 0
    2aac:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_u8SetPinValue>
    2ab0:	4d cf       	rjmp	.-358    	; 0x294c <main+0x2e>

00002ab2 <__mulsi3>:
    2ab2:	62 9f       	mul	r22, r18
    2ab4:	d0 01       	movw	r26, r0
    2ab6:	73 9f       	mul	r23, r19
    2ab8:	f0 01       	movw	r30, r0
    2aba:	82 9f       	mul	r24, r18
    2abc:	e0 0d       	add	r30, r0
    2abe:	f1 1d       	adc	r31, r1
    2ac0:	64 9f       	mul	r22, r20
    2ac2:	e0 0d       	add	r30, r0
    2ac4:	f1 1d       	adc	r31, r1
    2ac6:	92 9f       	mul	r25, r18
    2ac8:	f0 0d       	add	r31, r0
    2aca:	83 9f       	mul	r24, r19
    2acc:	f0 0d       	add	r31, r0
    2ace:	74 9f       	mul	r23, r20
    2ad0:	f0 0d       	add	r31, r0
    2ad2:	65 9f       	mul	r22, r21
    2ad4:	f0 0d       	add	r31, r0
    2ad6:	99 27       	eor	r25, r25
    2ad8:	72 9f       	mul	r23, r18
    2ada:	b0 0d       	add	r27, r0
    2adc:	e1 1d       	adc	r30, r1
    2ade:	f9 1f       	adc	r31, r25
    2ae0:	63 9f       	mul	r22, r19
    2ae2:	b0 0d       	add	r27, r0
    2ae4:	e1 1d       	adc	r30, r1
    2ae6:	f9 1f       	adc	r31, r25
    2ae8:	bd 01       	movw	r22, r26
    2aea:	cf 01       	movw	r24, r30
    2aec:	11 24       	eor	r1, r1
    2aee:	08 95       	ret

00002af0 <__udivmodhi4>:
    2af0:	aa 1b       	sub	r26, r26
    2af2:	bb 1b       	sub	r27, r27
    2af4:	51 e1       	ldi	r21, 0x11	; 17
    2af6:	07 c0       	rjmp	.+14     	; 0x2b06 <__udivmodhi4_ep>

00002af8 <__udivmodhi4_loop>:
    2af8:	aa 1f       	adc	r26, r26
    2afa:	bb 1f       	adc	r27, r27
    2afc:	a6 17       	cp	r26, r22
    2afe:	b7 07       	cpc	r27, r23
    2b00:	10 f0       	brcs	.+4      	; 0x2b06 <__udivmodhi4_ep>
    2b02:	a6 1b       	sub	r26, r22
    2b04:	b7 0b       	sbc	r27, r23

00002b06 <__udivmodhi4_ep>:
    2b06:	88 1f       	adc	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	5a 95       	dec	r21
    2b0c:	a9 f7       	brne	.-22     	; 0x2af8 <__udivmodhi4_loop>
    2b0e:	80 95       	com	r24
    2b10:	90 95       	com	r25
    2b12:	bc 01       	movw	r22, r24
    2b14:	cd 01       	movw	r24, r26
    2b16:	08 95       	ret

00002b18 <__prologue_saves__>:
    2b18:	2f 92       	push	r2
    2b1a:	3f 92       	push	r3
    2b1c:	4f 92       	push	r4
    2b1e:	5f 92       	push	r5
    2b20:	6f 92       	push	r6
    2b22:	7f 92       	push	r7
    2b24:	8f 92       	push	r8
    2b26:	9f 92       	push	r9
    2b28:	af 92       	push	r10
    2b2a:	bf 92       	push	r11
    2b2c:	cf 92       	push	r12
    2b2e:	df 92       	push	r13
    2b30:	ef 92       	push	r14
    2b32:	ff 92       	push	r15
    2b34:	0f 93       	push	r16
    2b36:	1f 93       	push	r17
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
    2b40:	ca 1b       	sub	r28, r26
    2b42:	db 0b       	sbc	r29, r27
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	f8 94       	cli
    2b48:	de bf       	out	0x3e, r29	; 62
    2b4a:	0f be       	out	0x3f, r0	; 63
    2b4c:	cd bf       	out	0x3d, r28	; 61
    2b4e:	09 94       	ijmp

00002b50 <__epilogue_restores__>:
    2b50:	2a 88       	ldd	r2, Y+18	; 0x12
    2b52:	39 88       	ldd	r3, Y+17	; 0x11
    2b54:	48 88       	ldd	r4, Y+16	; 0x10
    2b56:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b58:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b60:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b62:	b9 84       	ldd	r11, Y+9	; 0x09
    2b64:	c8 84       	ldd	r12, Y+8	; 0x08
    2b66:	df 80       	ldd	r13, Y+7	; 0x07
    2b68:	ee 80       	ldd	r14, Y+6	; 0x06
    2b6a:	fd 80       	ldd	r15, Y+5	; 0x05
    2b6c:	0c 81       	ldd	r16, Y+4	; 0x04
    2b6e:	1b 81       	ldd	r17, Y+3	; 0x03
    2b70:	aa 81       	ldd	r26, Y+2	; 0x02
    2b72:	b9 81       	ldd	r27, Y+1	; 0x01
    2b74:	ce 0f       	add	r28, r30
    2b76:	d1 1d       	adc	r29, r1
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	f8 94       	cli
    2b7c:	de bf       	out	0x3e, r29	; 62
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	cd bf       	out	0x3d, r28	; 61
    2b82:	ed 01       	movw	r28, r26
    2b84:	08 95       	ret

00002b86 <sprintf>:
    2b86:	ae e0       	ldi	r26, 0x0E	; 14
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	e9 ec       	ldi	r30, 0xC9	; 201
    2b8c:	f5 e1       	ldi	r31, 0x15	; 21
    2b8e:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__prologue_saves__+0x1c>
    2b92:	0d 89       	ldd	r16, Y+21	; 0x15
    2b94:	1e 89       	ldd	r17, Y+22	; 0x16
    2b96:	86 e0       	ldi	r24, 0x06	; 6
    2b98:	8c 83       	std	Y+4, r24	; 0x04
    2b9a:	1a 83       	std	Y+2, r17	; 0x02
    2b9c:	09 83       	std	Y+1, r16	; 0x01
    2b9e:	8f ef       	ldi	r24, 0xFF	; 255
    2ba0:	9f e7       	ldi	r25, 0x7F	; 127
    2ba2:	9e 83       	std	Y+6, r25	; 0x06
    2ba4:	8d 83       	std	Y+5, r24	; 0x05
    2ba6:	9e 01       	movw	r18, r28
    2ba8:	27 5e       	subi	r18, 0xE7	; 231
    2baa:	3f 4f       	sbci	r19, 0xFF	; 255
    2bac:	ce 01       	movw	r24, r28
    2bae:	01 96       	adiw	r24, 0x01	; 1
    2bb0:	6f 89       	ldd	r22, Y+23	; 0x17
    2bb2:	78 8d       	ldd	r23, Y+24	; 0x18
    2bb4:	a9 01       	movw	r20, r18
    2bb6:	0e 94 e7 15 	call	0x2bce	; 0x2bce <vfprintf>
    2bba:	2f 81       	ldd	r18, Y+7	; 0x07
    2bbc:	38 85       	ldd	r19, Y+8	; 0x08
    2bbe:	02 0f       	add	r16, r18
    2bc0:	13 1f       	adc	r17, r19
    2bc2:	f8 01       	movw	r30, r16
    2bc4:	10 82       	st	Z, r1
    2bc6:	2e 96       	adiw	r28, 0x0e	; 14
    2bc8:	e4 e0       	ldi	r30, 0x04	; 4
    2bca:	0c 94 b6 15 	jmp	0x2b6c	; 0x2b6c <__epilogue_restores__+0x1c>

00002bce <vfprintf>:
    2bce:	ab e0       	ldi	r26, 0x0B	; 11
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	ed ee       	ldi	r30, 0xED	; 237
    2bd4:	f5 e1       	ldi	r31, 0x15	; 21
    2bd6:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__prologue_saves__>
    2bda:	3c 01       	movw	r6, r24
    2bdc:	2b 01       	movw	r4, r22
    2bde:	5a 01       	movw	r10, r20
    2be0:	fc 01       	movw	r30, r24
    2be2:	17 82       	std	Z+7, r1	; 0x07
    2be4:	16 82       	std	Z+6, r1	; 0x06
    2be6:	83 81       	ldd	r24, Z+3	; 0x03
    2be8:	81 fd       	sbrc	r24, 1
    2bea:	03 c0       	rjmp	.+6      	; 0x2bf2 <vfprintf+0x24>
    2bec:	6f ef       	ldi	r22, 0xFF	; 255
    2bee:	7f ef       	ldi	r23, 0xFF	; 255
    2bf0:	c6 c1       	rjmp	.+908    	; 0x2f7e <vfprintf+0x3b0>
    2bf2:	9a e0       	ldi	r25, 0x0A	; 10
    2bf4:	89 2e       	mov	r8, r25
    2bf6:	1e 01       	movw	r2, r28
    2bf8:	08 94       	sec
    2bfa:	21 1c       	adc	r2, r1
    2bfc:	31 1c       	adc	r3, r1
    2bfe:	f3 01       	movw	r30, r6
    2c00:	23 81       	ldd	r18, Z+3	; 0x03
    2c02:	f2 01       	movw	r30, r4
    2c04:	23 fd       	sbrc	r18, 3
    2c06:	85 91       	lpm	r24, Z+
    2c08:	23 ff       	sbrs	r18, 3
    2c0a:	81 91       	ld	r24, Z+
    2c0c:	2f 01       	movw	r4, r30
    2c0e:	88 23       	and	r24, r24
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <vfprintf+0x46>
    2c12:	b2 c1       	rjmp	.+868    	; 0x2f78 <vfprintf+0x3aa>
    2c14:	85 32       	cpi	r24, 0x25	; 37
    2c16:	39 f4       	brne	.+14     	; 0x2c26 <vfprintf+0x58>
    2c18:	23 fd       	sbrc	r18, 3
    2c1a:	85 91       	lpm	r24, Z+
    2c1c:	23 ff       	sbrs	r18, 3
    2c1e:	81 91       	ld	r24, Z+
    2c20:	2f 01       	movw	r4, r30
    2c22:	85 32       	cpi	r24, 0x25	; 37
    2c24:	29 f4       	brne	.+10     	; 0x2c30 <vfprintf+0x62>
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	b3 01       	movw	r22, r6
    2c2a:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <fputc>
    2c2e:	e7 cf       	rjmp	.-50     	; 0x2bfe <vfprintf+0x30>
    2c30:	98 2f       	mov	r25, r24
    2c32:	ff 24       	eor	r15, r15
    2c34:	ee 24       	eor	r14, r14
    2c36:	99 24       	eor	r9, r9
    2c38:	ff e1       	ldi	r31, 0x1F	; 31
    2c3a:	ff 15       	cp	r31, r15
    2c3c:	d0 f0       	brcs	.+52     	; 0x2c72 <vfprintf+0xa4>
    2c3e:	9b 32       	cpi	r25, 0x2B	; 43
    2c40:	69 f0       	breq	.+26     	; 0x2c5c <vfprintf+0x8e>
    2c42:	9c 32       	cpi	r25, 0x2C	; 44
    2c44:	28 f4       	brcc	.+10     	; 0x2c50 <vfprintf+0x82>
    2c46:	90 32       	cpi	r25, 0x20	; 32
    2c48:	59 f0       	breq	.+22     	; 0x2c60 <vfprintf+0x92>
    2c4a:	93 32       	cpi	r25, 0x23	; 35
    2c4c:	91 f4       	brne	.+36     	; 0x2c72 <vfprintf+0xa4>
    2c4e:	0e c0       	rjmp	.+28     	; 0x2c6c <vfprintf+0x9e>
    2c50:	9d 32       	cpi	r25, 0x2D	; 45
    2c52:	49 f0       	breq	.+18     	; 0x2c66 <vfprintf+0x98>
    2c54:	90 33       	cpi	r25, 0x30	; 48
    2c56:	69 f4       	brne	.+26     	; 0x2c72 <vfprintf+0xa4>
    2c58:	41 e0       	ldi	r20, 0x01	; 1
    2c5a:	24 c0       	rjmp	.+72     	; 0x2ca4 <vfprintf+0xd6>
    2c5c:	52 e0       	ldi	r21, 0x02	; 2
    2c5e:	f5 2a       	or	r15, r21
    2c60:	84 e0       	ldi	r24, 0x04	; 4
    2c62:	f8 2a       	or	r15, r24
    2c64:	28 c0       	rjmp	.+80     	; 0x2cb6 <vfprintf+0xe8>
    2c66:	98 e0       	ldi	r25, 0x08	; 8
    2c68:	f9 2a       	or	r15, r25
    2c6a:	25 c0       	rjmp	.+74     	; 0x2cb6 <vfprintf+0xe8>
    2c6c:	e0 e1       	ldi	r30, 0x10	; 16
    2c6e:	fe 2a       	or	r15, r30
    2c70:	22 c0       	rjmp	.+68     	; 0x2cb6 <vfprintf+0xe8>
    2c72:	f7 fc       	sbrc	r15, 7
    2c74:	29 c0       	rjmp	.+82     	; 0x2cc8 <vfprintf+0xfa>
    2c76:	89 2f       	mov	r24, r25
    2c78:	80 53       	subi	r24, 0x30	; 48
    2c7a:	8a 30       	cpi	r24, 0x0A	; 10
    2c7c:	70 f4       	brcc	.+28     	; 0x2c9a <vfprintf+0xcc>
    2c7e:	f6 fe       	sbrs	r15, 6
    2c80:	05 c0       	rjmp	.+10     	; 0x2c8c <vfprintf+0xbe>
    2c82:	98 9c       	mul	r9, r8
    2c84:	90 2c       	mov	r9, r0
    2c86:	11 24       	eor	r1, r1
    2c88:	98 0e       	add	r9, r24
    2c8a:	15 c0       	rjmp	.+42     	; 0x2cb6 <vfprintf+0xe8>
    2c8c:	e8 9c       	mul	r14, r8
    2c8e:	e0 2c       	mov	r14, r0
    2c90:	11 24       	eor	r1, r1
    2c92:	e8 0e       	add	r14, r24
    2c94:	f0 e2       	ldi	r31, 0x20	; 32
    2c96:	ff 2a       	or	r15, r31
    2c98:	0e c0       	rjmp	.+28     	; 0x2cb6 <vfprintf+0xe8>
    2c9a:	9e 32       	cpi	r25, 0x2E	; 46
    2c9c:	29 f4       	brne	.+10     	; 0x2ca8 <vfprintf+0xda>
    2c9e:	f6 fc       	sbrc	r15, 6
    2ca0:	6b c1       	rjmp	.+726    	; 0x2f78 <vfprintf+0x3aa>
    2ca2:	40 e4       	ldi	r20, 0x40	; 64
    2ca4:	f4 2a       	or	r15, r20
    2ca6:	07 c0       	rjmp	.+14     	; 0x2cb6 <vfprintf+0xe8>
    2ca8:	9c 36       	cpi	r25, 0x6C	; 108
    2caa:	19 f4       	brne	.+6      	; 0x2cb2 <vfprintf+0xe4>
    2cac:	50 e8       	ldi	r21, 0x80	; 128
    2cae:	f5 2a       	or	r15, r21
    2cb0:	02 c0       	rjmp	.+4      	; 0x2cb6 <vfprintf+0xe8>
    2cb2:	98 36       	cpi	r25, 0x68	; 104
    2cb4:	49 f4       	brne	.+18     	; 0x2cc8 <vfprintf+0xfa>
    2cb6:	f2 01       	movw	r30, r4
    2cb8:	23 fd       	sbrc	r18, 3
    2cba:	95 91       	lpm	r25, Z+
    2cbc:	23 ff       	sbrs	r18, 3
    2cbe:	91 91       	ld	r25, Z+
    2cc0:	2f 01       	movw	r4, r30
    2cc2:	99 23       	and	r25, r25
    2cc4:	09 f0       	breq	.+2      	; 0x2cc8 <vfprintf+0xfa>
    2cc6:	b8 cf       	rjmp	.-144    	; 0x2c38 <vfprintf+0x6a>
    2cc8:	89 2f       	mov	r24, r25
    2cca:	85 54       	subi	r24, 0x45	; 69
    2ccc:	83 30       	cpi	r24, 0x03	; 3
    2cce:	18 f0       	brcs	.+6      	; 0x2cd6 <vfprintf+0x108>
    2cd0:	80 52       	subi	r24, 0x20	; 32
    2cd2:	83 30       	cpi	r24, 0x03	; 3
    2cd4:	38 f4       	brcc	.+14     	; 0x2ce4 <vfprintf+0x116>
    2cd6:	44 e0       	ldi	r20, 0x04	; 4
    2cd8:	50 e0       	ldi	r21, 0x00	; 0
    2cda:	a4 0e       	add	r10, r20
    2cdc:	b5 1e       	adc	r11, r21
    2cde:	5f e3       	ldi	r21, 0x3F	; 63
    2ce0:	59 83       	std	Y+1, r21	; 0x01
    2ce2:	0f c0       	rjmp	.+30     	; 0x2d02 <vfprintf+0x134>
    2ce4:	93 36       	cpi	r25, 0x63	; 99
    2ce6:	31 f0       	breq	.+12     	; 0x2cf4 <vfprintf+0x126>
    2ce8:	93 37       	cpi	r25, 0x73	; 115
    2cea:	79 f0       	breq	.+30     	; 0x2d0a <vfprintf+0x13c>
    2cec:	93 35       	cpi	r25, 0x53	; 83
    2cee:	09 f0       	breq	.+2      	; 0x2cf2 <vfprintf+0x124>
    2cf0:	56 c0       	rjmp	.+172    	; 0x2d9e <vfprintf+0x1d0>
    2cf2:	20 c0       	rjmp	.+64     	; 0x2d34 <vfprintf+0x166>
    2cf4:	f5 01       	movw	r30, r10
    2cf6:	80 81       	ld	r24, Z
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	42 e0       	ldi	r20, 0x02	; 2
    2cfc:	50 e0       	ldi	r21, 0x00	; 0
    2cfe:	a4 0e       	add	r10, r20
    2d00:	b5 1e       	adc	r11, r21
    2d02:	61 01       	movw	r12, r2
    2d04:	01 e0       	ldi	r16, 0x01	; 1
    2d06:	10 e0       	ldi	r17, 0x00	; 0
    2d08:	12 c0       	rjmp	.+36     	; 0x2d2e <vfprintf+0x160>
    2d0a:	f5 01       	movw	r30, r10
    2d0c:	c0 80       	ld	r12, Z
    2d0e:	d1 80       	ldd	r13, Z+1	; 0x01
    2d10:	f6 fc       	sbrc	r15, 6
    2d12:	03 c0       	rjmp	.+6      	; 0x2d1a <vfprintf+0x14c>
    2d14:	6f ef       	ldi	r22, 0xFF	; 255
    2d16:	7f ef       	ldi	r23, 0xFF	; 255
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <vfprintf+0x150>
    2d1a:	69 2d       	mov	r22, r9
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	42 e0       	ldi	r20, 0x02	; 2
    2d20:	50 e0       	ldi	r21, 0x00	; 0
    2d22:	a4 0e       	add	r10, r20
    2d24:	b5 1e       	adc	r11, r21
    2d26:	c6 01       	movw	r24, r12
    2d28:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <strnlen>
    2d2c:	8c 01       	movw	r16, r24
    2d2e:	5f e7       	ldi	r21, 0x7F	; 127
    2d30:	f5 22       	and	r15, r21
    2d32:	14 c0       	rjmp	.+40     	; 0x2d5c <vfprintf+0x18e>
    2d34:	f5 01       	movw	r30, r10
    2d36:	c0 80       	ld	r12, Z
    2d38:	d1 80       	ldd	r13, Z+1	; 0x01
    2d3a:	f6 fc       	sbrc	r15, 6
    2d3c:	03 c0       	rjmp	.+6      	; 0x2d44 <vfprintf+0x176>
    2d3e:	6f ef       	ldi	r22, 0xFF	; 255
    2d40:	7f ef       	ldi	r23, 0xFF	; 255
    2d42:	02 c0       	rjmp	.+4      	; 0x2d48 <vfprintf+0x17a>
    2d44:	69 2d       	mov	r22, r9
    2d46:	70 e0       	ldi	r23, 0x00	; 0
    2d48:	42 e0       	ldi	r20, 0x02	; 2
    2d4a:	50 e0       	ldi	r21, 0x00	; 0
    2d4c:	a4 0e       	add	r10, r20
    2d4e:	b5 1e       	adc	r11, r21
    2d50:	c6 01       	movw	r24, r12
    2d52:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <strnlen_P>
    2d56:	8c 01       	movw	r16, r24
    2d58:	50 e8       	ldi	r21, 0x80	; 128
    2d5a:	f5 2a       	or	r15, r21
    2d5c:	f3 fe       	sbrs	r15, 3
    2d5e:	07 c0       	rjmp	.+14     	; 0x2d6e <vfprintf+0x1a0>
    2d60:	1a c0       	rjmp	.+52     	; 0x2d96 <vfprintf+0x1c8>
    2d62:	80 e2       	ldi	r24, 0x20	; 32
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	b3 01       	movw	r22, r6
    2d68:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <fputc>
    2d6c:	ea 94       	dec	r14
    2d6e:	8e 2d       	mov	r24, r14
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	08 17       	cp	r16, r24
    2d74:	19 07       	cpc	r17, r25
    2d76:	a8 f3       	brcs	.-22     	; 0x2d62 <vfprintf+0x194>
    2d78:	0e c0       	rjmp	.+28     	; 0x2d96 <vfprintf+0x1c8>
    2d7a:	f6 01       	movw	r30, r12
    2d7c:	f7 fc       	sbrc	r15, 7
    2d7e:	85 91       	lpm	r24, Z+
    2d80:	f7 fe       	sbrs	r15, 7
    2d82:	81 91       	ld	r24, Z+
    2d84:	6f 01       	movw	r12, r30
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	b3 01       	movw	r22, r6
    2d8a:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <fputc>
    2d8e:	e1 10       	cpse	r14, r1
    2d90:	ea 94       	dec	r14
    2d92:	01 50       	subi	r16, 0x01	; 1
    2d94:	10 40       	sbci	r17, 0x00	; 0
    2d96:	01 15       	cp	r16, r1
    2d98:	11 05       	cpc	r17, r1
    2d9a:	79 f7       	brne	.-34     	; 0x2d7a <vfprintf+0x1ac>
    2d9c:	ea c0       	rjmp	.+468    	; 0x2f72 <vfprintf+0x3a4>
    2d9e:	94 36       	cpi	r25, 0x64	; 100
    2da0:	11 f0       	breq	.+4      	; 0x2da6 <vfprintf+0x1d8>
    2da2:	99 36       	cpi	r25, 0x69	; 105
    2da4:	69 f5       	brne	.+90     	; 0x2e00 <vfprintf+0x232>
    2da6:	f7 fe       	sbrs	r15, 7
    2da8:	08 c0       	rjmp	.+16     	; 0x2dba <vfprintf+0x1ec>
    2daa:	f5 01       	movw	r30, r10
    2dac:	20 81       	ld	r18, Z
    2dae:	31 81       	ldd	r19, Z+1	; 0x01
    2db0:	42 81       	ldd	r20, Z+2	; 0x02
    2db2:	53 81       	ldd	r21, Z+3	; 0x03
    2db4:	84 e0       	ldi	r24, 0x04	; 4
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	0a c0       	rjmp	.+20     	; 0x2dce <vfprintf+0x200>
    2dba:	f5 01       	movw	r30, r10
    2dbc:	80 81       	ld	r24, Z
    2dbe:	91 81       	ldd	r25, Z+1	; 0x01
    2dc0:	9c 01       	movw	r18, r24
    2dc2:	44 27       	eor	r20, r20
    2dc4:	37 fd       	sbrc	r19, 7
    2dc6:	40 95       	com	r20
    2dc8:	54 2f       	mov	r21, r20
    2dca:	82 e0       	ldi	r24, 0x02	; 2
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	a8 0e       	add	r10, r24
    2dd0:	b9 1e       	adc	r11, r25
    2dd2:	9f e6       	ldi	r25, 0x6F	; 111
    2dd4:	f9 22       	and	r15, r25
    2dd6:	57 ff       	sbrs	r21, 7
    2dd8:	09 c0       	rjmp	.+18     	; 0x2dec <vfprintf+0x21e>
    2dda:	50 95       	com	r21
    2ddc:	40 95       	com	r20
    2dde:	30 95       	com	r19
    2de0:	21 95       	neg	r18
    2de2:	3f 4f       	sbci	r19, 0xFF	; 255
    2de4:	4f 4f       	sbci	r20, 0xFF	; 255
    2de6:	5f 4f       	sbci	r21, 0xFF	; 255
    2de8:	e0 e8       	ldi	r30, 0x80	; 128
    2dea:	fe 2a       	or	r15, r30
    2dec:	ca 01       	movw	r24, r20
    2dee:	b9 01       	movw	r22, r18
    2df0:	a1 01       	movw	r20, r2
    2df2:	2a e0       	ldi	r18, 0x0A	; 10
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	0e 94 06 18 	call	0x300c	; 0x300c <__ultoa_invert>
    2dfa:	d8 2e       	mov	r13, r24
    2dfc:	d2 18       	sub	r13, r2
    2dfe:	40 c0       	rjmp	.+128    	; 0x2e80 <vfprintf+0x2b2>
    2e00:	95 37       	cpi	r25, 0x75	; 117
    2e02:	29 f4       	brne	.+10     	; 0x2e0e <vfprintf+0x240>
    2e04:	1f 2d       	mov	r17, r15
    2e06:	1f 7e       	andi	r17, 0xEF	; 239
    2e08:	2a e0       	ldi	r18, 0x0A	; 10
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	1d c0       	rjmp	.+58     	; 0x2e48 <vfprintf+0x27a>
    2e0e:	1f 2d       	mov	r17, r15
    2e10:	19 7f       	andi	r17, 0xF9	; 249
    2e12:	9f 36       	cpi	r25, 0x6F	; 111
    2e14:	61 f0       	breq	.+24     	; 0x2e2e <vfprintf+0x260>
    2e16:	90 37       	cpi	r25, 0x70	; 112
    2e18:	20 f4       	brcc	.+8      	; 0x2e22 <vfprintf+0x254>
    2e1a:	98 35       	cpi	r25, 0x58	; 88
    2e1c:	09 f0       	breq	.+2      	; 0x2e20 <vfprintf+0x252>
    2e1e:	ac c0       	rjmp	.+344    	; 0x2f78 <vfprintf+0x3aa>
    2e20:	0f c0       	rjmp	.+30     	; 0x2e40 <vfprintf+0x272>
    2e22:	90 37       	cpi	r25, 0x70	; 112
    2e24:	39 f0       	breq	.+14     	; 0x2e34 <vfprintf+0x266>
    2e26:	98 37       	cpi	r25, 0x78	; 120
    2e28:	09 f0       	breq	.+2      	; 0x2e2c <vfprintf+0x25e>
    2e2a:	a6 c0       	rjmp	.+332    	; 0x2f78 <vfprintf+0x3aa>
    2e2c:	04 c0       	rjmp	.+8      	; 0x2e36 <vfprintf+0x268>
    2e2e:	28 e0       	ldi	r18, 0x08	; 8
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	0a c0       	rjmp	.+20     	; 0x2e48 <vfprintf+0x27a>
    2e34:	10 61       	ori	r17, 0x10	; 16
    2e36:	14 fd       	sbrc	r17, 4
    2e38:	14 60       	ori	r17, 0x04	; 4
    2e3a:	20 e1       	ldi	r18, 0x10	; 16
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	04 c0       	rjmp	.+8      	; 0x2e48 <vfprintf+0x27a>
    2e40:	14 fd       	sbrc	r17, 4
    2e42:	16 60       	ori	r17, 0x06	; 6
    2e44:	20 e1       	ldi	r18, 0x10	; 16
    2e46:	32 e0       	ldi	r19, 0x02	; 2
    2e48:	17 ff       	sbrs	r17, 7
    2e4a:	08 c0       	rjmp	.+16     	; 0x2e5c <vfprintf+0x28e>
    2e4c:	f5 01       	movw	r30, r10
    2e4e:	60 81       	ld	r22, Z
    2e50:	71 81       	ldd	r23, Z+1	; 0x01
    2e52:	82 81       	ldd	r24, Z+2	; 0x02
    2e54:	93 81       	ldd	r25, Z+3	; 0x03
    2e56:	44 e0       	ldi	r20, 0x04	; 4
    2e58:	50 e0       	ldi	r21, 0x00	; 0
    2e5a:	08 c0       	rjmp	.+16     	; 0x2e6c <vfprintf+0x29e>
    2e5c:	f5 01       	movw	r30, r10
    2e5e:	80 81       	ld	r24, Z
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	bc 01       	movw	r22, r24
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	42 e0       	ldi	r20, 0x02	; 2
    2e6a:	50 e0       	ldi	r21, 0x00	; 0
    2e6c:	a4 0e       	add	r10, r20
    2e6e:	b5 1e       	adc	r11, r21
    2e70:	a1 01       	movw	r20, r2
    2e72:	0e 94 06 18 	call	0x300c	; 0x300c <__ultoa_invert>
    2e76:	d8 2e       	mov	r13, r24
    2e78:	d2 18       	sub	r13, r2
    2e7a:	8f e7       	ldi	r24, 0x7F	; 127
    2e7c:	f8 2e       	mov	r15, r24
    2e7e:	f1 22       	and	r15, r17
    2e80:	f6 fe       	sbrs	r15, 6
    2e82:	0b c0       	rjmp	.+22     	; 0x2e9a <vfprintf+0x2cc>
    2e84:	5e ef       	ldi	r21, 0xFE	; 254
    2e86:	f5 22       	and	r15, r21
    2e88:	d9 14       	cp	r13, r9
    2e8a:	38 f4       	brcc	.+14     	; 0x2e9a <vfprintf+0x2cc>
    2e8c:	f4 fe       	sbrs	r15, 4
    2e8e:	07 c0       	rjmp	.+14     	; 0x2e9e <vfprintf+0x2d0>
    2e90:	f2 fc       	sbrc	r15, 2
    2e92:	05 c0       	rjmp	.+10     	; 0x2e9e <vfprintf+0x2d0>
    2e94:	8f ee       	ldi	r24, 0xEF	; 239
    2e96:	f8 22       	and	r15, r24
    2e98:	02 c0       	rjmp	.+4      	; 0x2e9e <vfprintf+0x2d0>
    2e9a:	1d 2d       	mov	r17, r13
    2e9c:	01 c0       	rjmp	.+2      	; 0x2ea0 <vfprintf+0x2d2>
    2e9e:	19 2d       	mov	r17, r9
    2ea0:	f4 fe       	sbrs	r15, 4
    2ea2:	0d c0       	rjmp	.+26     	; 0x2ebe <vfprintf+0x2f0>
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	ed 0d       	add	r30, r13
    2ea8:	f1 1d       	adc	r31, r1
    2eaa:	80 81       	ld	r24, Z
    2eac:	80 33       	cpi	r24, 0x30	; 48
    2eae:	19 f4       	brne	.+6      	; 0x2eb6 <vfprintf+0x2e8>
    2eb0:	99 ee       	ldi	r25, 0xE9	; 233
    2eb2:	f9 22       	and	r15, r25
    2eb4:	08 c0       	rjmp	.+16     	; 0x2ec6 <vfprintf+0x2f8>
    2eb6:	1f 5f       	subi	r17, 0xFF	; 255
    2eb8:	f2 fe       	sbrs	r15, 2
    2eba:	05 c0       	rjmp	.+10     	; 0x2ec6 <vfprintf+0x2f8>
    2ebc:	03 c0       	rjmp	.+6      	; 0x2ec4 <vfprintf+0x2f6>
    2ebe:	8f 2d       	mov	r24, r15
    2ec0:	86 78       	andi	r24, 0x86	; 134
    2ec2:	09 f0       	breq	.+2      	; 0x2ec6 <vfprintf+0x2f8>
    2ec4:	1f 5f       	subi	r17, 0xFF	; 255
    2ec6:	0f 2d       	mov	r16, r15
    2ec8:	f3 fc       	sbrc	r15, 3
    2eca:	14 c0       	rjmp	.+40     	; 0x2ef4 <vfprintf+0x326>
    2ecc:	f0 fe       	sbrs	r15, 0
    2ece:	0f c0       	rjmp	.+30     	; 0x2eee <vfprintf+0x320>
    2ed0:	1e 15       	cp	r17, r14
    2ed2:	10 f0       	brcs	.+4      	; 0x2ed8 <vfprintf+0x30a>
    2ed4:	9d 2c       	mov	r9, r13
    2ed6:	0b c0       	rjmp	.+22     	; 0x2eee <vfprintf+0x320>
    2ed8:	9d 2c       	mov	r9, r13
    2eda:	9e 0c       	add	r9, r14
    2edc:	91 1a       	sub	r9, r17
    2ede:	1e 2d       	mov	r17, r14
    2ee0:	06 c0       	rjmp	.+12     	; 0x2eee <vfprintf+0x320>
    2ee2:	80 e2       	ldi	r24, 0x20	; 32
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	b3 01       	movw	r22, r6
    2ee8:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <fputc>
    2eec:	1f 5f       	subi	r17, 0xFF	; 255
    2eee:	1e 15       	cp	r17, r14
    2ef0:	c0 f3       	brcs	.-16     	; 0x2ee2 <vfprintf+0x314>
    2ef2:	04 c0       	rjmp	.+8      	; 0x2efc <vfprintf+0x32e>
    2ef4:	1e 15       	cp	r17, r14
    2ef6:	10 f4       	brcc	.+4      	; 0x2efc <vfprintf+0x32e>
    2ef8:	e1 1a       	sub	r14, r17
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <vfprintf+0x330>
    2efc:	ee 24       	eor	r14, r14
    2efe:	04 ff       	sbrs	r16, 4
    2f00:	0f c0       	rjmp	.+30     	; 0x2f20 <vfprintf+0x352>
    2f02:	80 e3       	ldi	r24, 0x30	; 48
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	b3 01       	movw	r22, r6
    2f08:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <fputc>
    2f0c:	02 ff       	sbrs	r16, 2
    2f0e:	1d c0       	rjmp	.+58     	; 0x2f4a <vfprintf+0x37c>
    2f10:	01 fd       	sbrc	r16, 1
    2f12:	03 c0       	rjmp	.+6      	; 0x2f1a <vfprintf+0x34c>
    2f14:	88 e7       	ldi	r24, 0x78	; 120
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	0e c0       	rjmp	.+28     	; 0x2f36 <vfprintf+0x368>
    2f1a:	88 e5       	ldi	r24, 0x58	; 88
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	0b c0       	rjmp	.+22     	; 0x2f36 <vfprintf+0x368>
    2f20:	80 2f       	mov	r24, r16
    2f22:	86 78       	andi	r24, 0x86	; 134
    2f24:	91 f0       	breq	.+36     	; 0x2f4a <vfprintf+0x37c>
    2f26:	01 ff       	sbrs	r16, 1
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <vfprintf+0x360>
    2f2a:	8b e2       	ldi	r24, 0x2B	; 43
    2f2c:	01 c0       	rjmp	.+2      	; 0x2f30 <vfprintf+0x362>
    2f2e:	80 e2       	ldi	r24, 0x20	; 32
    2f30:	f7 fc       	sbrc	r15, 7
    2f32:	8d e2       	ldi	r24, 0x2D	; 45
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	b3 01       	movw	r22, r6
    2f38:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <fputc>
    2f3c:	06 c0       	rjmp	.+12     	; 0x2f4a <vfprintf+0x37c>
    2f3e:	80 e3       	ldi	r24, 0x30	; 48
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	b3 01       	movw	r22, r6
    2f44:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <fputc>
    2f48:	9a 94       	dec	r9
    2f4a:	d9 14       	cp	r13, r9
    2f4c:	c0 f3       	brcs	.-16     	; 0x2f3e <vfprintf+0x370>
    2f4e:	da 94       	dec	r13
    2f50:	f1 01       	movw	r30, r2
    2f52:	ed 0d       	add	r30, r13
    2f54:	f1 1d       	adc	r31, r1
    2f56:	80 81       	ld	r24, Z
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	b3 01       	movw	r22, r6
    2f5c:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <fputc>
    2f60:	dd 20       	and	r13, r13
    2f62:	a9 f7       	brne	.-22     	; 0x2f4e <vfprintf+0x380>
    2f64:	06 c0       	rjmp	.+12     	; 0x2f72 <vfprintf+0x3a4>
    2f66:	80 e2       	ldi	r24, 0x20	; 32
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	b3 01       	movw	r22, r6
    2f6c:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <fputc>
    2f70:	ea 94       	dec	r14
    2f72:	ee 20       	and	r14, r14
    2f74:	c1 f7       	brne	.-16     	; 0x2f66 <vfprintf+0x398>
    2f76:	43 ce       	rjmp	.-890    	; 0x2bfe <vfprintf+0x30>
    2f78:	f3 01       	movw	r30, r6
    2f7a:	66 81       	ldd	r22, Z+6	; 0x06
    2f7c:	77 81       	ldd	r23, Z+7	; 0x07
    2f7e:	cb 01       	movw	r24, r22
    2f80:	2b 96       	adiw	r28, 0x0b	; 11
    2f82:	e2 e1       	ldi	r30, 0x12	; 18
    2f84:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__epilogue_restores__>

00002f88 <strnlen_P>:
    2f88:	fc 01       	movw	r30, r24
    2f8a:	05 90       	lpm	r0, Z+
    2f8c:	61 50       	subi	r22, 0x01	; 1
    2f8e:	70 40       	sbci	r23, 0x00	; 0
    2f90:	01 10       	cpse	r0, r1
    2f92:	d8 f7       	brcc	.-10     	; 0x2f8a <strnlen_P+0x2>
    2f94:	80 95       	com	r24
    2f96:	90 95       	com	r25
    2f98:	8e 0f       	add	r24, r30
    2f9a:	9f 1f       	adc	r25, r31
    2f9c:	08 95       	ret

00002f9e <strnlen>:
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	61 50       	subi	r22, 0x01	; 1
    2fa2:	70 40       	sbci	r23, 0x00	; 0
    2fa4:	01 90       	ld	r0, Z+
    2fa6:	01 10       	cpse	r0, r1
    2fa8:	d8 f7       	brcc	.-10     	; 0x2fa0 <strnlen+0x2>
    2faa:	80 95       	com	r24
    2fac:	90 95       	com	r25
    2fae:	8e 0f       	add	r24, r30
    2fb0:	9f 1f       	adc	r25, r31
    2fb2:	08 95       	ret

00002fb4 <fputc>:
    2fb4:	0f 93       	push	r16
    2fb6:	1f 93       	push	r17
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	8c 01       	movw	r16, r24
    2fbe:	eb 01       	movw	r28, r22
    2fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc2:	81 ff       	sbrs	r24, 1
    2fc4:	1b c0       	rjmp	.+54     	; 0x2ffc <fputc+0x48>
    2fc6:	82 ff       	sbrs	r24, 2
    2fc8:	0d c0       	rjmp	.+26     	; 0x2fe4 <fputc+0x30>
    2fca:	2e 81       	ldd	r18, Y+6	; 0x06
    2fcc:	3f 81       	ldd	r19, Y+7	; 0x07
    2fce:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fd2:	28 17       	cp	r18, r24
    2fd4:	39 07       	cpc	r19, r25
    2fd6:	64 f4       	brge	.+24     	; 0x2ff0 <fputc+0x3c>
    2fd8:	e8 81       	ld	r30, Y
    2fda:	f9 81       	ldd	r31, Y+1	; 0x01
    2fdc:	01 93       	st	Z+, r16
    2fde:	f9 83       	std	Y+1, r31	; 0x01
    2fe0:	e8 83       	st	Y, r30
    2fe2:	06 c0       	rjmp	.+12     	; 0x2ff0 <fputc+0x3c>
    2fe4:	e8 85       	ldd	r30, Y+8	; 0x08
    2fe6:	f9 85       	ldd	r31, Y+9	; 0x09
    2fe8:	80 2f       	mov	r24, r16
    2fea:	09 95       	icall
    2fec:	89 2b       	or	r24, r25
    2fee:	31 f4       	brne	.+12     	; 0x2ffc <fputc+0x48>
    2ff0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ff2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ff4:	01 96       	adiw	r24, 0x01	; 1
    2ff6:	9f 83       	std	Y+7, r25	; 0x07
    2ff8:	8e 83       	std	Y+6, r24	; 0x06
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <fputc+0x4c>
    2ffc:	0f ef       	ldi	r16, 0xFF	; 255
    2ffe:	1f ef       	ldi	r17, 0xFF	; 255
    3000:	c8 01       	movw	r24, r16
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	1f 91       	pop	r17
    3008:	0f 91       	pop	r16
    300a:	08 95       	ret

0000300c <__ultoa_invert>:
    300c:	fa 01       	movw	r30, r20
    300e:	aa 27       	eor	r26, r26
    3010:	28 30       	cpi	r18, 0x08	; 8
    3012:	51 f1       	breq	.+84     	; 0x3068 <__ultoa_invert+0x5c>
    3014:	20 31       	cpi	r18, 0x10	; 16
    3016:	81 f1       	breq	.+96     	; 0x3078 <__ultoa_invert+0x6c>
    3018:	e8 94       	clt
    301a:	6f 93       	push	r22
    301c:	6e 7f       	andi	r22, 0xFE	; 254
    301e:	6e 5f       	subi	r22, 0xFE	; 254
    3020:	7f 4f       	sbci	r23, 0xFF	; 255
    3022:	8f 4f       	sbci	r24, 0xFF	; 255
    3024:	9f 4f       	sbci	r25, 0xFF	; 255
    3026:	af 4f       	sbci	r26, 0xFF	; 255
    3028:	b1 e0       	ldi	r27, 0x01	; 1
    302a:	3e d0       	rcall	.+124    	; 0x30a8 <__ultoa_invert+0x9c>
    302c:	b4 e0       	ldi	r27, 0x04	; 4
    302e:	3c d0       	rcall	.+120    	; 0x30a8 <__ultoa_invert+0x9c>
    3030:	67 0f       	add	r22, r23
    3032:	78 1f       	adc	r23, r24
    3034:	89 1f       	adc	r24, r25
    3036:	9a 1f       	adc	r25, r26
    3038:	a1 1d       	adc	r26, r1
    303a:	68 0f       	add	r22, r24
    303c:	79 1f       	adc	r23, r25
    303e:	8a 1f       	adc	r24, r26
    3040:	91 1d       	adc	r25, r1
    3042:	a1 1d       	adc	r26, r1
    3044:	6a 0f       	add	r22, r26
    3046:	71 1d       	adc	r23, r1
    3048:	81 1d       	adc	r24, r1
    304a:	91 1d       	adc	r25, r1
    304c:	a1 1d       	adc	r26, r1
    304e:	20 d0       	rcall	.+64     	; 0x3090 <__ultoa_invert+0x84>
    3050:	09 f4       	brne	.+2      	; 0x3054 <__ultoa_invert+0x48>
    3052:	68 94       	set
    3054:	3f 91       	pop	r19
    3056:	2a e0       	ldi	r18, 0x0A	; 10
    3058:	26 9f       	mul	r18, r22
    305a:	11 24       	eor	r1, r1
    305c:	30 19       	sub	r19, r0
    305e:	30 5d       	subi	r19, 0xD0	; 208
    3060:	31 93       	st	Z+, r19
    3062:	de f6       	brtc	.-74     	; 0x301a <__ultoa_invert+0xe>
    3064:	cf 01       	movw	r24, r30
    3066:	08 95       	ret
    3068:	46 2f       	mov	r20, r22
    306a:	47 70       	andi	r20, 0x07	; 7
    306c:	40 5d       	subi	r20, 0xD0	; 208
    306e:	41 93       	st	Z+, r20
    3070:	b3 e0       	ldi	r27, 0x03	; 3
    3072:	0f d0       	rcall	.+30     	; 0x3092 <__ultoa_invert+0x86>
    3074:	c9 f7       	brne	.-14     	; 0x3068 <__ultoa_invert+0x5c>
    3076:	f6 cf       	rjmp	.-20     	; 0x3064 <__ultoa_invert+0x58>
    3078:	46 2f       	mov	r20, r22
    307a:	4f 70       	andi	r20, 0x0F	; 15
    307c:	40 5d       	subi	r20, 0xD0	; 208
    307e:	4a 33       	cpi	r20, 0x3A	; 58
    3080:	18 f0       	brcs	.+6      	; 0x3088 <__ultoa_invert+0x7c>
    3082:	49 5d       	subi	r20, 0xD9	; 217
    3084:	31 fd       	sbrc	r19, 1
    3086:	40 52       	subi	r20, 0x20	; 32
    3088:	41 93       	st	Z+, r20
    308a:	02 d0       	rcall	.+4      	; 0x3090 <__ultoa_invert+0x84>
    308c:	a9 f7       	brne	.-22     	; 0x3078 <__ultoa_invert+0x6c>
    308e:	ea cf       	rjmp	.-44     	; 0x3064 <__ultoa_invert+0x58>
    3090:	b4 e0       	ldi	r27, 0x04	; 4
    3092:	a6 95       	lsr	r26
    3094:	97 95       	ror	r25
    3096:	87 95       	ror	r24
    3098:	77 95       	ror	r23
    309a:	67 95       	ror	r22
    309c:	ba 95       	dec	r27
    309e:	c9 f7       	brne	.-14     	; 0x3092 <__ultoa_invert+0x86>
    30a0:	00 97       	sbiw	r24, 0x00	; 0
    30a2:	61 05       	cpc	r22, r1
    30a4:	71 05       	cpc	r23, r1
    30a6:	08 95       	ret
    30a8:	9b 01       	movw	r18, r22
    30aa:	ac 01       	movw	r20, r24
    30ac:	0a 2e       	mov	r0, r26
    30ae:	06 94       	lsr	r0
    30b0:	57 95       	ror	r21
    30b2:	47 95       	ror	r20
    30b4:	37 95       	ror	r19
    30b6:	27 95       	ror	r18
    30b8:	ba 95       	dec	r27
    30ba:	c9 f7       	brne	.-14     	; 0x30ae <__ultoa_invert+0xa2>
    30bc:	62 0f       	add	r22, r18
    30be:	73 1f       	adc	r23, r19
    30c0:	84 1f       	adc	r24, r20
    30c2:	95 1f       	adc	r25, r21
    30c4:	a0 1d       	adc	r26, r0
    30c6:	08 95       	ret

000030c8 <_exit>:
    30c8:	f8 94       	cli

000030ca <__stop_program>:
    30ca:	ff cf       	rjmp	.-2      	; 0x30ca <__stop_program>
