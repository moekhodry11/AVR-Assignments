
Keypad_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000360e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  0000360e  000036a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008001a8  008001a8  000037ea  2**0
                  ALLOC
  3 .stab         00002358  00000000  00000000  000037ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fff  00000000  00000000  00005b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00006b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00006d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00006f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  000097e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000ae0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000c1ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000c3ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000c6fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d151  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3a       	cpi	r26, 0xAB	; 171
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <main>
      8a:	0c 94 05 1b 	jmp	0x360a	; 0x360a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 18 	jmp	0x308a	; 0x308a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 18 	jmp	0x308a	; 0x308a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 18 	jmp	0x304a	; 0x304a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 45 18 	jmp	0x308a	; 0x308a <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 45 18 	jmp	0x308a	; 0x308a <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__gesf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__gesf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__gesf2+0x58>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 45 18 	jmp	0x308a	; 0x308a <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 45 18 	jmp	0x308a	; 0x308a <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 26 18 	jmp	0x304c	; 0x304c <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 42 18 	jmp	0x3084	; 0x3084 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 25 18 	jmp	0x304a	; 0x304a <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e8 57       	subi	r30, 0x78	; 120
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit         (void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
     f52:	ea e3       	ldi	r30, 0x3A	; 58
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	8f e0       	ldi	r24, 0x0F	; 15
     f58:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
     f5a:	e7 e3       	ldi	r30, 0x37	; 55
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	87 e0       	ldi	r24, 0x07	; 7
     f60:	80 83       	st	Z, r24
						   DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
     f62:	e4 e3       	ldi	r30, 0x34	; 52
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	10 82       	st	Z, r1
						   DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
     f68:	e1 e3       	ldi	r30, 0x31	; 49
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	8f ef       	ldi	r24, 0xFF	; 255
     f6e:	80 83       	st	Z, r24
						   DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);						   

	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
     f70:	eb e3       	ldi	r30, 0x3B	; 59
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);
											                    
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
     f78:	e8 e3       	ldi	r30, 0x38	; 56
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	10 82       	st	Z, r1
						   DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);
											 
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
     f7e:	e5 e3       	ldi	r30, 0x35	; 53
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	10 82       	st	Z, r1
						   DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);
											 
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
     f84:	e2 e3       	ldi	r30, 0x32	; 50
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	10 82       	st	Z, r1
						   DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <DIO_u8SetPinDirection>:

u8  DIO_u8SetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinDirection)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	2e 97       	sbiw	r28, 0x0e	; 14
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	8a 83       	std	Y+2, r24	; 0x02
     fa6:	6b 83       	std	Y+3, r22	; 0x03
     fa8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))		
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	84 30       	cpi	r24, 0x04	; 4
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <DIO_u8SetPinDirection+0x26>
     fb4:	0c c1       	rjmp	.+536    	; 0x11ce <DIO_u8SetPinDirection+0x23e>
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	88 30       	cpi	r24, 0x08	; 8
     fba:	08 f0       	brcs	.+2      	; 0xfbe <DIO_u8SetPinDirection+0x2e>
     fbc:	08 c1       	rjmp	.+528    	; 0x11ce <DIO_u8SetPinDirection+0x23e>
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	21 f0       	breq	.+8      	; 0xfcc <DIO_u8SetPinDirection+0x3c>
     fc4:	8c 81       	ldd	r24, Y+4	; 0x04
     fc6:	88 23       	and	r24, r24
     fc8:	09 f0       	breq	.+2      	; 0xfcc <DIO_u8SetPinDirection+0x3c>
     fca:	01 c1       	rjmp	.+514    	; 0x11ce <DIO_u8SetPinDirection+0x23e>
	{
		switch (Copy_u8PortId)
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	3e 87       	std	Y+14, r19	; 0x0e
     fd4:	2d 87       	std	Y+13, r18	; 0x0d
     fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	91 05       	cpc	r25, r1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <DIO_u8SetPinDirection+0x52>
     fe0:	4f c0       	rjmp	.+158    	; 0x1080 <DIO_u8SetPinDirection+0xf0>
     fe2:	2d 85       	ldd	r18, Y+13	; 0x0d
     fe4:	3e 85       	ldd	r19, Y+14	; 0x0e
     fe6:	22 30       	cpi	r18, 0x02	; 2
     fe8:	31 05       	cpc	r19, r1
     fea:	2c f4       	brge	.+10     	; 0xff6 <DIO_u8SetPinDirection+0x66>
     fec:	8d 85       	ldd	r24, Y+13	; 0x0d
     fee:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	71 f0       	breq	.+28     	; 0x1010 <DIO_u8SetPinDirection+0x80>
     ff4:	ed c0       	rjmp	.+474    	; 0x11d0 <DIO_u8SetPinDirection+0x240>
     ff6:	2d 85       	ldd	r18, Y+13	; 0x0d
     ff8:	3e 85       	ldd	r19, Y+14	; 0x0e
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <DIO_u8SetPinDirection+0x72>
    1000:	77 c0       	rjmp	.+238    	; 0x10f0 <DIO_u8SetPinDirection+0x160>
    1002:	8d 85       	ldd	r24, Y+13	; 0x0d
    1004:	9e 85       	ldd	r25, Y+14	; 0x0e
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <DIO_u8SetPinDirection+0x7e>
    100c:	a9 c0       	rjmp	.+338    	; 0x1160 <DIO_u8SetPinDirection+0x1d0>
    100e:	e0 c0       	rjmp	.+448    	; 0x11d0 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinDirection)
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	3c 87       	std	Y+12, r19	; 0x0c
    1018:	2b 87       	std	Y+11, r18	; 0x0b
    101a:	8b 85       	ldd	r24, Y+11	; 0x0b
    101c:	9c 85       	ldd	r25, Y+12	; 0x0c
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	d1 f0       	breq	.+52     	; 0x1056 <DIO_u8SetPinDirection+0xc6>
    1022:	2b 85       	ldd	r18, Y+11	; 0x0b
    1024:	3c 85       	ldd	r19, Y+12	; 0x0c
    1026:	21 30       	cpi	r18, 0x01	; 1
    1028:	31 05       	cpc	r19, r1
    102a:	09 f0       	breq	.+2      	; 0x102e <DIO_u8SetPinDirection+0x9e>
    102c:	d1 c0       	rjmp	.+418    	; 0x11d0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    102e:	aa e3       	ldi	r26, 0x3A	; 58
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ea e3       	ldi	r30, 0x3A	; 58
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_u8SetPinDirection+0xbc>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_u8SetPinDirection+0xb8>
    1050:	84 2b       	or	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	bd c0       	rjmp	.+378    	; 0x11d0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    1056:	aa e3       	ldi	r26, 0x3A	; 58
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	ea e3       	ldi	r30, 0x3A	; 58
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	48 2f       	mov	r20, r24
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_u8SetPinDirection+0xe4>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <DIO_u8SetPinDirection+0xe0>
    1078:	80 95       	com	r24
    107a:	84 23       	and	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	a8 c0       	rjmp	.+336    	; 0x11d0 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinDirection)
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	3a 87       	std	Y+10, r19	; 0x0a
    1088:	29 87       	std	Y+9, r18	; 0x09
    108a:	89 85       	ldd	r24, Y+9	; 0x09
    108c:	9a 85       	ldd	r25, Y+10	; 0x0a
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	d1 f0       	breq	.+52     	; 0x10c6 <DIO_u8SetPinDirection+0x136>
    1092:	29 85       	ldd	r18, Y+9	; 0x09
    1094:	3a 85       	ldd	r19, Y+10	; 0x0a
    1096:	21 30       	cpi	r18, 0x01	; 1
    1098:	31 05       	cpc	r19, r1
    109a:	09 f0       	breq	.+2      	; 0x109e <DIO_u8SetPinDirection+0x10e>
    109c:	99 c0       	rjmp	.+306    	; 0x11d0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    109e:	a7 e3       	ldi	r26, 0x37	; 55
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e7 e3       	ldi	r30, 0x37	; 55
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_u8SetPinDirection+0x12c>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_u8SetPinDirection+0x128>
    10c0:	84 2b       	or	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	85 c0       	rjmp	.+266    	; 0x11d0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    10c6:	a7 e3       	ldi	r26, 0x37	; 55
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e7 e3       	ldi	r30, 0x37	; 55
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_u8SetPinDirection+0x154>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_u8SetPinDirection+0x150>
    10e8:	80 95       	com	r24
    10ea:	84 23       	and	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	70 c0       	rjmp	.+224    	; 0x11d0 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinDirection)
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	38 87       	std	Y+8, r19	; 0x08
    10f8:	2f 83       	std	Y+7, r18	; 0x07
    10fa:	8f 81       	ldd	r24, Y+7	; 0x07
    10fc:	98 85       	ldd	r25, Y+8	; 0x08
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	d1 f0       	breq	.+52     	; 0x1136 <DIO_u8SetPinDirection+0x1a6>
    1102:	2f 81       	ldd	r18, Y+7	; 0x07
    1104:	38 85       	ldd	r19, Y+8	; 0x08
    1106:	21 30       	cpi	r18, 0x01	; 1
    1108:	31 05       	cpc	r19, r1
    110a:	09 f0       	breq	.+2      	; 0x110e <DIO_u8SetPinDirection+0x17e>
    110c:	61 c0       	rjmp	.+194    	; 0x11d0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    110e:	a4 e3       	ldi	r26, 0x34	; 52
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e4 e3       	ldi	r30, 0x34	; 52
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_u8SetPinDirection+0x19c>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_u8SetPinDirection+0x198>
    1130:	84 2b       	or	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	4d c0       	rjmp	.+154    	; 0x11d0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    1136:	a4 e3       	ldi	r26, 0x34	; 52
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e4 e3       	ldi	r30, 0x34	; 52
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_u8SetPinDirection+0x1c4>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_u8SetPinDirection+0x1c0>
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	38 c0       	rjmp	.+112    	; 0x11d0 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinDirection)
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3e 83       	std	Y+6, r19	; 0x06
    1168:	2d 83       	std	Y+5, r18	; 0x05
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	c9 f0       	breq	.+50     	; 0x11a4 <DIO_u8SetPinDirection+0x214>
    1172:	2d 81       	ldd	r18, Y+5	; 0x05
    1174:	3e 81       	ldd	r19, Y+6	; 0x06
    1176:	21 30       	cpi	r18, 0x01	; 1
    1178:	31 05       	cpc	r19, r1
    117a:	51 f5       	brne	.+84     	; 0x11d0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    117c:	a1 e3       	ldi	r26, 0x31	; 49
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e1 e3       	ldi	r30, 0x31	; 49
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_u8SetPinDirection+0x20a>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_u8SetPinDirection+0x206>
    119e:	84 2b       	or	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	16 c0       	rjmp	.+44     	; 0x11d0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    11a4:	a1 e3       	ldi	r26, 0x31	; 49
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e1 e3       	ldi	r30, 0x31	; 49
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_u8SetPinDirection+0x232>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_u8SetPinDirection+0x22e>
    11c6:	80 95       	com	r24
    11c8:	84 23       	and	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <DIO_u8SetPinDirection+0x240>
			break;			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    11ce:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d2:	2e 96       	adiw	r28, 0x0e	; 14
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <DIO_u8SetPinValue>:

u8  DIO_u8SetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinValue)
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	2e 97       	sbiw	r28, 0x0e	; 14
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	8a 83       	std	Y+2, r24	; 0x02
    11fa:	6b 83       	std	Y+3, r22	; 0x03
    11fc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 30       	cpi	r24, 0x08	; 8
    1206:	08 f0       	brcs	.+2      	; 0x120a <DIO_u8SetPinValue+0x26>
    1208:	08 c1       	rjmp	.+528    	; 0x141a <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3e 87       	std	Y+14, r19	; 0x0e
    1212:	2d 87       	std	Y+13, r18	; 0x0d
    1214:	8d 85       	ldd	r24, Y+13	; 0x0d
    1216:	9e 85       	ldd	r25, Y+14	; 0x0e
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	91 05       	cpc	r25, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <DIO_u8SetPinValue+0x3c>
    121e:	50 c0       	rjmp	.+160    	; 0x12c0 <DIO_u8SetPinValue+0xdc>
    1220:	2d 85       	ldd	r18, Y+13	; 0x0d
    1222:	3e 85       	ldd	r19, Y+14	; 0x0e
    1224:	22 30       	cpi	r18, 0x02	; 2
    1226:	31 05       	cpc	r19, r1
    1228:	2c f4       	brge	.+10     	; 0x1234 <DIO_u8SetPinValue+0x50>
    122a:	8d 85       	ldd	r24, Y+13	; 0x0d
    122c:	9e 85       	ldd	r25, Y+14	; 0x0e
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	71 f0       	breq	.+28     	; 0x124e <DIO_u8SetPinValue+0x6a>
    1232:	f1 c0       	rjmp	.+482    	; 0x1416 <DIO_u8SetPinValue+0x232>
    1234:	2d 85       	ldd	r18, Y+13	; 0x0d
    1236:	3e 85       	ldd	r19, Y+14	; 0x0e
    1238:	22 30       	cpi	r18, 0x02	; 2
    123a:	31 05       	cpc	r19, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <DIO_u8SetPinValue+0x5c>
    123e:	79 c0       	rjmp	.+242    	; 0x1332 <DIO_u8SetPinValue+0x14e>
    1240:	8d 85       	ldd	r24, Y+13	; 0x0d
    1242:	9e 85       	ldd	r25, Y+14	; 0x0e
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	09 f4       	brne	.+2      	; 0x124c <DIO_u8SetPinValue+0x68>
    124a:	ac c0       	rjmp	.+344    	; 0x13a4 <DIO_u8SetPinValue+0x1c0>
    124c:	e4 c0       	rjmp	.+456    	; 0x1416 <DIO_u8SetPinValue+0x232>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinValue)
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3c 87       	std	Y+12, r19	; 0x0c
    1256:	2b 87       	std	Y+11, r18	; 0x0b
    1258:	8b 85       	ldd	r24, Y+11	; 0x0b
    125a:	9c 85       	ldd	r25, Y+12	; 0x0c
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	c9 f0       	breq	.+50     	; 0x1292 <DIO_u8SetPinValue+0xae>
    1260:	2b 85       	ldd	r18, Y+11	; 0x0b
    1262:	3c 85       	ldd	r19, Y+12	; 0x0c
    1264:	21 30       	cpi	r18, 0x01	; 1
    1266:	31 05       	cpc	r19, r1
    1268:	49 f5       	brne	.+82     	; 0x12bc <DIO_u8SetPinValue+0xd8>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    126a:	ab e3       	ldi	r26, 0x3B	; 59
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	eb e3       	ldi	r30, 0x3B	; 59
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_u8SetPinValue+0xa4>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_u8SetPinValue+0xa0>
    128c:	84 2b       	or	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	c5 c0       	rjmp	.+394    	; 0x141c <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    1292:	ab e3       	ldi	r26, 0x3B	; 59
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	eb e3       	ldi	r30, 0x3B	; 59
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_u8SetPinValue+0xcc>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_u8SetPinValue+0xc8>
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	8c 93       	st	X, r24
    12ba:	b0 c0       	rjmp	.+352    	; 0x141c <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    12bc:	19 82       	std	Y+1, r1	; 0x01
    12be:	ae c0       	rjmp	.+348    	; 0x141c <DIO_u8SetPinValue+0x238>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinValue)
    12c0:	8c 81       	ldd	r24, Y+4	; 0x04
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	3a 87       	std	Y+10, r19	; 0x0a
    12c8:	29 87       	std	Y+9, r18	; 0x09
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	c9 f0       	breq	.+50     	; 0x1304 <DIO_u8SetPinValue+0x120>
    12d2:	29 85       	ldd	r18, Y+9	; 0x09
    12d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    12d6:	21 30       	cpi	r18, 0x01	; 1
    12d8:	31 05       	cpc	r19, r1
    12da:	49 f5       	brne	.+82     	; 0x132e <DIO_u8SetPinValue+0x14a>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    12dc:	a8 e3       	ldi	r26, 0x38	; 56
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e8 e3       	ldi	r30, 0x38	; 56
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_u8SetPinValue+0x116>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_u8SetPinValue+0x112>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	8c c0       	rjmp	.+280    	; 0x141c <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1304:	a8 e3       	ldi	r26, 0x38	; 56
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e8 e3       	ldi	r30, 0x38	; 56
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_u8SetPinValue+0x13e>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_u8SetPinValue+0x13a>
    1326:	80 95       	com	r24
    1328:	84 23       	and	r24, r20
    132a:	8c 93       	st	X, r24
    132c:	77 c0       	rjmp	.+238    	; 0x141c <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    132e:	19 82       	std	Y+1, r1	; 0x01
    1330:	75 c0       	rjmp	.+234    	; 0x141c <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinValue)
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	38 87       	std	Y+8, r19	; 0x08
    133a:	2f 83       	std	Y+7, r18	; 0x07
    133c:	8f 81       	ldd	r24, Y+7	; 0x07
    133e:	98 85       	ldd	r25, Y+8	; 0x08
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	c9 f0       	breq	.+50     	; 0x1376 <DIO_u8SetPinValue+0x192>
    1344:	2f 81       	ldd	r18, Y+7	; 0x07
    1346:	38 85       	ldd	r19, Y+8	; 0x08
    1348:	21 30       	cpi	r18, 0x01	; 1
    134a:	31 05       	cpc	r19, r1
    134c:	49 f5       	brne	.+82     	; 0x13a0 <DIO_u8SetPinValue+0x1bc>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    134e:	a5 e3       	ldi	r26, 0x35	; 53
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e5 e3       	ldi	r30, 0x35	; 53
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_u8SetPinValue+0x188>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_u8SetPinValue+0x184>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	53 c0       	rjmp	.+166    	; 0x141c <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1376:	a5 e3       	ldi	r26, 0x35	; 53
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e5 e3       	ldi	r30, 0x35	; 53
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_u8SetPinValue+0x1b0>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_u8SetPinValue+0x1ac>
    1398:	80 95       	com	r24
    139a:	84 23       	and	r24, r20
    139c:	8c 93       	st	X, r24
    139e:	3e c0       	rjmp	.+124    	; 0x141c <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    13a0:	19 82       	std	Y+1, r1	; 0x01
    13a2:	3c c0       	rjmp	.+120    	; 0x141c <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinValue)
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	3e 83       	std	Y+6, r19	; 0x06
    13ac:	2d 83       	std	Y+5, r18	; 0x05
    13ae:	8d 81       	ldd	r24, Y+5	; 0x05
    13b0:	9e 81       	ldd	r25, Y+6	; 0x06
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	c9 f0       	breq	.+50     	; 0x13e8 <DIO_u8SetPinValue+0x204>
    13b6:	2d 81       	ldd	r18, Y+5	; 0x05
    13b8:	3e 81       	ldd	r19, Y+6	; 0x06
    13ba:	21 30       	cpi	r18, 0x01	; 1
    13bc:	31 05       	cpc	r19, r1
    13be:	49 f5       	brne	.+82     	; 0x1412 <DIO_u8SetPinValue+0x22e>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    13c0:	a2 e3       	ldi	r26, 0x32	; 50
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e2 e3       	ldi	r30, 0x32	; 50
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_u8SetPinValue+0x1fa>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_u8SetPinValue+0x1f6>
    13e2:	84 2b       	or	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	1a c0       	rjmp	.+52     	; 0x141c <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    13e8:	a2 e3       	ldi	r26, 0x32	; 50
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e2 e3       	ldi	r30, 0x32	; 50
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_u8SetPinValue+0x222>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_u8SetPinValue+0x21e>
    140a:	80 95       	com	r24
    140c:	84 23       	and	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	05 c0       	rjmp	.+10     	; 0x141c <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    1412:	19 82       	std	Y+1, r1	; 0x01
    1414:	03 c0       	rjmp	.+6      	; 0x141c <DIO_u8SetPinValue+0x238>
				}		
			break;
			default :
				Local_u8ErrorState = STD_TYPES_NOK;
    1416:	19 82       	std	Y+1, r1	; 0x01
    1418:	01 c0       	rjmp	.+2      	; 0x141c <DIO_u8SetPinValue+0x238>
		}
			
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    141a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    141c:	89 81       	ldd	r24, Y+1	; 0x01
}
    141e:	2e 96       	adiw	r28, 0x0e	; 14
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <DIO_u8GetPinValue>:

u8  DIO_u8GetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 * Copy_pu8ReturnedPinValue)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	28 97       	sbiw	r28, 0x08	; 8
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	8b 83       	std	Y+3, r24	; 0x03
    1446:	6c 83       	std	Y+4, r22	; 0x04
    1448:	5e 83       	std	Y+6, r21	; 0x06
    144a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	84 30       	cpi	r24, 0x04	; 4
    1454:	08 f0       	brcs	.+2      	; 0x1458 <DIO_u8GetPinValue+0x28>
    1456:	9f c0       	rjmp	.+318    	; 0x1596 <DIO_u8GetPinValue+0x166>
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	88 30       	cpi	r24, 0x08	; 8
    145c:	08 f0       	brcs	.+2      	; 0x1460 <DIO_u8GetPinValue+0x30>
    145e:	9b c0       	rjmp	.+310    	; 0x1596 <DIO_u8GetPinValue+0x166>
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	9e 81       	ldd	r25, Y+6	; 0x06
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	09 f4       	brne	.+2      	; 0x146a <DIO_u8GetPinValue+0x3a>
    1468:	96 c0       	rjmp	.+300    	; 0x1596 <DIO_u8GetPinValue+0x166>
	{
		switch (Copy_u8PortId)
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	38 87       	std	Y+8, r19	; 0x08
    1472:	2f 83       	std	Y+7, r18	; 0x07
    1474:	4f 81       	ldd	r20, Y+7	; 0x07
    1476:	58 85       	ldd	r21, Y+8	; 0x08
    1478:	41 30       	cpi	r20, 0x01	; 1
    147a:	51 05       	cpc	r21, r1
    147c:	a9 f1       	breq	.+106    	; 0x14e8 <DIO_u8GetPinValue+0xb8>
    147e:	8f 81       	ldd	r24, Y+7	; 0x07
    1480:	98 85       	ldd	r25, Y+8	; 0x08
    1482:	82 30       	cpi	r24, 0x02	; 2
    1484:	91 05       	cpc	r25, r1
    1486:	34 f4       	brge	.+12     	; 0x1494 <DIO_u8GetPinValue+0x64>
    1488:	2f 81       	ldd	r18, Y+7	; 0x07
    148a:	38 85       	ldd	r19, Y+8	; 0x08
    148c:	21 15       	cp	r18, r1
    148e:	31 05       	cpc	r19, r1
    1490:	71 f0       	breq	.+28     	; 0x14ae <DIO_u8GetPinValue+0x7e>
    1492:	82 c0       	rjmp	.+260    	; 0x1598 <DIO_u8GetPinValue+0x168>
    1494:	4f 81       	ldd	r20, Y+7	; 0x07
    1496:	58 85       	ldd	r21, Y+8	; 0x08
    1498:	42 30       	cpi	r20, 0x02	; 2
    149a:	51 05       	cpc	r21, r1
    149c:	09 f4       	brne	.+2      	; 0x14a0 <DIO_u8GetPinValue+0x70>
    149e:	41 c0       	rjmp	.+130    	; 0x1522 <DIO_u8GetPinValue+0xf2>
    14a0:	8f 81       	ldd	r24, Y+7	; 0x07
    14a2:	98 85       	ldd	r25, Y+8	; 0x08
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <DIO_u8GetPinValue+0x7c>
    14aa:	58 c0       	rjmp	.+176    	; 0x155c <DIO_u8GetPinValue+0x12c>
    14ac:	75 c0       	rjmp	.+234    	; 0x1598 <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA:
				Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    14ae:	e9 e3       	ldi	r30, 0x39	; 57
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a9 01       	movw	r20, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_u8GetPinValue+0x96>
    14c2:	55 95       	asr	r21
    14c4:	47 95       	ror	r20
    14c6:	8a 95       	dec	r24
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_u8GetPinValue+0x92>
    14ca:	ca 01       	movw	r24, r20
    14cc:	81 70       	andi	r24, 0x01	; 1
    14ce:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	88 23       	and	r24, r24
    14d4:	21 f4       	brne	.+8      	; 0x14de <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    14d6:	ed 81       	ldd	r30, Y+5	; 0x05
    14d8:	fe 81       	ldd	r31, Y+6	; 0x06
    14da:	10 82       	st	Z, r1
    14dc:	5d c0       	rjmp	.+186    	; 0x1598 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    14de:	ed 81       	ldd	r30, Y+5	; 0x05
    14e0:	fe 81       	ldd	r31, Y+6	; 0x06
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	80 83       	st	Z, r24
    14e6:	58 c0       	rjmp	.+176    	; 0x1598 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTB:
				Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    14e8:	e6 e3       	ldi	r30, 0x36	; 54
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	8c 81       	ldd	r24, Y+4	; 0x04
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a9 01       	movw	r20, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <DIO_u8GetPinValue+0xd0>
    14fc:	55 95       	asr	r21
    14fe:	47 95       	ror	r20
    1500:	8a 95       	dec	r24
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <DIO_u8GetPinValue+0xcc>
    1504:	ca 01       	movw	r24, r20
    1506:	81 70       	andi	r24, 0x01	; 1
    1508:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	88 23       	and	r24, r24
    150e:	21 f4       	brne	.+8      	; 0x1518 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1510:	ed 81       	ldd	r30, Y+5	; 0x05
    1512:	fe 81       	ldd	r31, Y+6	; 0x06
    1514:	10 82       	st	Z, r1
    1516:	40 c0       	rjmp	.+128    	; 0x1598 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1518:	ed 81       	ldd	r30, Y+5	; 0x05
    151a:	fe 81       	ldd	r31, Y+6	; 0x06
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	80 83       	st	Z, r24
    1520:	3b c0       	rjmp	.+118    	; 0x1598 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTC:
				Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1522:	e3 e3       	ldi	r30, 0x33	; 51
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	88 2f       	mov	r24, r24
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a9 01       	movw	r20, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_u8GetPinValue+0x10a>
    1536:	55 95       	asr	r21
    1538:	47 95       	ror	r20
    153a:	8a 95       	dec	r24
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_u8GetPinValue+0x106>
    153e:	ca 01       	movw	r24, r20
    1540:	81 70       	andi	r24, 0x01	; 1
    1542:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	88 23       	and	r24, r24
    1548:	21 f4       	brne	.+8      	; 0x1552 <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    154a:	ed 81       	ldd	r30, Y+5	; 0x05
    154c:	fe 81       	ldd	r31, Y+6	; 0x06
    154e:	10 82       	st	Z, r1
    1550:	23 c0       	rjmp	.+70     	; 0x1598 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1552:	ed 81       	ldd	r30, Y+5	; 0x05
    1554:	fe 81       	ldd	r31, Y+6	; 0x06
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	80 83       	st	Z, r24
    155a:	1e c0       	rjmp	.+60     	; 0x1598 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTD:
				Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    155c:	e0 e3       	ldi	r30, 0x30	; 48
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	88 2f       	mov	r24, r24
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	a9 01       	movw	r20, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <DIO_u8GetPinValue+0x144>
    1570:	55 95       	asr	r21
    1572:	47 95       	ror	r20
    1574:	8a 95       	dec	r24
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <DIO_u8GetPinValue+0x140>
    1578:	ca 01       	movw	r24, r20
    157a:	81 70       	andi	r24, 0x01	; 1
    157c:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	88 23       	and	r24, r24
    1582:	21 f4       	brne	.+8      	; 0x158c <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1584:	ed 81       	ldd	r30, Y+5	; 0x05
    1586:	fe 81       	ldd	r31, Y+6	; 0x06
    1588:	10 82       	st	Z, r1
    158a:	06 c0       	rjmp	.+12     	; 0x1598 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    158c:	ed 81       	ldd	r30, Y+5	; 0x05
    158e:	fe 81       	ldd	r31, Y+6	; 0x06
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	80 83       	st	Z, r24
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <DIO_u8GetPinValue+0x168>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1596:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
}
    159a:	28 96       	adiw	r28, 0x08	; 8
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <DIO_u8SetPortDirection>:

u8  DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	2d 97       	sbiw	r28, 0x0d	; 13
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	8a 83       	std	Y+2, r24	; 0x02
    15c2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	21 f0       	breq	.+8      	; 0x15d6 <DIO_u8SetPortDirection+0x2a>
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	88 23       	and	r24, r24
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <DIO_u8SetPortDirection+0x2a>
    15d4:	7f c0       	rjmp	.+254    	; 0x16d4 <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	3d 87       	std	Y+13, r19	; 0x0d
    15de:	2c 87       	std	Y+12, r18	; 0x0c
    15e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	91 05       	cpc	r25, r1
    15e8:	71 f1       	breq	.+92     	; 0x1646 <DIO_u8SetPortDirection+0x9a>
    15ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    15ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	2c f4       	brge	.+10     	; 0x15fe <DIO_u8SetPortDirection+0x52>
    15f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	69 f0       	breq	.+26     	; 0x1616 <DIO_u8SetPortDirection+0x6a>
    15fc:	69 c0       	rjmp	.+210    	; 0x16d0 <DIO_u8SetPortDirection+0x124>
    15fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1600:	3d 85       	ldd	r19, Y+13	; 0x0d
    1602:	22 30       	cpi	r18, 0x02	; 2
    1604:	31 05       	cpc	r19, r1
    1606:	b1 f1       	breq	.+108    	; 0x1674 <DIO_u8SetPortDirection+0xc8>
    1608:	8c 85       	ldd	r24, Y+12	; 0x0c
    160a:	9d 85       	ldd	r25, Y+13	; 0x0d
    160c:	83 30       	cpi	r24, 0x03	; 3
    160e:	91 05       	cpc	r25, r1
    1610:	09 f4       	brne	.+2      	; 0x1614 <DIO_u8SetPortDirection+0x68>
    1612:	47 c0       	rjmp	.+142    	; 0x16a2 <DIO_u8SetPortDirection+0xf6>
    1614:	5d c0       	rjmp	.+186    	; 0x16d0 <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PortDirection)
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	3b 87       	std	Y+11, r19	; 0x0b
    161e:	2a 87       	std	Y+10, r18	; 0x0a
    1620:	8a 85       	ldd	r24, Y+10	; 0x0a
    1622:	9b 85       	ldd	r25, Y+11	; 0x0b
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	59 f0       	breq	.+22     	; 0x163e <DIO_u8SetPortDirection+0x92>
    1628:	2a 85       	ldd	r18, Y+10	; 0x0a
    162a:	3b 85       	ldd	r19, Y+11	; 0x0b
    162c:	21 30       	cpi	r18, 0x01	; 1
    162e:	31 05       	cpc	r19, r1
    1630:	09 f0       	breq	.+2      	; 0x1634 <DIO_u8SetPortDirection+0x88>
    1632:	51 c0       	rjmp	.+162    	; 0x16d6 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xff;break;
    1634:	ea e3       	ldi	r30, 0x3A	; 58
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	8f ef       	ldi	r24, 0xFF	; 255
    163a:	80 83       	st	Z, r24
    163c:	4c c0       	rjmp	.+152    	; 0x16d6 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break;
    163e:	ea e3       	ldi	r30, 0x3A	; 58
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	10 82       	st	Z, r1
    1644:	48 c0       	rjmp	.+144    	; 0x16d6 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PortDirection)
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	39 87       	std	Y+9, r19	; 0x09
    164e:	28 87       	std	Y+8, r18	; 0x08
    1650:	88 85       	ldd	r24, Y+8	; 0x08
    1652:	99 85       	ldd	r25, Y+9	; 0x09
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	51 f0       	breq	.+20     	; 0x166c <DIO_u8SetPortDirection+0xc0>
    1658:	28 85       	ldd	r18, Y+8	; 0x08
    165a:	39 85       	ldd	r19, Y+9	; 0x09
    165c:	21 30       	cpi	r18, 0x01	; 1
    165e:	31 05       	cpc	r19, r1
    1660:	d1 f5       	brne	.+116    	; 0x16d6 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xff;break;
    1662:	e7 e3       	ldi	r30, 0x37	; 55
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	8f ef       	ldi	r24, 0xFF	; 255
    1668:	80 83       	st	Z, r24
    166a:	35 c0       	rjmp	.+106    	; 0x16d6 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break;
    166c:	e7 e3       	ldi	r30, 0x37	; 55
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	10 82       	st	Z, r1
    1672:	31 c0       	rjmp	.+98     	; 0x16d6 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PortDirection)
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	3f 83       	std	Y+7, r19	; 0x07
    167c:	2e 83       	std	Y+6, r18	; 0x06
    167e:	8e 81       	ldd	r24, Y+6	; 0x06
    1680:	9f 81       	ldd	r25, Y+7	; 0x07
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	51 f0       	breq	.+20     	; 0x169a <DIO_u8SetPortDirection+0xee>
    1686:	2e 81       	ldd	r18, Y+6	; 0x06
    1688:	3f 81       	ldd	r19, Y+7	; 0x07
    168a:	21 30       	cpi	r18, 0x01	; 1
    168c:	31 05       	cpc	r19, r1
    168e:	19 f5       	brne	.+70     	; 0x16d6 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xff;break;
    1690:	e4 e3       	ldi	r30, 0x34	; 52
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	80 83       	st	Z, r24
    1698:	1e c0       	rjmp	.+60     	; 0x16d6 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break;
    169a:	e4 e3       	ldi	r30, 0x34	; 52
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	10 82       	st	Z, r1
    16a0:	1a c0       	rjmp	.+52     	; 0x16d6 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PortDirection)
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	3d 83       	std	Y+5, r19	; 0x05
    16aa:	2c 83       	std	Y+4, r18	; 0x04
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	9d 81       	ldd	r25, Y+5	; 0x05
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	51 f0       	breq	.+20     	; 0x16c8 <DIO_u8SetPortDirection+0x11c>
    16b4:	2c 81       	ldd	r18, Y+4	; 0x04
    16b6:	3d 81       	ldd	r19, Y+5	; 0x05
    16b8:	21 30       	cpi	r18, 0x01	; 1
    16ba:	31 05       	cpc	r19, r1
    16bc:	61 f4       	brne	.+24     	; 0x16d6 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xff;break;
    16be:	e1 e3       	ldi	r30, 0x31	; 49
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	80 83       	st	Z, r24
    16c6:	07 c0       	rjmp	.+14     	; 0x16d6 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break;
    16c8:	e1 e3       	ldi	r30, 0x31	; 49
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	10 82       	st	Z, r1
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			default :Local_u8ErrorState = STD_TYPES_NOK;
    16d0:	19 82       	std	Y+1, r1	; 0x01
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <DIO_u8SetPortDirection+0x12a>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    16d4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d8:	2d 96       	adiw	r28, 0x0d	; 13
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <DIO_u8SetPortValue>:

u8  DIO_u8SetPortValue    (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <DIO_u8SetPortValue+0x6>
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <DIO_u8SetPortValue+0x8>
    16f2:	0f 92       	push	r0
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	8a 83       	std	Y+2, r24	; 0x02
    16fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	3d 83       	std	Y+5, r19	; 0x05
    1708:	2c 83       	std	Y+4, r18	; 0x04
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	9d 81       	ldd	r25, Y+5	; 0x05
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	91 05       	cpc	r25, r1
    1712:	d1 f0       	breq	.+52     	; 0x1748 <DIO_u8SetPortValue+0x5e>
    1714:	2c 81       	ldd	r18, Y+4	; 0x04
    1716:	3d 81       	ldd	r19, Y+5	; 0x05
    1718:	22 30       	cpi	r18, 0x02	; 2
    171a:	31 05       	cpc	r19, r1
    171c:	2c f4       	brge	.+10     	; 0x1728 <DIO_u8SetPortValue+0x3e>
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	9d 81       	ldd	r25, Y+5	; 0x05
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	61 f0       	breq	.+24     	; 0x173e <DIO_u8SetPortValue+0x54>
    1726:	1f c0       	rjmp	.+62     	; 0x1766 <DIO_u8SetPortValue+0x7c>
    1728:	2c 81       	ldd	r18, Y+4	; 0x04
    172a:	3d 81       	ldd	r19, Y+5	; 0x05
    172c:	22 30       	cpi	r18, 0x02	; 2
    172e:	31 05       	cpc	r19, r1
    1730:	81 f0       	breq	.+32     	; 0x1752 <DIO_u8SetPortValue+0x68>
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	9d 81       	ldd	r25, Y+5	; 0x05
    1736:	83 30       	cpi	r24, 0x03	; 3
    1738:	91 05       	cpc	r25, r1
    173a:	81 f0       	breq	.+32     	; 0x175c <DIO_u8SetPortValue+0x72>
    173c:	14 c0       	rjmp	.+40     	; 0x1766 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    173e:	eb e3       	ldi	r30, 0x3B	; 59
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	80 83       	st	Z, r24
    1746:	10 c0       	rjmp	.+32     	; 0x1768 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    1748:	e8 e3       	ldi	r30, 0x38	; 56
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	80 83       	st	Z, r24
    1750:	0b c0       	rjmp	.+22     	; 0x1768 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    1752:	e5 e3       	ldi	r30, 0x35	; 53
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	80 83       	st	Z, r24
    175a:	06 c0       	rjmp	.+12     	; 0x1768 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    175c:	e2 e3       	ldi	r30, 0x32	; 50
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	80 83       	st	Z, r24
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState = STD_TYPES_NOK;
    1766:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1768:	89 81       	ldd	r24, Y+1	; 0x01
}
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <DIO_u8GetPortValue>:

u8  DIO_u8GetPortValue    (u8 Copy_u8PortId, u8 * Copy_pu8ReturnedPortValue)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	00 d0       	rcall	.+0      	; 0x1780 <DIO_u8GetPortValue+0x6>
    1780:	00 d0       	rcall	.+0      	; 0x1782 <DIO_u8GetPortValue+0x8>
    1782:	00 d0       	rcall	.+0      	; 0x1784 <DIO_u8GetPortValue+0xa>
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	8a 83       	std	Y+2, r24	; 0x02
    178a:	7c 83       	std	Y+4, r23	; 0x04
    178c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_pu8ReturnedPortValue != NULL)
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	9c 81       	ldd	r25, Y+4	; 0x04
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	e9 f1       	breq	.+122    	; 0x1814 <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	3e 83       	std	Y+6, r19	; 0x06
    17a2:	2d 83       	std	Y+5, r18	; 0x05
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	91 05       	cpc	r25, r1
    17ac:	e1 f0       	breq	.+56     	; 0x17e6 <DIO_u8GetPortValue+0x6c>
    17ae:	2d 81       	ldd	r18, Y+5	; 0x05
    17b0:	3e 81       	ldd	r19, Y+6	; 0x06
    17b2:	22 30       	cpi	r18, 0x02	; 2
    17b4:	31 05       	cpc	r19, r1
    17b6:	2c f4       	brge	.+10     	; 0x17c2 <DIO_u8GetPortValue+0x48>
    17b8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ba:	9e 81       	ldd	r25, Y+6	; 0x06
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	61 f0       	breq	.+24     	; 0x17d8 <DIO_u8GetPortValue+0x5e>
    17c0:	27 c0       	rjmp	.+78     	; 0x1810 <DIO_u8GetPortValue+0x96>
    17c2:	2d 81       	ldd	r18, Y+5	; 0x05
    17c4:	3e 81       	ldd	r19, Y+6	; 0x06
    17c6:	22 30       	cpi	r18, 0x02	; 2
    17c8:	31 05       	cpc	r19, r1
    17ca:	a1 f0       	breq	.+40     	; 0x17f4 <DIO_u8GetPortValue+0x7a>
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	83 30       	cpi	r24, 0x03	; 3
    17d2:	91 05       	cpc	r25, r1
    17d4:	b1 f0       	breq	.+44     	; 0x1802 <DIO_u8GetPortValue+0x88>
    17d6:	1c c0       	rjmp	.+56     	; 0x1810 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    17d8:	e9 e3       	ldi	r30, 0x39	; 57
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	eb 81       	ldd	r30, Y+3	; 0x03
    17e0:	fc 81       	ldd	r31, Y+4	; 0x04
    17e2:	80 83       	st	Z, r24
    17e4:	18 c0       	rjmp	.+48     	; 0x1816 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    17e6:	e6 e3       	ldi	r30, 0x36	; 54
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	eb 81       	ldd	r30, Y+3	; 0x03
    17ee:	fc 81       	ldd	r31, Y+4	; 0x04
    17f0:	80 83       	st	Z, r24
    17f2:	11 c0       	rjmp	.+34     	; 0x1816 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    17f4:	e3 e3       	ldi	r30, 0x33	; 51
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	eb 81       	ldd	r30, Y+3	; 0x03
    17fc:	fc 81       	ldd	r31, Y+4	; 0x04
    17fe:	80 83       	st	Z, r24
    1800:	0a c0       	rjmp	.+20     	; 0x1816 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    1802:	e0 e3       	ldi	r30, 0x30	; 48
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	eb 81       	ldd	r30, Y+3	; 0x03
    180a:	fc 81       	ldd	r31, Y+4	; 0x04
    180c:	80 83       	st	Z, r24
    180e:	03 c0       	rjmp	.+6      	; 0x1816 <DIO_u8GetPortValue+0x9c>
			default : Local_u8ErrorState = STD_TYPES_NOK;
    1810:	19 82       	std	Y+1, r1	; 0x01
    1812:	01 c0       	rjmp	.+2      	; 0x1816 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1814:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	26 96       	adiw	r28, 0x06	; 6
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u8 * Copy_pu8ReturnedKey)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	65 97       	sbiw	r28, 0x15	; 21
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	9d 8b       	std	Y+21, r25	; 0x15
    1840:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
    1846:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    1848:	8c 89       	ldd	r24, Y+20	; 0x14
    184a:	9d 89       	ldd	r25, Y+21	; 0x15
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	09 f4       	brne	.+2      	; 0x1852 <KPD_u8GetKeyState+0x28>
    1850:	f0 c0       	rjmp	.+480    	; 0x1a32 <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    1852:	ec 89       	ldd	r30, Y+20	; 0x14
    1854:	fd 89       	ldd	r31, Y+21	; 0x15
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	80 83       	st	Z, r24
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    185a:	19 8a       	std	Y+17, r1	; 0x11
    185c:	e5 c0       	rjmp	.+458    	; 0x1a28 <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    185e:	89 89       	ldd	r24, Y+17	; 0x11
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	fc 01       	movw	r30, r24
    1866:	e8 56       	subi	r30, 0x68	; 104
    1868:	fe 4f       	sbci	r31, 0xFE	; 254
    186a:	90 81       	ld	r25, Z
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	69 2f       	mov	r22, r25
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    1876:	18 8a       	std	Y+16, r1	; 0x10
    1878:	c1 c0       	rjmp	.+386    	; 0x19fc <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    187a:	88 89       	ldd	r24, Y+16	; 0x10
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	fc 01       	movw	r30, r24
    1882:	e4 56       	subi	r30, 0x64	; 100
    1884:	fe 4f       	sbci	r31, 0xFE	; 254
    1886:	90 81       	ld	r25, Z
    1888:	9e 01       	movw	r18, r28
    188a:	2d 5e       	subi	r18, 0xED	; 237
    188c:	3f 4f       	sbci	r19, 0xFF	; 255
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	69 2f       	mov	r22, r25
    1892:	a9 01       	movw	r20, r18
    1894:	0e 94 18 0a 	call	0x1430	; 0x1430 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)/* Switch is Pressed */
    1898:	8b 89       	ldd	r24, Y+19	; 0x13
    189a:	88 23       	and	r24, r24
    189c:	09 f0       	breq	.+2      	; 0x18a0 <KPD_u8GetKeyState+0x76>
    189e:	ab c0       	rjmp	.+342    	; 0x19f6 <KPD_u8GetKeyState+0x1cc>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	a0 ea       	ldi	r26, 0xA0	; 160
    18a6:	b1 e4       	ldi	r27, 0x41	; 65
    18a8:	8b 87       	std	Y+11, r24	; 0x0b
    18aa:	9c 87       	std	Y+12, r25	; 0x0c
    18ac:	ad 87       	std	Y+13, r26	; 0x0d
    18ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	4a ef       	ldi	r20, 0xFA	; 250
    18be:	54 e4       	ldi	r21, 0x44	; 68
    18c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	8f 83       	std	Y+7, r24	; 0x07
    18ca:	98 87       	std	Y+8, r25	; 0x08
    18cc:	a9 87       	std	Y+9, r26	; 0x09
    18ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18d0:	6f 81       	ldd	r22, Y+7	; 0x07
    18d2:	78 85       	ldd	r23, Y+8	; 0x08
    18d4:	89 85       	ldd	r24, Y+9	; 0x09
    18d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e8       	ldi	r20, 0x80	; 128
    18de:	5f e3       	ldi	r21, 0x3F	; 63
    18e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    18e4:	88 23       	and	r24, r24
    18e6:	2c f4       	brge	.+10     	; 0x18f2 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	9e 83       	std	Y+6, r25	; 0x06
    18ee:	8d 83       	std	Y+5, r24	; 0x05
    18f0:	3f c0       	rjmp	.+126    	; 0x1970 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    18f2:	6f 81       	ldd	r22, Y+7	; 0x07
    18f4:	78 85       	ldd	r23, Y+8	; 0x08
    18f6:	89 85       	ldd	r24, Y+9	; 0x09
    18f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	3f ef       	ldi	r19, 0xFF	; 255
    18fe:	4f e7       	ldi	r20, 0x7F	; 127
    1900:	57 e4       	ldi	r21, 0x47	; 71
    1902:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1906:	18 16       	cp	r1, r24
    1908:	4c f5       	brge	.+82     	; 0x195c <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190a:	6b 85       	ldd	r22, Y+11	; 0x0b
    190c:	7c 85       	ldd	r23, Y+12	; 0x0c
    190e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1910:	9e 85       	ldd	r25, Y+14	; 0x0e
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e2       	ldi	r20, 0x20	; 32
    1918:	51 e4       	ldi	r21, 0x41	; 65
    191a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	9e 83       	std	Y+6, r25	; 0x06
    1930:	8d 83       	std	Y+5, r24	; 0x05
    1932:	0f c0       	rjmp	.+30     	; 0x1952 <KPD_u8GetKeyState+0x128>
    1934:	88 ec       	ldi	r24, 0xC8	; 200
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9c 83       	std	Y+4, r25	; 0x04
    193a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <KPD_u8GetKeyState+0x116>
    1944:	9c 83       	std	Y+4, r25	; 0x04
    1946:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1948:	8d 81       	ldd	r24, Y+5	; 0x05
    194a:	9e 81       	ldd	r25, Y+6	; 0x06
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	9e 83       	std	Y+6, r25	; 0x06
    1950:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1952:	8d 81       	ldd	r24, Y+5	; 0x05
    1954:	9e 81       	ldd	r25, Y+6	; 0x06
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	69 f7       	brne	.-38     	; 0x1934 <KPD_u8GetKeyState+0x10a>
    195a:	14 c0       	rjmp	.+40     	; 0x1984 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195c:	6f 81       	ldd	r22, Y+7	; 0x07
    195e:	78 85       	ldd	r23, Y+8	; 0x08
    1960:	89 85       	ldd	r24, Y+9	; 0x09
    1962:	9a 85       	ldd	r25, Y+10	; 0x0a
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	9e 83       	std	Y+6, r25	; 0x06
    196e:	8d 83       	std	Y+5, r24	; 0x05
    1970:	8d 81       	ldd	r24, Y+5	; 0x05
    1972:	9e 81       	ldd	r25, Y+6	; 0x06
    1974:	9a 83       	std	Y+2, r25	; 0x02
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	9a 81       	ldd	r25, Y+2	; 0x02
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <KPD_u8GetKeyState+0x152>
    1980:	9a 83       	std	Y+2, r25	; 0x02
    1982:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1984:	88 89       	ldd	r24, Y+16	; 0x10
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	fc 01       	movw	r30, r24
    198c:	e4 56       	subi	r30, 0x64	; 100
    198e:	fe 4f       	sbci	r31, 0xFE	; 254
    1990:	90 81       	ld	r25, Z
    1992:	9e 01       	movw	r18, r28
    1994:	2d 5e       	subi	r18, 0xED	; 237
    1996:	3f 4f       	sbci	r19, 0xFF	; 255
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	69 2f       	mov	r22, r25
    199c:	a9 01       	movw	r20, r18
    199e:	0e 94 18 0a 	call	0x1430	; 0x1430 <DIO_u8GetPinValue>
    19a2:	0f c0       	rjmp	.+30     	; 0x19c2 <KPD_u8GetKeyState+0x198>
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    19a4:	88 89       	ldd	r24, Y+16	; 0x10
    19a6:	88 2f       	mov	r24, r24
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	fc 01       	movw	r30, r24
    19ac:	e4 56       	subi	r30, 0x64	; 100
    19ae:	fe 4f       	sbci	r31, 0xFE	; 254
    19b0:	90 81       	ld	r25, Z
    19b2:	9e 01       	movw	r18, r28
    19b4:	2d 5e       	subi	r18, 0xED	; 237
    19b6:	3f 4f       	sbci	r19, 0xFF	; 255
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	69 2f       	mov	r22, r25
    19bc:	a9 01       	movw	r20, r18
    19be:	0e 94 18 0a 	call	0x1430	; 0x1430 <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
    19c2:	8b 89       	ldd	r24, Y+19	; 0x13
    19c4:	88 23       	and	r24, r24
    19c6:	71 f3       	breq	.-36     	; 0x19a4 <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    19c8:	89 89       	ldd	r24, Y+17	; 0x11
    19ca:	48 2f       	mov	r20, r24
    19cc:	50 e0       	ldi	r21, 0x00	; 0
    19ce:	88 89       	ldd	r24, Y+16	; 0x10
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	ca 01       	movw	r24, r20
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	82 0f       	add	r24, r18
    19e0:	93 1f       	adc	r25, r19
    19e2:	fc 01       	movw	r30, r24
    19e4:	e8 57       	subi	r30, 0x78	; 120
    19e6:	fe 4f       	sbci	r31, 0xFE	; 254
    19e8:	80 81       	ld	r24, Z
    19ea:	ec 89       	ldd	r30, Y+20	; 0x14
    19ec:	fd 89       	ldd	r31, Y+21	; 0x15
    19ee:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	8f 87       	std	Y+15, r24	; 0x0f
    19f4:	07 c0       	rjmp	.+14     	; 0x1a04 <KPD_u8GetKeyState+0x1da>
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    19f6:	88 89       	ldd	r24, Y+16	; 0x10
    19f8:	8f 5f       	subi	r24, 0xFF	; 255
    19fa:	88 8b       	std	Y+16, r24	; 0x10
    19fc:	88 89       	ldd	r24, Y+16	; 0x10
    19fe:	84 30       	cpi	r24, 0x04	; 4
    1a00:	08 f4       	brcc	.+2      	; 0x1a04 <KPD_u8GetKeyState+0x1da>
    1a02:	3b cf       	rjmp	.-394    	; 0x187a <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;						
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    1a04:	89 89       	ldd	r24, Y+17	; 0x11
    1a06:	88 2f       	mov	r24, r24
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	e8 56       	subi	r30, 0x68	; 104
    1a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a10:	90 81       	ld	r25, Z
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	69 2f       	mov	r22, r25
    1a16:	41 e0       	ldi	r20, 0x01	; 1
    1a18:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    1a1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	49 f0       	breq	.+18     	; 0x1a34 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    1a22:	89 89       	ldd	r24, Y+17	; 0x11
    1a24:	8f 5f       	subi	r24, 0xFF	; 255
    1a26:	89 8b       	std	Y+17, r24	; 0x11
    1a28:	89 89       	ldd	r24, Y+17	; 0x11
    1a2a:	84 30       	cpi	r24, 0x04	; 4
    1a2c:	08 f4       	brcc	.+2      	; 0x1a30 <KPD_u8GetKeyState+0x206>
    1a2e:	17 cf       	rjmp	.-466    	; 0x185e <KPD_u8GetKeyState+0x34>
    1a30:	01 c0       	rjmp	.+2      	; 0x1a34 <KPD_u8GetKeyState+0x20a>
			}
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1a32:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    1a34:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1a36:	65 96       	adiw	r28, 0x15	; 21
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <LCD_voidInit>:
/***************************************************************************************/
/* Description! Apply initialization sequence for LCD module                           */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidInit(void) {
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	c4 55       	subi	r28, 0x54	; 84
    1a56:	d0 40       	sbci	r29, 0x00	; 0
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	fe 01       	movw	r30, r28
    1a64:	ef 5a       	subi	r30, 0xAF	; 175
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	ac e0       	ldi	r26, 0x0C	; 12
    1a6e:	b2 e4       	ldi	r27, 0x42	; 66
    1a70:	80 83       	st	Z, r24
    1a72:	91 83       	std	Z+1, r25	; 0x01
    1a74:	a2 83       	std	Z+2, r26	; 0x02
    1a76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a78:	8e 01       	movw	r16, r28
    1a7a:	03 5b       	subi	r16, 0xB3	; 179
    1a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7e:	fe 01       	movw	r30, r28
    1a80:	ef 5a       	subi	r30, 0xAF	; 175
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	60 81       	ld	r22, Z
    1a86:	71 81       	ldd	r23, Z+1	; 0x01
    1a88:	82 81       	ldd	r24, Z+2	; 0x02
    1a8a:	93 81       	ldd	r25, Z+3	; 0x03
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	4a ef       	ldi	r20, 0xFA	; 250
    1a92:	54 e4       	ldi	r21, 0x44	; 68
    1a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	f8 01       	movw	r30, r16
    1a9e:	80 83       	st	Z, r24
    1aa0:	91 83       	std	Z+1, r25	; 0x01
    1aa2:	a2 83       	std	Z+2, r26	; 0x02
    1aa4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e3 5b       	subi	r30, 0xB3	; 179
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	60 81       	ld	r22, Z
    1aae:	71 81       	ldd	r23, Z+1	; 0x01
    1ab0:	82 81       	ldd	r24, Z+2	; 0x02
    1ab2:	93 81       	ldd	r25, Z+3	; 0x03
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e8       	ldi	r20, 0x80	; 128
    1aba:	5f e3       	ldi	r21, 0x3F	; 63
    1abc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ac0:	88 23       	and	r24, r24
    1ac2:	44 f4       	brge	.+16     	; 0x1ad4 <LCD_voidInit+0x8c>
		__ticks = 1;
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e5 5b       	subi	r30, 0xB5	; 181
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	80 83       	st	Z, r24
    1ad2:	64 c0       	rjmp	.+200    	; 0x1b9c <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e3 5b       	subi	r30, 0xB3	; 179
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	60 81       	ld	r22, Z
    1adc:	71 81       	ldd	r23, Z+1	; 0x01
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	3f ef       	ldi	r19, 0xFF	; 255
    1ae6:	4f e7       	ldi	r20, 0x7F	; 127
    1ae8:	57 e4       	ldi	r21, 0x47	; 71
    1aea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1aee:	18 16       	cp	r1, r24
    1af0:	0c f0       	brlt	.+2      	; 0x1af4 <LCD_voidInit+0xac>
    1af2:	43 c0       	rjmp	.+134    	; 0x1b7a <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af4:	fe 01       	movw	r30, r28
    1af6:	ef 5a       	subi	r30, 0xAF	; 175
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	60 81       	ld	r22, Z
    1afc:	71 81       	ldd	r23, Z+1	; 0x01
    1afe:	82 81       	ldd	r24, Z+2	; 0x02
    1b00:	93 81       	ldd	r25, Z+3	; 0x03
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e2       	ldi	r20, 0x20	; 32
    1b08:	51 e4       	ldi	r21, 0x41	; 65
    1b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	8e 01       	movw	r16, r28
    1b14:	05 5b       	subi	r16, 0xB5	; 181
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	f8 01       	movw	r30, r16
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	80 83       	st	Z, r24
    1b2a:	1f c0       	rjmp	.+62     	; 0x1b6a <LCD_voidInit+0x122>
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e7 5b       	subi	r30, 0xB7	; 183
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	88 ec       	ldi	r24, 0xC8	; 200
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	80 83       	st	Z, r24
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e7 5b       	subi	r30, 0xB7	; 183
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 81       	ld	r24, Z
    1b42:	91 81       	ldd	r25, Z+1	; 0x01
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD_voidInit+0xfc>
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e7 5b       	subi	r30, 0xB7	; 183
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b52:	de 01       	movw	r26, r28
    1b54:	a5 5b       	subi	r26, 0xB5	; 181
    1b56:	bf 4f       	sbci	r27, 0xFF	; 255
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e5 5b       	subi	r30, 0xB5	; 181
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	11 96       	adiw	r26, 0x01	; 1
    1b66:	9c 93       	st	X, r25
    1b68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	e5 5b       	subi	r30, 0xB5	; 181
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	80 81       	ld	r24, Z
    1b72:	91 81       	ldd	r25, Z+1	; 0x01
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	d1 f6       	brne	.-76     	; 0x1b2c <LCD_voidInit+0xe4>
    1b78:	27 c0       	rjmp	.+78     	; 0x1bc8 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7a:	8e 01       	movw	r16, r28
    1b7c:	05 5b       	subi	r16, 0xB5	; 181
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	fe 01       	movw	r30, r28
    1b82:	e3 5b       	subi	r30, 0xB3	; 179
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	60 81       	ld	r22, Z
    1b88:	71 81       	ldd	r23, Z+1	; 0x01
    1b8a:	82 81       	ldd	r24, Z+2	; 0x02
    1b8c:	93 81       	ldd	r25, Z+3	; 0x03
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	f8 01       	movw	r30, r16
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	80 83       	st	Z, r24
    1b9c:	de 01       	movw	r26, r28
    1b9e:	a9 5b       	subi	r26, 0xB9	; 185
    1ba0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e5 5b       	subi	r30, 0xB5	; 181
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	80 81       	ld	r24, Z
    1baa:	91 81       	ldd	r25, Z+1	; 0x01
    1bac:	8d 93       	st	X+, r24
    1bae:	9c 93       	st	X, r25
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e9 5b       	subi	r30, 0xB9	; 185
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 81       	ld	r24, Z
    1bb8:	91 81       	ldd	r25, Z+1	; 0x01
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_voidInit+0x172>
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e9 5b       	subi	r30, 0xB9	; 185
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	80 83       	st	Z, r24
#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(35);

	/* Return Home  */
	LCD_voidSendCmnd(lcd_Home);
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
    1bca:	0e 94 4c 10 	call	0x2098	; 0x2098 <LCD_voidSendCmnd>
    1bce:	fe 01       	movw	r30, r28
    1bd0:	ed 5b       	subi	r30, 0xBD	; 189
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a0 e8       	ldi	r26, 0x80	; 128
    1bda:	bf e3       	ldi	r27, 0x3F	; 63
    1bdc:	80 83       	st	Z, r24
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	a2 83       	std	Z+2, r26	; 0x02
    1be2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be4:	8e 01       	movw	r16, r28
    1be6:	01 5c       	subi	r16, 0xC1	; 193
    1be8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bea:	fe 01       	movw	r30, r28
    1bec:	ed 5b       	subi	r30, 0xBD	; 189
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	60 81       	ld	r22, Z
    1bf2:	71 81       	ldd	r23, Z+1	; 0x01
    1bf4:	82 81       	ldd	r24, Z+2	; 0x02
    1bf6:	93 81       	ldd	r25, Z+3	; 0x03
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a ef       	ldi	r20, 0xFA	; 250
    1bfe:	54 e4       	ldi	r21, 0x44	; 68
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	f8 01       	movw	r30, r16
    1c0a:	80 83       	st	Z, r24
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	a2 83       	std	Z+2, r26	; 0x02
    1c10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c12:	fe 01       	movw	r30, r28
    1c14:	ff 96       	adiw	r30, 0x3f	; 63
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1c2a:	88 23       	and	r24, r24
    1c2c:	2c f4       	brge	.+10     	; 0x1c38 <LCD_voidInit+0x1f0>
		__ticks = 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	9e af       	std	Y+62, r25	; 0x3e
    1c34:	8d af       	std	Y+61, r24	; 0x3d
    1c36:	46 c0       	rjmp	.+140    	; 0x1cc4 <LCD_voidInit+0x27c>
	else if (__tmp > 65535)
    1c38:	fe 01       	movw	r30, r28
    1c3a:	ff 96       	adiw	r30, 0x3f	; 63
    1c3c:	60 81       	ld	r22, Z
    1c3e:	71 81       	ldd	r23, Z+1	; 0x01
    1c40:	82 81       	ldd	r24, Z+2	; 0x02
    1c42:	93 81       	ldd	r25, Z+3	; 0x03
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	3f ef       	ldi	r19, 0xFF	; 255
    1c48:	4f e7       	ldi	r20, 0x7F	; 127
    1c4a:	57 e4       	ldi	r21, 0x47	; 71
    1c4c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1c50:	18 16       	cp	r1, r24
    1c52:	64 f5       	brge	.+88     	; 0x1cac <LCD_voidInit+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c54:	fe 01       	movw	r30, r28
    1c56:	ed 5b       	subi	r30, 0xBD	; 189
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	60 81       	ld	r22, Z
    1c5c:	71 81       	ldd	r23, Z+1	; 0x01
    1c5e:	82 81       	ldd	r24, Z+2	; 0x02
    1c60:	93 81       	ldd	r25, Z+3	; 0x03
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e2       	ldi	r20, 0x20	; 32
    1c68:	51 e4       	ldi	r21, 0x41	; 65
    1c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	9e af       	std	Y+62, r25	; 0x3e
    1c80:	8d af       	std	Y+61, r24	; 0x3d
    1c82:	0f c0       	rjmp	.+30     	; 0x1ca2 <LCD_voidInit+0x25a>
    1c84:	88 ec       	ldi	r24, 0xC8	; 200
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9c af       	std	Y+60, r25	; 0x3c
    1c8a:	8b af       	std	Y+59, r24	; 0x3b
    1c8c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c8e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <LCD_voidInit+0x248>
    1c94:	9c af       	std	Y+60, r25	; 0x3c
    1c96:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c98:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	9e af       	std	Y+62, r25	; 0x3e
    1ca0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ca4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	69 f7       	brne	.-38     	; 0x1c84 <LCD_voidInit+0x23c>
    1caa:	16 c0       	rjmp	.+44     	; 0x1cd8 <LCD_voidInit+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cac:	fe 01       	movw	r30, r28
    1cae:	ff 96       	adiw	r30, 0x3f	; 63
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	9e af       	std	Y+62, r25	; 0x3e
    1cc2:	8d af       	std	Y+61, r24	; 0x3d
    1cc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cc6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cc8:	9a af       	std	Y+58, r25	; 0x3a
    1cca:	89 af       	std	Y+57, r24	; 0x39
    1ccc:	89 ad       	ldd	r24, Y+57	; 0x39
    1cce:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <LCD_voidInit+0x288>
    1cd4:	9a af       	std	Y+58, r25	; 0x3a
    1cd6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	/* Function Set  */
	LCD_voidSendCmnd(lcd_FunctionSet4bit);
    1cd8:	8f e2       	ldi	r24, 0x2F	; 47
    1cda:	0e 94 4c 10 	call	0x2098	; 0x2098 <LCD_voidSendCmnd>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a0 e8       	ldi	r26, 0x80	; 128
    1ce4:	bf e3       	ldi	r27, 0x3F	; 63
    1ce6:	8d ab       	std	Y+53, r24	; 0x35
    1ce8:	9e ab       	std	Y+54, r25	; 0x36
    1cea:	af ab       	std	Y+55, r26	; 0x37
    1cec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	6d a9       	ldd	r22, Y+53	; 0x35
    1cf0:	7e a9       	ldd	r23, Y+54	; 0x36
    1cf2:	8f a9       	ldd	r24, Y+55	; 0x37
    1cf4:	98 ad       	ldd	r25, Y+56	; 0x38
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	4a ef       	ldi	r20, 0xFA	; 250
    1cfc:	54 e4       	ldi	r21, 0x44	; 68
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	89 ab       	std	Y+49, r24	; 0x31
    1d08:	9a ab       	std	Y+50, r25	; 0x32
    1d0a:	ab ab       	std	Y+51, r26	; 0x33
    1d0c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d0e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d10:	7a a9       	ldd	r23, Y+50	; 0x32
    1d12:	8b a9       	ldd	r24, Y+51	; 0x33
    1d14:	9c a9       	ldd	r25, Y+52	; 0x34
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	2c f4       	brge	.+10     	; 0x1d30 <LCD_voidInit+0x2e8>
		__ticks = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	98 ab       	std	Y+48, r25	; 0x30
    1d2c:	8f a7       	std	Y+47, r24	; 0x2f
    1d2e:	3f c0       	rjmp	.+126    	; 0x1dae <LCD_voidInit+0x366>
	else if (__tmp > 65535)
    1d30:	69 a9       	ldd	r22, Y+49	; 0x31
    1d32:	7a a9       	ldd	r23, Y+50	; 0x32
    1d34:	8b a9       	ldd	r24, Y+51	; 0x33
    1d36:	9c a9       	ldd	r25, Y+52	; 0x34
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	57 e4       	ldi	r21, 0x47	; 71
    1d40:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1d44:	18 16       	cp	r1, r24
    1d46:	4c f5       	brge	.+82     	; 0x1d9a <LCD_voidInit+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d48:	6d a9       	ldd	r22, Y+53	; 0x35
    1d4a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d4c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d4e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	98 ab       	std	Y+48, r25	; 0x30
    1d6e:	8f a7       	std	Y+47, r24	; 0x2f
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <LCD_voidInit+0x348>
    1d72:	88 ec       	ldi	r24, 0xC8	; 200
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9e a7       	std	Y+46, r25	; 0x2e
    1d78:	8d a7       	std	Y+45, r24	; 0x2d
    1d7a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d7c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LCD_voidInit+0x336>
    1d82:	9e a7       	std	Y+46, r25	; 0x2e
    1d84:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d88:	98 a9       	ldd	r25, Y+48	; 0x30
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	98 ab       	std	Y+48, r25	; 0x30
    1d8e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d92:	98 a9       	ldd	r25, Y+48	; 0x30
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	69 f7       	brne	.-38     	; 0x1d72 <LCD_voidInit+0x32a>
    1d98:	14 c0       	rjmp	.+40     	; 0x1dc2 <LCD_voidInit+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1da0:	9c a9       	ldd	r25, Y+52	; 0x34
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	98 ab       	std	Y+48, r25	; 0x30
    1dac:	8f a7       	std	Y+47, r24	; 0x2f
    1dae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1db0:	98 a9       	ldd	r25, Y+48	; 0x30
    1db2:	9c a7       	std	Y+44, r25	; 0x2c
    1db4:	8b a7       	std	Y+43, r24	; 0x2b
    1db6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <LCD_voidInit+0x372>
    1dbe:	9c a7       	std	Y+44, r25	; 0x2c
    1dc0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Display ON OFF Control */
	LCD_voidSendCmnd(lcd_DisplayOn);
    1dc2:	8f e0       	ldi	r24, 0x0F	; 15
    1dc4:	0e 94 4c 10 	call	0x2098	; 0x2098 <LCD_voidSendCmnd>
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	a0 e8       	ldi	r26, 0x80	; 128
    1dce:	bf e3       	ldi	r27, 0x3F	; 63
    1dd0:	8f a3       	std	Y+39, r24	; 0x27
    1dd2:	98 a7       	std	Y+40, r25	; 0x28
    1dd4:	a9 a7       	std	Y+41, r26	; 0x29
    1dd6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd8:	6f a1       	ldd	r22, Y+39	; 0x27
    1dda:	78 a5       	ldd	r23, Y+40	; 0x28
    1ddc:	89 a5       	ldd	r24, Y+41	; 0x29
    1dde:	9a a5       	ldd	r25, Y+42	; 0x2a
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	4a ef       	ldi	r20, 0xFA	; 250
    1de6:	54 e4       	ldi	r21, 0x44	; 68
    1de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	8b a3       	std	Y+35, r24	; 0x23
    1df2:	9c a3       	std	Y+36, r25	; 0x24
    1df4:	ad a3       	std	Y+37, r26	; 0x25
    1df6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1df8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1dfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e8       	ldi	r20, 0x80	; 128
    1e06:	5f e3       	ldi	r21, 0x3F	; 63
    1e08:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1e0c:	88 23       	and	r24, r24
    1e0e:	2c f4       	brge	.+10     	; 0x1e1a <LCD_voidInit+0x3d2>
		__ticks = 1;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9a a3       	std	Y+34, r25	; 0x22
    1e16:	89 a3       	std	Y+33, r24	; 0x21
    1e18:	3f c0       	rjmp	.+126    	; 0x1e98 <LCD_voidInit+0x450>
	else if (__tmp > 65535)
    1e1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e20:	9e a1       	ldd	r25, Y+38	; 0x26
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	3f ef       	ldi	r19, 0xFF	; 255
    1e26:	4f e7       	ldi	r20, 0x7F	; 127
    1e28:	57 e4       	ldi	r21, 0x47	; 71
    1e2a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1e2e:	18 16       	cp	r1, r24
    1e30:	4c f5       	brge	.+82     	; 0x1e84 <LCD_voidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e32:	6f a1       	ldd	r22, Y+39	; 0x27
    1e34:	78 a5       	ldd	r23, Y+40	; 0x28
    1e36:	89 a5       	ldd	r24, Y+41	; 0x29
    1e38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e2       	ldi	r20, 0x20	; 32
    1e40:	51 e4       	ldi	r21, 0x41	; 65
    1e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	bc 01       	movw	r22, r24
    1e4c:	cd 01       	movw	r24, r26
    1e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	9a a3       	std	Y+34, r25	; 0x22
    1e58:	89 a3       	std	Y+33, r24	; 0x21
    1e5a:	0f c0       	rjmp	.+30     	; 0x1e7a <LCD_voidInit+0x432>
    1e5c:	88 ec       	ldi	r24, 0xC8	; 200
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	98 a3       	std	Y+32, r25	; 0x20
    1e62:	8f 8f       	std	Y+31, r24	; 0x1f
    1e64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e66:	98 a1       	ldd	r25, Y+32	; 0x20
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <LCD_voidInit+0x420>
    1e6c:	98 a3       	std	Y+32, r25	; 0x20
    1e6e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e70:	89 a1       	ldd	r24, Y+33	; 0x21
    1e72:	9a a1       	ldd	r25, Y+34	; 0x22
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	9a a3       	std	Y+34, r25	; 0x22
    1e78:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	69 f7       	brne	.-38     	; 0x1e5c <LCD_voidInit+0x414>
    1e82:	14 c0       	rjmp	.+40     	; 0x1eac <LCD_voidInit+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e84:	6b a1       	ldd	r22, Y+35	; 0x23
    1e86:	7c a1       	ldd	r23, Y+36	; 0x24
    1e88:	8d a1       	ldd	r24, Y+37	; 0x25
    1e8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	9a a3       	std	Y+34, r25	; 0x22
    1e96:	89 a3       	std	Y+33, r24	; 0x21
    1e98:	89 a1       	ldd	r24, Y+33	; 0x21
    1e9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e9e:	8d 8f       	std	Y+29, r24	; 0x1d
    1ea0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ea2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <LCD_voidInit+0x45c>
    1ea8:	9e 8f       	std	Y+30, r25	; 0x1e
    1eaa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display */
	LCD_voidSendCmnd(lcd_Clear);
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	0e 94 4c 10 	call	0x2098	; 0x2098 <LCD_voidSendCmnd>
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a0 e8       	ldi	r26, 0x80	; 128
    1eb8:	bf e3       	ldi	r27, 0x3F	; 63
    1eba:	89 8f       	std	Y+25, r24	; 0x19
    1ebc:	9a 8f       	std	Y+26, r25	; 0x1a
    1ebe:	ab 8f       	std	Y+27, r26	; 0x1b
    1ec0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ec4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	4a ef       	ldi	r20, 0xFA	; 250
    1ed0:	54 e4       	ldi	r21, 0x44	; 68
    1ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	8d 8b       	std	Y+21, r24	; 0x15
    1edc:	9e 8b       	std	Y+22, r25	; 0x16
    1ede:	af 8b       	std	Y+23, r26	; 0x17
    1ee0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ee2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e8       	ldi	r20, 0x80	; 128
    1ef0:	5f e3       	ldi	r21, 0x3F	; 63
    1ef2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ef6:	88 23       	and	r24, r24
    1ef8:	2c f4       	brge	.+10     	; 0x1f04 <LCD_voidInit+0x4bc>
		__ticks = 1;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	9c 8b       	std	Y+20, r25	; 0x14
    1f00:	8b 8b       	std	Y+19, r24	; 0x13
    1f02:	3f c0       	rjmp	.+126    	; 0x1f82 <LCD_voidInit+0x53a>
	else if (__tmp > 65535)
    1f04:	6d 89       	ldd	r22, Y+21	; 0x15
    1f06:	7e 89       	ldd	r23, Y+22	; 0x16
    1f08:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	3f ef       	ldi	r19, 0xFF	; 255
    1f10:	4f e7       	ldi	r20, 0x7F	; 127
    1f12:	57 e4       	ldi	r21, 0x47	; 71
    1f14:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1f18:	18 16       	cp	r1, r24
    1f1a:	4c f5       	brge	.+82     	; 0x1f6e <LCD_voidInit+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e2       	ldi	r20, 0x20	; 32
    1f2a:	51 e4       	ldi	r21, 0x41	; 65
    1f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	bc 01       	movw	r22, r24
    1f36:	cd 01       	movw	r24, r26
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9c 8b       	std	Y+20, r25	; 0x14
    1f42:	8b 8b       	std	Y+19, r24	; 0x13
    1f44:	0f c0       	rjmp	.+30     	; 0x1f64 <LCD_voidInit+0x51c>
    1f46:	88 ec       	ldi	r24, 0xC8	; 200
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9a 8b       	std	Y+18, r25	; 0x12
    1f4c:	89 8b       	std	Y+17, r24	; 0x11
    1f4e:	89 89       	ldd	r24, Y+17	; 0x11
    1f50:	9a 89       	ldd	r25, Y+18	; 0x12
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <LCD_voidInit+0x50a>
    1f56:	9a 8b       	std	Y+18, r25	; 0x12
    1f58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	9c 8b       	std	Y+20, r25	; 0x14
    1f62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f64:	8b 89       	ldd	r24, Y+19	; 0x13
    1f66:	9c 89       	ldd	r25, Y+20	; 0x14
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	69 f7       	brne	.-38     	; 0x1f46 <LCD_voidInit+0x4fe>
    1f6c:	14 c0       	rjmp	.+40     	; 0x1f96 <LCD_voidInit+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f70:	7e 89       	ldd	r23, Y+22	; 0x16
    1f72:	8f 89       	ldd	r24, Y+23	; 0x17
    1f74:	98 8d       	ldd	r25, Y+24	; 0x18
    1f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9c 8b       	std	Y+20, r25	; 0x14
    1f80:	8b 8b       	std	Y+19, r24	; 0x13
    1f82:	8b 89       	ldd	r24, Y+19	; 0x13
    1f84:	9c 89       	ldd	r25, Y+20	; 0x14
    1f86:	98 8b       	std	Y+16, r25	; 0x10
    1f88:	8f 87       	std	Y+15, r24	; 0x0f
    1f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f8c:	98 89       	ldd	r25, Y+16	; 0x10
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <LCD_voidInit+0x546>
    1f92:	98 8b       	std	Y+16, r25	; 0x10
    1f94:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* Entry Mode Set  */
	LCD_voidSendCmnd(lcd_EntryMode);
    1f96:	86 e0       	ldi	r24, 0x06	; 6
    1f98:	0e 94 4c 10 	call	0x2098	; 0x2098 <LCD_voidSendCmnd>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	a0 e0       	ldi	r26, 0x00	; 0
    1fa2:	b0 e4       	ldi	r27, 0x40	; 64
    1fa4:	8b 87       	std	Y+11, r24	; 0x0b
    1fa6:	9c 87       	std	Y+12, r25	; 0x0c
    1fa8:	ad 87       	std	Y+13, r26	; 0x0d
    1faa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	4a ef       	ldi	r20, 0xFA	; 250
    1fba:	54 e4       	ldi	r21, 0x44	; 68
    1fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	8f 83       	std	Y+7, r24	; 0x07
    1fc6:	98 87       	std	Y+8, r25	; 0x08
    1fc8:	a9 87       	std	Y+9, r26	; 0x09
    1fca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fce:	78 85       	ldd	r23, Y+8	; 0x08
    1fd0:	89 85       	ldd	r24, Y+9	; 0x09
    1fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e8       	ldi	r20, 0x80	; 128
    1fda:	5f e3       	ldi	r21, 0x3F	; 63
    1fdc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1fe0:	88 23       	and	r24, r24
    1fe2:	2c f4       	brge	.+10     	; 0x1fee <LCD_voidInit+0x5a6>
		__ticks = 1;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
    1fec:	3f c0       	rjmp	.+126    	; 0x206c <LCD_voidInit+0x624>
	else if (__tmp > 65535)
    1fee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff0:	78 85       	ldd	r23, Y+8	; 0x08
    1ff2:	89 85       	ldd	r24, Y+9	; 0x09
    1ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	3f ef       	ldi	r19, 0xFF	; 255
    1ffa:	4f e7       	ldi	r20, 0x7F	; 127
    1ffc:	57 e4       	ldi	r21, 0x47	; 71
    1ffe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2002:	18 16       	cp	r1, r24
    2004:	4c f5       	brge	.+82     	; 0x2058 <LCD_voidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2006:	6b 85       	ldd	r22, Y+11	; 0x0b
    2008:	7c 85       	ldd	r23, Y+12	; 0x0c
    200a:	8d 85       	ldd	r24, Y+13	; 0x0d
    200c:	9e 85       	ldd	r25, Y+14	; 0x0e
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e2       	ldi	r20, 0x20	; 32
    2014:	51 e4       	ldi	r21, 0x41	; 65
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	9e 83       	std	Y+6, r25	; 0x06
    202c:	8d 83       	std	Y+5, r24	; 0x05
    202e:	0f c0       	rjmp	.+30     	; 0x204e <LCD_voidInit+0x606>
    2030:	88 ec       	ldi	r24, 0xC8	; 200
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9c 83       	std	Y+4, r25	; 0x04
    2036:	8b 83       	std	Y+3, r24	; 0x03
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	9c 81       	ldd	r25, Y+4	; 0x04
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_voidInit+0x5f4>
    2040:	9c 83       	std	Y+4, r25	; 0x04
    2042:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
    2046:	9e 81       	ldd	r25, Y+6	; 0x06
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	9e 83       	std	Y+6, r25	; 0x06
    204c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	9e 81       	ldd	r25, Y+6	; 0x06
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	69 f7       	brne	.-38     	; 0x2030 <LCD_voidInit+0x5e8>
    2056:	14 c0       	rjmp	.+40     	; 0x2080 <LCD_voidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2058:	6f 81       	ldd	r22, Y+7	; 0x07
    205a:	78 85       	ldd	r23, Y+8	; 0x08
    205c:	89 85       	ldd	r24, Y+9	; 0x09
    205e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9e 83       	std	Y+6, r25	; 0x06
    206a:	8d 83       	std	Y+5, r24	; 0x05
    206c:	8d 81       	ldd	r24, Y+5	; 0x05
    206e:	9e 81       	ldd	r25, Y+6	; 0x06
    2070:	9a 83       	std	Y+2, r25	; 0x02
    2072:	89 83       	std	Y+1, r24	; 0x01
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	9a 81       	ldd	r25, Y+2	; 0x02
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <LCD_voidInit+0x630>
    207c:	9a 83       	std	Y+2, r25	; 0x02
    207e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    2080:	cc 5a       	subi	r28, 0xAC	; 172
    2082:	df 4f       	sbci	r29, 0xFF	; 255
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	08 95       	ret

00002098 <LCD_voidSendCmnd>:
/***************************************************************************************/
/* Description! Interface to send the configuration commands to the LCD Driver         */
/* Input      ! Command number                                                         */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendCmnd(u8 Copy_u8Cmnd) {
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	6d 97       	sbiw	r28, 0x1d	; 29
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);

#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT

	/* Set RS to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RS_PIN, DIO_u8_LOW);
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>

	/* Set R/W to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	61 e0       	ldi	r22, 0x01	; 1
    20bc:	40 e0       	ldi	r20, 0x00	; 0
    20be:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>

	/* Load Command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd);
    20c2:	83 e0       	ldi	r24, 0x03	; 3
    20c4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20c6:	0e 94 75 0b 	call	0x16ea	; 0x16ea <DIO_u8SetPortValue>

	/* Set E to DIO_u8_HIGH  */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	62 e0       	ldi	r22, 0x02	; 2
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a0 e0       	ldi	r26, 0x00	; 0
    20da:	b0 e4       	ldi	r27, 0x40	; 64
    20dc:	89 8f       	std	Y+25, r24	; 0x19
    20de:	9a 8f       	std	Y+26, r25	; 0x1a
    20e0:	ab 8f       	std	Y+27, r26	; 0x1b
    20e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	69 8d       	ldd	r22, Y+25	; 0x19
    20e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a ef       	ldi	r20, 0xFA	; 250
    20f2:	54 e4       	ldi	r21, 0x44	; 68
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	8d 8b       	std	Y+21, r24	; 0x15
    20fe:	9e 8b       	std	Y+22, r25	; 0x16
    2100:	af 8b       	std	Y+23, r26	; 0x17
    2102:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2104:	6d 89       	ldd	r22, Y+21	; 0x15
    2106:	7e 89       	ldd	r23, Y+22	; 0x16
    2108:	8f 89       	ldd	r24, Y+23	; 0x17
    210a:	98 8d       	ldd	r25, Y+24	; 0x18
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e8       	ldi	r20, 0x80	; 128
    2112:	5f e3       	ldi	r21, 0x3F	; 63
    2114:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2118:	88 23       	and	r24, r24
    211a:	2c f4       	brge	.+10     	; 0x2126 <LCD_voidSendCmnd+0x8e>
		__ticks = 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9c 8b       	std	Y+20, r25	; 0x14
    2122:	8b 8b       	std	Y+19, r24	; 0x13
    2124:	3f c0       	rjmp	.+126    	; 0x21a4 <LCD_voidSendCmnd+0x10c>
	else if (__tmp > 65535)
    2126:	6d 89       	ldd	r22, Y+21	; 0x15
    2128:	7e 89       	ldd	r23, Y+22	; 0x16
    212a:	8f 89       	ldd	r24, Y+23	; 0x17
    212c:	98 8d       	ldd	r25, Y+24	; 0x18
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	3f ef       	ldi	r19, 0xFF	; 255
    2132:	4f e7       	ldi	r20, 0x7F	; 127
    2134:	57 e4       	ldi	r21, 0x47	; 71
    2136:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    213a:	18 16       	cp	r1, r24
    213c:	4c f5       	brge	.+82     	; 0x2190 <LCD_voidSendCmnd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213e:	69 8d       	ldd	r22, Y+25	; 0x19
    2140:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2144:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e2       	ldi	r20, 0x20	; 32
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9c 8b       	std	Y+20, r25	; 0x14
    2164:	8b 8b       	std	Y+19, r24	; 0x13
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <LCD_voidSendCmnd+0xee>
    2168:	88 ec       	ldi	r24, 0xC8	; 200
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9a 8b       	std	Y+18, r25	; 0x12
    216e:	89 8b       	std	Y+17, r24	; 0x11
    2170:	89 89       	ldd	r24, Y+17	; 0x11
    2172:	9a 89       	ldd	r25, Y+18	; 0x12
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <LCD_voidSendCmnd+0xdc>
    2178:	9a 8b       	std	Y+18, r25	; 0x12
    217a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	8b 89       	ldd	r24, Y+19	; 0x13
    217e:	9c 89       	ldd	r25, Y+20	; 0x14
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	9c 8b       	std	Y+20, r25	; 0x14
    2184:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	8b 89       	ldd	r24, Y+19	; 0x13
    2188:	9c 89       	ldd	r25, Y+20	; 0x14
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	69 f7       	brne	.-38     	; 0x2168 <LCD_voidSendCmnd+0xd0>
    218e:	14 c0       	rjmp	.+40     	; 0x21b8 <LCD_voidSendCmnd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	6d 89       	ldd	r22, Y+21	; 0x15
    2192:	7e 89       	ldd	r23, Y+22	; 0x16
    2194:	8f 89       	ldd	r24, Y+23	; 0x17
    2196:	98 8d       	ldd	r25, Y+24	; 0x18
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
    21a2:	8b 8b       	std	Y+19, r24	; 0x13
    21a4:	8b 89       	ldd	r24, Y+19	; 0x13
    21a6:	9c 89       	ldd	r25, Y+20	; 0x14
    21a8:	98 8b       	std	Y+16, r25	; 0x10
    21aa:	8f 87       	std	Y+15, r24	; 0x0f
    21ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ae:	98 89       	ldd	r25, Y+16	; 0x10
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_voidSendCmnd+0x118>
    21b4:	98 8b       	std	Y+16, r25	; 0x10
    21b6:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(2);

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	62 e0       	ldi	r22, 0x02	; 2
    21bc:	40 e0       	ldi	r20, 0x00	; 0
    21be:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>

	/*write the rest of the command */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd << 4);
    21c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21c4:	98 2f       	mov	r25, r24
    21c6:	92 95       	swap	r25
    21c8:	90 7f       	andi	r25, 0xF0	; 240
    21ca:	83 e0       	ldi	r24, 0x03	; 3
    21cc:	69 2f       	mov	r22, r25
    21ce:	0e 94 75 0b 	call	0x16ea	; 0x16ea <DIO_u8SetPortValue>

	/* Set E to DIO_u8_HIGH  */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	62 e0       	ldi	r22, 0x02	; 2
    21d6:	41 e0       	ldi	r20, 0x01	; 1
    21d8:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	a0 e0       	ldi	r26, 0x00	; 0
    21e2:	b0 e4       	ldi	r27, 0x40	; 64
    21e4:	8b 87       	std	Y+11, r24	; 0x0b
    21e6:	9c 87       	std	Y+12, r25	; 0x0c
    21e8:	ad 87       	std	Y+13, r26	; 0x0d
    21ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	4a ef       	ldi	r20, 0xFA	; 250
    21fa:	54 e4       	ldi	r21, 0x44	; 68
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	8f 83       	std	Y+7, r24	; 0x07
    2206:	98 87       	std	Y+8, r25	; 0x08
    2208:	a9 87       	std	Y+9, r26	; 0x09
    220a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    220c:	6f 81       	ldd	r22, Y+7	; 0x07
    220e:	78 85       	ldd	r23, Y+8	; 0x08
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e8       	ldi	r20, 0x80	; 128
    221a:	5f e3       	ldi	r21, 0x3F	; 63
    221c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2220:	88 23       	and	r24, r24
    2222:	2c f4       	brge	.+10     	; 0x222e <LCD_voidSendCmnd+0x196>
		__ticks = 1;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	3f c0       	rjmp	.+126    	; 0x22ac <LCD_voidSendCmnd+0x214>
	else if (__tmp > 65535)
    222e:	6f 81       	ldd	r22, Y+7	; 0x07
    2230:	78 85       	ldd	r23, Y+8	; 0x08
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	3f ef       	ldi	r19, 0xFF	; 255
    223a:	4f e7       	ldi	r20, 0x7F	; 127
    223c:	57 e4       	ldi	r21, 0x47	; 71
    223e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2242:	18 16       	cp	r1, r24
    2244:	4c f5       	brge	.+82     	; 0x2298 <LCD_voidSendCmnd+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2246:	6b 85       	ldd	r22, Y+11	; 0x0b
    2248:	7c 85       	ldd	r23, Y+12	; 0x0c
    224a:	8d 85       	ldd	r24, Y+13	; 0x0d
    224c:	9e 85       	ldd	r25, Y+14	; 0x0e
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e2       	ldi	r20, 0x20	; 32
    2254:	51 e4       	ldi	r21, 0x41	; 65
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	bc 01       	movw	r22, r24
    2260:	cd 01       	movw	r24, r26
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	8d 83       	std	Y+5, r24	; 0x05
    226e:	0f c0       	rjmp	.+30     	; 0x228e <LCD_voidSendCmnd+0x1f6>
    2270:	88 ec       	ldi	r24, 0xC8	; 200
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9c 83       	std	Y+4, r25	; 0x04
    2276:	8b 83       	std	Y+3, r24	; 0x03
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <LCD_voidSendCmnd+0x1e4>
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	69 f7       	brne	.-38     	; 0x2270 <LCD_voidSendCmnd+0x1d8>
    2296:	14 c0       	rjmp	.+40     	; 0x22c0 <LCD_voidSendCmnd+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2298:	6f 81       	ldd	r22, Y+7	; 0x07
    229a:	78 85       	ldd	r23, Y+8	; 0x08
    229c:	89 85       	ldd	r24, Y+9	; 0x09
    229e:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	8d 83       	std	Y+5, r24	; 0x05
    22ac:	8d 81       	ldd	r24, Y+5	; 0x05
    22ae:	9e 81       	ldd	r25, Y+6	; 0x06
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	9a 81       	ldd	r25, Y+2	; 0x02
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <LCD_voidSendCmnd+0x220>
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for E to settle */
	_delay_ms(2);

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	62 e0       	ldi	r22, 0x02	; 2
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>
#endif

}
    22ca:	6d 96       	adiw	r28, 0x1d	; 29
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <LCD_voidSendChar>:
/***************************************************************************************/
/* Description! Interface to write character on LCD screen                             */
/* Input      ! Data to send                                                           */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendChar(u8 Copy_u8Data) {
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	ab 97       	sbiw	r28, 0x2b	; 43
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	8b a7       	std	Y+43, r24	; 0x2b
	/* Delay to let the LCD Display the character */
	_delay_ms(2);

#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	/* Set RS to HIG */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RS_PIN, DIO_u8_HIGH);
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	60 e0       	ldi	r22, 0x00	; 0
    22f6:	41 e0       	ldi	r20, 0x01	; 1
    22f8:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>

	/* Set R/W to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	61 e0       	ldi	r22, 0x01	; 1
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	62 e0       	ldi	r22, 0x02	; 2
    230a:	41 e0       	ldi	r20, 0x01	; 1
    230c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>

	/* Load Command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Data);
    2310:	83 e0       	ldi	r24, 0x03	; 3
    2312:	6b a5       	ldd	r22, Y+43	; 0x2b
    2314:	0e 94 75 0b 	call	0x16ea	; 0x16ea <DIO_u8SetPortValue>

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	62 e0       	ldi	r22, 0x02	; 2
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	a0 e0       	ldi	r26, 0x00	; 0
    2328:	b0 e4       	ldi	r27, 0x40	; 64
    232a:	8f a3       	std	Y+39, r24	; 0x27
    232c:	98 a7       	std	Y+40, r25	; 0x28
    232e:	a9 a7       	std	Y+41, r26	; 0x29
    2330:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2332:	6f a1       	ldd	r22, Y+39	; 0x27
    2334:	78 a5       	ldd	r23, Y+40	; 0x28
    2336:	89 a5       	ldd	r24, Y+41	; 0x29
    2338:	9a a5       	ldd	r25, Y+42	; 0x2a
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	4a ef       	ldi	r20, 0xFA	; 250
    2340:	54 e4       	ldi	r21, 0x44	; 68
    2342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	8b a3       	std	Y+35, r24	; 0x23
    234c:	9c a3       	std	Y+36, r25	; 0x24
    234e:	ad a3       	std	Y+37, r26	; 0x25
    2350:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2352:	6b a1       	ldd	r22, Y+35	; 0x23
    2354:	7c a1       	ldd	r23, Y+36	; 0x24
    2356:	8d a1       	ldd	r24, Y+37	; 0x25
    2358:	9e a1       	ldd	r25, Y+38	; 0x26
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e8       	ldi	r20, 0x80	; 128
    2360:	5f e3       	ldi	r21, 0x3F	; 63
    2362:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2366:	88 23       	and	r24, r24
    2368:	2c f4       	brge	.+10     	; 0x2374 <LCD_voidSendChar+0x98>
		__ticks = 1;
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	9a a3       	std	Y+34, r25	; 0x22
    2370:	89 a3       	std	Y+33, r24	; 0x21
    2372:	3f c0       	rjmp	.+126    	; 0x23f2 <LCD_voidSendChar+0x116>
	else if (__tmp > 65535)
    2374:	6b a1       	ldd	r22, Y+35	; 0x23
    2376:	7c a1       	ldd	r23, Y+36	; 0x24
    2378:	8d a1       	ldd	r24, Y+37	; 0x25
    237a:	9e a1       	ldd	r25, Y+38	; 0x26
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	3f ef       	ldi	r19, 0xFF	; 255
    2380:	4f e7       	ldi	r20, 0x7F	; 127
    2382:	57 e4       	ldi	r21, 0x47	; 71
    2384:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2388:	18 16       	cp	r1, r24
    238a:	4c f5       	brge	.+82     	; 0x23de <LCD_voidSendChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238c:	6f a1       	ldd	r22, Y+39	; 0x27
    238e:	78 a5       	ldd	r23, Y+40	; 0x28
    2390:	89 a5       	ldd	r24, Y+41	; 0x29
    2392:	9a a5       	ldd	r25, Y+42	; 0x2a
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e2       	ldi	r20, 0x20	; 32
    239a:	51 e4       	ldi	r21, 0x41	; 65
    239c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	bc 01       	movw	r22, r24
    23a6:	cd 01       	movw	r24, r26
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9a a3       	std	Y+34, r25	; 0x22
    23b2:	89 a3       	std	Y+33, r24	; 0x21
    23b4:	0f c0       	rjmp	.+30     	; 0x23d4 <LCD_voidSendChar+0xf8>
    23b6:	88 ec       	ldi	r24, 0xC8	; 200
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	98 a3       	std	Y+32, r25	; 0x20
    23bc:	8f 8f       	std	Y+31, r24	; 0x1f
    23be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23c0:	98 a1       	ldd	r25, Y+32	; 0x20
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <LCD_voidSendChar+0xe6>
    23c6:	98 a3       	std	Y+32, r25	; 0x20
    23c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ca:	89 a1       	ldd	r24, Y+33	; 0x21
    23cc:	9a a1       	ldd	r25, Y+34	; 0x22
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	9a a3       	std	Y+34, r25	; 0x22
    23d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d4:	89 a1       	ldd	r24, Y+33	; 0x21
    23d6:	9a a1       	ldd	r25, Y+34	; 0x22
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	69 f7       	brne	.-38     	; 0x23b6 <LCD_voidSendChar+0xda>
    23dc:	14 c0       	rjmp	.+40     	; 0x2406 <LCD_voidSendChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23de:	6b a1       	ldd	r22, Y+35	; 0x23
    23e0:	7c a1       	ldd	r23, Y+36	; 0x24
    23e2:	8d a1       	ldd	r24, Y+37	; 0x25
    23e4:	9e a1       	ldd	r25, Y+38	; 0x26
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	9a a3       	std	Y+34, r25	; 0x22
    23f0:	89 a3       	std	Y+33, r24	; 0x21
    23f2:	89 a1       	ldd	r24, Y+33	; 0x21
    23f4:	9a a1       	ldd	r25, Y+34	; 0x22
    23f6:	9e 8f       	std	Y+30, r25	; 0x1e
    23f8:	8d 8f       	std	Y+29, r24	; 0x1d
    23fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	f1 f7       	brne	.-4      	; 0x23fe <LCD_voidSendChar+0x122>
    2402:	9e 8f       	std	Y+30, r25	; 0x1e
    2404:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Wait for E to settle */
	_delay_ms(2);

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	62 e0       	ldi	r22, 0x02	; 2
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>

	/*Load the rest of the command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Data << 4);
    2410:	8b a5       	ldd	r24, Y+43	; 0x2b
    2412:	98 2f       	mov	r25, r24
    2414:	92 95       	swap	r25
    2416:	90 7f       	andi	r25, 0xF0	; 240
    2418:	83 e0       	ldi	r24, 0x03	; 3
    241a:	69 2f       	mov	r22, r25
    241c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <DIO_u8SetPortValue>

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	62 e0       	ldi	r22, 0x02	; 2
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	a0 e0       	ldi	r26, 0x00	; 0
    2430:	b0 e4       	ldi	r27, 0x40	; 64
    2432:	89 8f       	std	Y+25, r24	; 0x19
    2434:	9a 8f       	std	Y+26, r25	; 0x1a
    2436:	ab 8f       	std	Y+27, r26	; 0x1b
    2438:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243a:	69 8d       	ldd	r22, Y+25	; 0x19
    243c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    243e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2440:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	4a ef       	ldi	r20, 0xFA	; 250
    2448:	54 e4       	ldi	r21, 0x44	; 68
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	8d 8b       	std	Y+21, r24	; 0x15
    2454:	9e 8b       	std	Y+22, r25	; 0x16
    2456:	af 8b       	std	Y+23, r26	; 0x17
    2458:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    245a:	6d 89       	ldd	r22, Y+21	; 0x15
    245c:	7e 89       	ldd	r23, Y+22	; 0x16
    245e:	8f 89       	ldd	r24, Y+23	; 0x17
    2460:	98 8d       	ldd	r25, Y+24	; 0x18
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e8       	ldi	r20, 0x80	; 128
    2468:	5f e3       	ldi	r21, 0x3F	; 63
    246a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    246e:	88 23       	and	r24, r24
    2470:	2c f4       	brge	.+10     	; 0x247c <LCD_voidSendChar+0x1a0>
		__ticks = 1;
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	9c 8b       	std	Y+20, r25	; 0x14
    2478:	8b 8b       	std	Y+19, r24	; 0x13
    247a:	3f c0       	rjmp	.+126    	; 0x24fa <LCD_voidSendChar+0x21e>
	else if (__tmp > 65535)
    247c:	6d 89       	ldd	r22, Y+21	; 0x15
    247e:	7e 89       	ldd	r23, Y+22	; 0x16
    2480:	8f 89       	ldd	r24, Y+23	; 0x17
    2482:	98 8d       	ldd	r25, Y+24	; 0x18
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	3f ef       	ldi	r19, 0xFF	; 255
    2488:	4f e7       	ldi	r20, 0x7F	; 127
    248a:	57 e4       	ldi	r21, 0x47	; 71
    248c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2490:	18 16       	cp	r1, r24
    2492:	4c f5       	brge	.+82     	; 0x24e6 <LCD_voidSendChar+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2494:	69 8d       	ldd	r22, Y+25	; 0x19
    2496:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2498:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	40 e2       	ldi	r20, 0x20	; 32
    24a2:	51 e4       	ldi	r21, 0x41	; 65
    24a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	bc 01       	movw	r22, r24
    24ae:	cd 01       	movw	r24, r26
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	9c 8b       	std	Y+20, r25	; 0x14
    24ba:	8b 8b       	std	Y+19, r24	; 0x13
    24bc:	0f c0       	rjmp	.+30     	; 0x24dc <LCD_voidSendChar+0x200>
    24be:	88 ec       	ldi	r24, 0xC8	; 200
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	9a 8b       	std	Y+18, r25	; 0x12
    24c4:	89 8b       	std	Y+17, r24	; 0x11
    24c6:	89 89       	ldd	r24, Y+17	; 0x11
    24c8:	9a 89       	ldd	r25, Y+18	; 0x12
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <LCD_voidSendChar+0x1ee>
    24ce:	9a 8b       	std	Y+18, r25	; 0x12
    24d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d2:	8b 89       	ldd	r24, Y+19	; 0x13
    24d4:	9c 89       	ldd	r25, Y+20	; 0x14
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	9c 8b       	std	Y+20, r25	; 0x14
    24da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24dc:	8b 89       	ldd	r24, Y+19	; 0x13
    24de:	9c 89       	ldd	r25, Y+20	; 0x14
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	69 f7       	brne	.-38     	; 0x24be <LCD_voidSendChar+0x1e2>
    24e4:	14 c0       	rjmp	.+40     	; 0x250e <LCD_voidSendChar+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e6:	6d 89       	ldd	r22, Y+21	; 0x15
    24e8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ea:	8f 89       	ldd	r24, Y+23	; 0x17
    24ec:	98 8d       	ldd	r25, Y+24	; 0x18
    24ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9c 8b       	std	Y+20, r25	; 0x14
    24f8:	8b 8b       	std	Y+19, r24	; 0x13
    24fa:	8b 89       	ldd	r24, Y+19	; 0x13
    24fc:	9c 89       	ldd	r25, Y+20	; 0x14
    24fe:	98 8b       	std	Y+16, r25	; 0x10
    2500:	8f 87       	std	Y+15, r24	; 0x0f
    2502:	8f 85       	ldd	r24, Y+15	; 0x0f
    2504:	98 89       	ldd	r25, Y+16	; 0x10
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	f1 f7       	brne	.-4      	; 0x2506 <LCD_voidSendChar+0x22a>
    250a:	98 8b       	std	Y+16, r25	; 0x10
    250c:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(2);

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	62 e0       	ldi	r22, 0x02	; 2
    2512:	41 e0       	ldi	r20, 0x01	; 1
    2514:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_u8SetPinValue>
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	a0 e0       	ldi	r26, 0x00	; 0
    251e:	b0 e4       	ldi	r27, 0x40	; 64
    2520:	8b 87       	std	Y+11, r24	; 0x0b
    2522:	9c 87       	std	Y+12, r25	; 0x0c
    2524:	ad 87       	std	Y+13, r26	; 0x0d
    2526:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2528:	6b 85       	ldd	r22, Y+11	; 0x0b
    252a:	7c 85       	ldd	r23, Y+12	; 0x0c
    252c:	8d 85       	ldd	r24, Y+13	; 0x0d
    252e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	4a ef       	ldi	r20, 0xFA	; 250
    2536:	54 e4       	ldi	r21, 0x44	; 68
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	8f 83       	std	Y+7, r24	; 0x07
    2542:	98 87       	std	Y+8, r25	; 0x08
    2544:	a9 87       	std	Y+9, r26	; 0x09
    2546:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2548:	6f 81       	ldd	r22, Y+7	; 0x07
    254a:	78 85       	ldd	r23, Y+8	; 0x08
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e8       	ldi	r20, 0x80	; 128
    2556:	5f e3       	ldi	r21, 0x3F	; 63
    2558:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    255c:	88 23       	and	r24, r24
    255e:	2c f4       	brge	.+10     	; 0x256a <LCD_voidSendChar+0x28e>
		__ticks = 1;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	9e 83       	std	Y+6, r25	; 0x06
    2566:	8d 83       	std	Y+5, r24	; 0x05
    2568:	3f c0       	rjmp	.+126    	; 0x25e8 <LCD_voidSendChar+0x30c>
	else if (__tmp > 65535)
    256a:	6f 81       	ldd	r22, Y+7	; 0x07
    256c:	78 85       	ldd	r23, Y+8	; 0x08
    256e:	89 85       	ldd	r24, Y+9	; 0x09
    2570:	9a 85       	ldd	r25, Y+10	; 0x0a
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	4f e7       	ldi	r20, 0x7F	; 127
    2578:	57 e4       	ldi	r21, 0x47	; 71
    257a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    257e:	18 16       	cp	r1, r24
    2580:	4c f5       	brge	.+82     	; 0x25d4 <LCD_voidSendChar+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2582:	6b 85       	ldd	r22, Y+11	; 0x0b
    2584:	7c 85       	ldd	r23, Y+12	; 0x0c
    2586:	8d 85       	ldd	r24, Y+13	; 0x0d
    2588:	9e 85       	ldd	r25, Y+14	; 0x0e
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 e2       	ldi	r20, 0x20	; 32
    2590:	51 e4       	ldi	r21, 0x41	; 65
    2592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	bc 01       	movw	r22, r24
    259c:	cd 01       	movw	r24, r26
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9e 83       	std	Y+6, r25	; 0x06
    25a8:	8d 83       	std	Y+5, r24	; 0x05
    25aa:	0f c0       	rjmp	.+30     	; 0x25ca <LCD_voidSendChar+0x2ee>
    25ac:	88 ec       	ldi	r24, 0xC8	; 200
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	9c 83       	std	Y+4, r25	; 0x04
    25b2:	8b 83       	std	Y+3, r24	; 0x03
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	9c 81       	ldd	r25, Y+4	; 0x04
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <LCD_voidSendChar+0x2dc>
    25bc:	9c 83       	std	Y+4, r25	; 0x04
    25be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c0:	8d 81       	ldd	r24, Y+5	; 0x05
    25c2:	9e 81       	ldd	r25, Y+6	; 0x06
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	9e 83       	std	Y+6, r25	; 0x06
    25c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ca:	8d 81       	ldd	r24, Y+5	; 0x05
    25cc:	9e 81       	ldd	r25, Y+6	; 0x06
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	69 f7       	brne	.-38     	; 0x25ac <LCD_voidSendChar+0x2d0>
    25d2:	14 c0       	rjmp	.+40     	; 0x25fc <LCD_voidSendChar+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d4:	6f 81       	ldd	r22, Y+7	; 0x07
    25d6:	78 85       	ldd	r23, Y+8	; 0x08
    25d8:	89 85       	ldd	r24, Y+9	; 0x09
    25da:	9a 85       	ldd	r25, Y+10	; 0x0a
    25dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	9e 83       	std	Y+6, r25	; 0x06
    25e6:	8d 83       	std	Y+5, r24	; 0x05
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	9e 81       	ldd	r25, Y+6	; 0x06
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	9a 81       	ldd	r25, Y+2	; 0x02
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <LCD_voidSendChar+0x318>
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
	/* Delay to let the LCD Display the character */
	_delay_ms(2);

#endif

}
    25fc:	ab 96       	adiw	r28, 0x2b	; 43
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <LCD_voidSendString>:
/***************************************************************************************/
/* Description! Interface to write string on LCD screen                                */
/* Input      ! Pointer to the string                                                  */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendString(u8 *Copy_pu8String) {
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <LCD_voidSendString+0x6>
    2614:	0f 92       	push	r0
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	9b 83       	std	Y+3, r25	; 0x03
    261c:	8a 83       	std	Y+2, r24	; 0x02

	//	/* Local loop index */
	//	u8 u8Index = 0;
	u8 iteration = 0;
    261e:	19 82       	std	Y+1, r1	; 0x01
	//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration = 0; Copy_pu8String[iteration] != '\0'; iteration++) {
    2620:	19 82       	std	Y+1, r1	; 0x01
    2622:	0e c0       	rjmp	.+28     	; 0x2640 <LCD_voidSendString+0x32>
		/* Write Character on LCD */
		LCD_voidSendChar(Copy_pu8String[iteration]);
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	28 2f       	mov	r18, r24
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	8a 81       	ldd	r24, Y+2	; 0x02
    262c:	9b 81       	ldd	r25, Y+3	; 0x03
    262e:	fc 01       	movw	r30, r24
    2630:	e2 0f       	add	r30, r18
    2632:	f3 1f       	adc	r31, r19
    2634:	80 81       	ld	r24, Z
    2636:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_voidSendChar>

	//	/* Local loop index */
	//	u8 u8Index = 0;
	u8 iteration = 0;
	//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration = 0; Copy_pu8String[iteration] != '\0'; iteration++) {
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	8f 5f       	subi	r24, 0xFF	; 255
    263e:	89 83       	std	Y+1, r24	; 0x01
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	28 2f       	mov	r18, r24
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	9b 81       	ldd	r25, Y+3	; 0x03
    264a:	fc 01       	movw	r30, r24
    264c:	e2 0f       	add	r30, r18
    264e:	f3 1f       	adc	r31, r19
    2650:	80 81       	ld	r24, Z
    2652:	88 23       	and	r24, r24
    2654:	39 f7       	brne	.-50     	; 0x2624 <LCD_voidSendString+0x16>
		LCD_voidSendChar(Copy_pu8String[iteration]);

		//		/* Increment local loop index */
		//		u8Index++;
	}
}
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <LCD_voidSendIntger>:

void LCD_voidSendIntger(s32 Copy_s32Data) {
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	ac 97       	sbiw	r28, 0x2c	; 44
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	69 a7       	std	Y+41, r22	; 0x29
    2678:	7a a7       	std	Y+42, r23	; 0x2a
    267a:	8b a7       	std	Y+43, r24	; 0x2b
    267c:	9c a7       	std	Y+44, r25	; 0x2c
	u32 str[10];
	// Converts Int to String
	sprintf(str, "%ld", Copy_s32Data);
    267e:	ce 01       	movw	r24, r28
    2680:	01 96       	adiw	r24, 0x01	; 1
    2682:	2d b7       	in	r18, 0x3d	; 61
    2684:	3e b7       	in	r19, 0x3e	; 62
    2686:	28 50       	subi	r18, 0x08	; 8
    2688:	30 40       	sbci	r19, 0x00	; 0
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	3e bf       	out	0x3e, r19	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	2d bf       	out	0x3d, r18	; 61
    2694:	ed b7       	in	r30, 0x3d	; 61
    2696:	fe b7       	in	r31, 0x3e	; 62
    2698:	31 96       	adiw	r30, 0x01	; 1
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	80 83       	st	Z, r24
    269e:	80 e6       	ldi	r24, 0x60	; 96
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	93 83       	std	Z+3, r25	; 0x03
    26a4:	82 83       	std	Z+2, r24	; 0x02
    26a6:	89 a5       	ldd	r24, Y+41	; 0x29
    26a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26aa:	ab a5       	ldd	r26, Y+43	; 0x2b
    26ac:	bc a5       	ldd	r27, Y+44	; 0x2c
    26ae:	84 83       	std	Z+4, r24	; 0x04
    26b0:	95 83       	std	Z+5, r25	; 0x05
    26b2:	a6 83       	std	Z+6, r26	; 0x06
    26b4:	b7 83       	std	Z+7, r27	; 0x07
    26b6:	0e 94 64 18 	call	0x30c8	; 0x30c8 <sprintf>
    26ba:	8d b7       	in	r24, 0x3d	; 61
    26bc:	9e b7       	in	r25, 0x3e	; 62
    26be:	08 96       	adiw	r24, 0x08	; 8
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	9e bf       	out	0x3e, r25	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	8d bf       	out	0x3d, r24	; 61
	LCD_voidSendString(str);
    26ca:	ce 01       	movw	r24, r28
    26cc:	01 96       	adiw	r24, 0x01	; 1
    26ce:	0e 94 07 13 	call	0x260e	; 0x260e <LCD_voidSendString>
}
    26d2:	ac 96       	adiw	r28, 0x2c	; 44
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <LCD_voidSendFloat>:

void LCD_voidSendFloat(f64 Copy_f32Data) {
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	2c 97       	sbiw	r28, 0x0c	; 12
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	f8 94       	cli
    26f2:	de bf       	out	0x3e, r29	; 62
    26f4:	0f be       	out	0x3f, r0	; 63
    26f6:	cd bf       	out	0x3d, r28	; 61
    26f8:	69 87       	std	Y+9, r22	; 0x09
    26fa:	7a 87       	std	Y+10, r23	; 0x0a
    26fc:	8b 87       	std	Y+11, r24	; 0x0b
    26fe:	9c 87       	std	Y+12, r25	; 0x0c
	s32 int_part;
	f32 frac_part;
	// separate integer and fractional parts
	int_part = (s32) Copy_f32Data;
    2700:	69 85       	ldd	r22, Y+9	; 0x09
    2702:	7a 85       	ldd	r23, Y+10	; 0x0a
    2704:	8b 85       	ldd	r24, Y+11	; 0x0b
    2706:	9c 85       	ldd	r25, Y+12	; 0x0c
    2708:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	8d 83       	std	Y+5, r24	; 0x05
    2712:	9e 83       	std	Y+6, r25	; 0x06
    2714:	af 83       	std	Y+7, r26	; 0x07
    2716:	b8 87       	std	Y+8, r27	; 0x08
	frac_part = Copy_f32Data - int_part;
    2718:	6d 81       	ldd	r22, Y+5	; 0x05
    271a:	7e 81       	ldd	r23, Y+6	; 0x06
    271c:	8f 81       	ldd	r24, Y+7	; 0x07
    271e:	98 85       	ldd	r25, Y+8	; 0x08
    2720:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2724:	9b 01       	movw	r18, r22
    2726:	ac 01       	movw	r20, r24
    2728:	69 85       	ldd	r22, Y+9	; 0x09
    272a:	7a 85       	ldd	r23, Y+10	; 0x0a
    272c:	8b 85       	ldd	r24, Y+11	; 0x0b
    272e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2730:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	89 83       	std	Y+1, r24	; 0x01
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	ab 83       	std	Y+3, r26	; 0x03
    273e:	bc 83       	std	Y+4, r27	; 0x04
	frac_part = (s32) (frac_part * 1000);
    2740:	69 81       	ldd	r22, Y+1	; 0x01
    2742:	7a 81       	ldd	r23, Y+2	; 0x02
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	9c 81       	ldd	r25, Y+4	; 0x04
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	4a e7       	ldi	r20, 0x7A	; 122
    274e:	54 e4       	ldi	r21, 0x44	; 68
    2750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	89 83       	std	Y+1, r24	; 0x01
    2772:	9a 83       	std	Y+2, r25	; 0x02
    2774:	ab 83       	std	Y+3, r26	; 0x03
    2776:	bc 83       	std	Y+4, r27	; 0x04
	LCD_voidSendIntger(int_part);
    2778:	8d 81       	ldd	r24, Y+5	; 0x05
    277a:	9e 81       	ldd	r25, Y+6	; 0x06
    277c:	af 81       	ldd	r26, Y+7	; 0x07
    277e:	b8 85       	ldd	r27, Y+8	; 0x08
    2780:	bc 01       	movw	r22, r24
    2782:	cd 01       	movw	r24, r26
    2784:	0e 94 31 13 	call	0x2662	; 0x2662 <LCD_voidSendIntger>
	LCD_voidSendChar('.');
    2788:	8e e2       	ldi	r24, 0x2E	; 46
    278a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_voidSendChar>
	LCD_voidSendIntger(frac_part);
    278e:	69 81       	ldd	r22, Y+1	; 0x01
    2790:	7a 81       	ldd	r23, Y+2	; 0x02
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	bc 01       	movw	r22, r24
    27a0:	cd 01       	movw	r24, r26
    27a2:	0e 94 31 13 	call	0x2662	; 0x2662 <LCD_voidSendIntger>
}
    27a6:	2c 96       	adiw	r28, 0x0c	; 12
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <LCD_voidGotoxy>:
/***************************************************************************************/
/* Description! Interface to start the writing process at certain digit in the LCD     */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidGotoxy(u8 Copy_u8Y, u8 Copy_u8X) {
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	00 d0       	rcall	.+0      	; 0x27be <LCD_voidGotoxy+0x6>
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <LCD_voidGotoxy+0x8>
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8X > 0 && Copy_u8X <= 16) {
    27c8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ca:	88 23       	and	r24, r24
    27cc:	e1 f0       	breq	.+56     	; 0x2806 <LCD_voidGotoxy+0x4e>
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	81 31       	cpi	r24, 0x11	; 17
    27d2:	c8 f4       	brcc	.+50     	; 0x2806 <LCD_voidGotoxy+0x4e>
		switch (Copy_u8Y) {
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	28 2f       	mov	r18, r24
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	3c 83       	std	Y+4, r19	; 0x04
    27dc:	2b 83       	std	Y+3, r18	; 0x03
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	9c 81       	ldd	r25, Y+4	; 0x04
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	91 05       	cpc	r25, r1
    27e6:	31 f0       	breq	.+12     	; 0x27f4 <LCD_voidGotoxy+0x3c>
    27e8:	2b 81       	ldd	r18, Y+3	; 0x03
    27ea:	3c 81       	ldd	r19, Y+4	; 0x04
    27ec:	22 30       	cpi	r18, 0x02	; 2
    27ee:	31 05       	cpc	r19, r1
    27f0:	31 f0       	breq	.+12     	; 0x27fe <LCD_voidGotoxy+0x46>
    27f2:	09 c0       	rjmp	.+18     	; 0x2806 <LCD_voidGotoxy+0x4e>
		case 1:
			LCD_voidSendCmnd(Copy_u8X + 127);
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	81 58       	subi	r24, 0x81	; 129
    27f8:	0e 94 4c 10 	call	0x2098	; 0x2098 <LCD_voidSendCmnd>
    27fc:	04 c0       	rjmp	.+8      	; 0x2806 <LCD_voidGotoxy+0x4e>
			break;
		case 2:
			LCD_voidSendCmnd(Copy_u8X + 191);
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2800:	81 54       	subi	r24, 0x41	; 65
    2802:	0e 94 4c 10 	call	0x2098	; 0x2098 <LCD_voidSendCmnd>
			break;
		default:
			break;
		}
	}
}
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <LCD_voidSendExtraChar>:
/***************************************************************************************/
/* Description! Interface to write extra characters saved in the CGRAM                 */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendExtraChar(u8 Copy_u8Y, u8 Copy_u8X) {
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	62 97       	sbiw	r28, 0x12	; 18
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	89 8b       	std	Y+17, r24	; 0x11
    282a:	6a 8b       	std	Y+18, r22	; 0x12
	u8 iteration1, iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCmnd(64);
    282c:	80 e4       	ldi	r24, 0x40	; 64
    282e:	0e 94 4c 10 	call	0x2098	; 0x2098 <LCD_voidSendCmnd>
	for (iteration1 = 0; iteration1 < 64; iteration1++) {
    2832:	18 8a       	std	Y+16, r1	; 0x10
    2834:	0c c0       	rjmp	.+24     	; 0x284e <LCD_voidSendExtraChar+0x3a>
		LCD_voidSendChar(ExtraChar[iteration1]);
    2836:	88 89       	ldd	r24, Y+16	; 0x10
    2838:	88 2f       	mov	r24, r24
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	fc 01       	movw	r30, r24
    283e:	e0 56       	subi	r30, 0x60	; 96
    2840:	fe 4f       	sbci	r31, 0xFE	; 254
    2842:	80 81       	ld	r24, Z
    2844:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_voidSendChar>
void LCD_voidSendExtraChar(u8 Copy_u8Y, u8 Copy_u8X) {
	u8 iteration1, iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCmnd(64);
	for (iteration1 = 0; iteration1 < 64; iteration1++) {
    2848:	88 89       	ldd	r24, Y+16	; 0x10
    284a:	8f 5f       	subi	r24, 0xFF	; 255
    284c:	88 8b       	std	Y+16, r24	; 0x10
    284e:	88 89       	ldd	r24, Y+16	; 0x10
    2850:	80 34       	cpi	r24, 0x40	; 64
    2852:	88 f3       	brcs	.-30     	; 0x2836 <LCD_voidSendExtraChar+0x22>
		LCD_voidSendChar(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_voidSendCmnd(128);
    2854:	80 e8       	ldi	r24, 0x80	; 128
    2856:	0e 94 4c 10 	call	0x2098	; 0x2098 <LCD_voidSendCmnd>
	LCD_voidGotoxy(Copy_u8Y, Copy_u8X);
    285a:	89 89       	ldd	r24, Y+17	; 0x11
    285c:	6a 89       	ldd	r22, Y+18	; 0x12
    285e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_voidGotoxy>
	/*First eight character which saved at CGRAM*/
	for (iteration2 = 0; iteration2 <= 7; iteration2++) {
    2862:	1f 86       	std	Y+15, r1	; 0x0f
    2864:	78 c0       	rjmp	.+240    	; 0x2956 <LCD_voidSendExtraChar+0x142>
		/* Write bytes of DDRAM */
		LCD_voidSendChar(iteration2);
    2866:	8f 85       	ldd	r24, Y+15	; 0x0f
    2868:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_voidSendChar>
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	a0 ea       	ldi	r26, 0xA0	; 160
    2872:	b0 e4       	ldi	r27, 0x40	; 64
    2874:	8b 87       	std	Y+11, r24	; 0x0b
    2876:	9c 87       	std	Y+12, r25	; 0x0c
    2878:	ad 87       	std	Y+13, r26	; 0x0d
    287a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287c:	6b 85       	ldd	r22, Y+11	; 0x0b
    287e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2880:	8d 85       	ldd	r24, Y+13	; 0x0d
    2882:	9e 85       	ldd	r25, Y+14	; 0x0e
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	4a ef       	ldi	r20, 0xFA	; 250
    288a:	54 e4       	ldi	r21, 0x44	; 68
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	8f 83       	std	Y+7, r24	; 0x07
    2896:	98 87       	std	Y+8, r25	; 0x08
    2898:	a9 87       	std	Y+9, r26	; 0x09
    289a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    289c:	6f 81       	ldd	r22, Y+7	; 0x07
    289e:	78 85       	ldd	r23, Y+8	; 0x08
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e8       	ldi	r20, 0x80	; 128
    28aa:	5f e3       	ldi	r21, 0x3F	; 63
    28ac:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    28b0:	88 23       	and	r24, r24
    28b2:	2c f4       	brge	.+10     	; 0x28be <LCD_voidSendExtraChar+0xaa>
		__ticks = 1;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9e 83       	std	Y+6, r25	; 0x06
    28ba:	8d 83       	std	Y+5, r24	; 0x05
    28bc:	3f c0       	rjmp	.+126    	; 0x293c <LCD_voidSendExtraChar+0x128>
	else if (__tmp > 65535)
    28be:	6f 81       	ldd	r22, Y+7	; 0x07
    28c0:	78 85       	ldd	r23, Y+8	; 0x08
    28c2:	89 85       	ldd	r24, Y+9	; 0x09
    28c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	3f ef       	ldi	r19, 0xFF	; 255
    28ca:	4f e7       	ldi	r20, 0x7F	; 127
    28cc:	57 e4       	ldi	r21, 0x47	; 71
    28ce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    28d2:	18 16       	cp	r1, r24
    28d4:	4c f5       	brge	.+82     	; 0x2928 <LCD_voidSendExtraChar+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28da:	8d 85       	ldd	r24, Y+13	; 0x0d
    28dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	40 e2       	ldi	r20, 0x20	; 32
    28e4:	51 e4       	ldi	r21, 0x41	; 65
    28e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	9e 83       	std	Y+6, r25	; 0x06
    28fc:	8d 83       	std	Y+5, r24	; 0x05
    28fe:	0f c0       	rjmp	.+30     	; 0x291e <LCD_voidSendExtraChar+0x10a>
    2900:	88 ec       	ldi	r24, 0xC8	; 200
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	9c 83       	std	Y+4, r25	; 0x04
    2906:	8b 83       	std	Y+3, r24	; 0x03
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	9c 81       	ldd	r25, Y+4	; 0x04
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <LCD_voidSendExtraChar+0xf8>
    2910:	9c 83       	std	Y+4, r25	; 0x04
    2912:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2914:	8d 81       	ldd	r24, Y+5	; 0x05
    2916:	9e 81       	ldd	r25, Y+6	; 0x06
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	9e 83       	std	Y+6, r25	; 0x06
    291c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	9e 81       	ldd	r25, Y+6	; 0x06
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	69 f7       	brne	.-38     	; 0x2900 <LCD_voidSendExtraChar+0xec>
    2926:	14 c0       	rjmp	.+40     	; 0x2950 <LCD_voidSendExtraChar+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2928:	6f 81       	ldd	r22, Y+7	; 0x07
    292a:	78 85       	ldd	r23, Y+8	; 0x08
    292c:	89 85       	ldd	r24, Y+9	; 0x09
    292e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9e 83       	std	Y+6, r25	; 0x06
    293a:	8d 83       	std	Y+5, r24	; 0x05
    293c:	8d 81       	ldd	r24, Y+5	; 0x05
    293e:	9e 81       	ldd	r25, Y+6	; 0x06
    2940:	9a 83       	std	Y+2, r25	; 0x02
    2942:	89 83       	std	Y+1, r24	; 0x01
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	9a 81       	ldd	r25, Y+2	; 0x02
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <LCD_voidSendExtraChar+0x134>
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_voidSendCmnd(128);
	LCD_voidGotoxy(Copy_u8Y, Copy_u8X);
	/*First eight character which saved at CGRAM*/
	for (iteration2 = 0; iteration2 <= 7; iteration2++) {
    2950:	8f 85       	ldd	r24, Y+15	; 0x0f
    2952:	8f 5f       	subi	r24, 0xFF	; 255
    2954:	8f 87       	std	Y+15, r24	; 0x0f
    2956:	8f 85       	ldd	r24, Y+15	; 0x0f
    2958:	88 30       	cpi	r24, 0x08	; 8
    295a:	08 f4       	brcc	.+2      	; 0x295e <LCD_voidSendExtraChar+0x14a>
    295c:	84 cf       	rjmp	.-248    	; 0x2866 <LCD_voidSendExtraChar+0x52>
		/* Write bytes of DDRAM */
		LCD_voidSendChar(iteration2);

		_delay_ms(5);
	}
}
    295e:	62 96       	adiw	r28, 0x12	; 18
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <LCD_voidWriteSpecialCharacter>:

/*  New */
void LCD_voidWriteSpecialCharacter(u8 *Copy_pu8Pattern, u8 Copy_u8PatternNumber,
		u8 Copy_u8XPos, u8 Copy_u8YPos) {
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	27 97       	sbiw	r28, 0x07	; 7
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	9c 83       	std	Y+4, r25	; 0x04
    2986:	8b 83       	std	Y+3, r24	; 0x03
    2988:	6d 83       	std	Y+5, r22	; 0x05
    298a:	4e 83       	std	Y+6, r20	; 0x06
    298c:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address, Local_u8PatternCounter;

	/*1- Calculate the required address of CGRAM*/
	Local_u8Address = Copy_u8PatternNumber * 8;
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	88 2f       	mov	r24, r24
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	88 0f       	add	r24, r24
    2996:	99 1f       	adc	r25, r25
    2998:	88 0f       	add	r24, r24
    299a:	99 1f       	adc	r25, r25
    299c:	88 0f       	add	r24, r24
    299e:	99 1f       	adc	r25, r25
    29a0:	8a 83       	std	Y+2, r24	; 0x02

	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);
    29a2:	8a 81       	ldd	r24, Y+2	; 0x02
    29a4:	80 5c       	subi	r24, 0xC0	; 192
    29a6:	0e 94 4c 10 	call	0x2098	; 0x2098 <LCD_voidSendCmnd>

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
    29aa:	19 82       	std	Y+1, r1	; 0x01
    29ac:	0e c0       	rjmp	.+28     	; 0x29ca <LCD_voidWriteSpecialCharacter+0x5a>
			Local_u8PatternCounter++) {
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8PatternCounter]);
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	8b 81       	ldd	r24, Y+3	; 0x03
    29b6:	9c 81       	ldd	r25, Y+4	; 0x04
    29b8:	fc 01       	movw	r30, r24
    29ba:	e2 0f       	add	r30, r18
    29bc:	f3 1f       	adc	r31, r19
    29be:	80 81       	ld	r24, Z
    29c0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_voidSendChar>
	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
			Local_u8PatternCounter++) {
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	8f 5f       	subi	r24, 0xFF	; 255
    29c8:	89 83       	std	Y+1, r24	; 0x01

	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
    29cc:	88 30       	cpi	r24, 0x08	; 8
    29ce:	78 f3       	brcs	.-34     	; 0x29ae <LCD_voidWriteSpecialCharacter+0x3e>
			Local_u8PatternCounter++) {
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8PatternCounter]);
	}

	/*4- shift the address counter to the DDRAM*/
	LCD_voidGotoxy(Copy_u8XPos, Copy_u8YPos);
    29d0:	8e 81       	ldd	r24, Y+6	; 0x06
    29d2:	6f 81       	ldd	r22, Y+7	; 0x07
    29d4:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_voidGotoxy>

	/*5- Display the CGRAM pattern on the LCD*/
	LCD_voidSendChar(Copy_u8PatternNumber);
    29d8:	8d 81       	ldd	r24, Y+5	; 0x05
    29da:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_voidSendChar>

}
    29de:	27 96       	adiw	r28, 0x07	; 7
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <main>:

/* functions declaration */
f64 evaluate(u8 *buffer);

/* main */
int main(void) {
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	cb 56       	subi	r28, 0x6B	; 107
    29fa:	d0 40       	sbci	r29, 0x00	; 0
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	f8 94       	cli
    2a00:	de bf       	out	0x3e, r29	; 62
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    2a06:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_voidInit>
	LCD_voidInit();
    2a0a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <LCD_voidInit>

	u8 key, flagClear = 0, buffer_position = 0;
    2a0e:	1e 82       	std	Y+6, r1	; 0x06
    2a10:	1d 82       	std	Y+5, r1	; 0x05

	u8 buffer[MAX_buffer_LENGTH]; //array to store the whole buffer

	while (1) {

		KPD_u8GetKeyState(&key);
    2a12:	ce 01       	movw	r24, r28
    2a14:	07 96       	adiw	r24, 0x07	; 7
    2a16:	0e 94 15 0c 	call	0x182a	; 0x182a <KPD_u8GetKeyState>
		if (key != KPD_u8_KEY_NOT_PRESSED
    2a1a:	8f 81       	ldd	r24, Y+7	; 0x07
    2a1c:	8f 3f       	cpi	r24, 0xFF	; 255
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <main+0x32>
    2a20:	45 c0       	rjmp	.+138    	; 0x2aac <main+0xbc>
    2a22:	8f 81       	ldd	r24, Y+7	; 0x07
    2a24:	81 33       	cpi	r24, 0x31	; 49
    2a26:	39 f1       	breq	.+78     	; 0x2a76 <main+0x86>
    2a28:	8f 81       	ldd	r24, Y+7	; 0x07
    2a2a:	82 33       	cpi	r24, 0x32	; 50
    2a2c:	21 f1       	breq	.+72     	; 0x2a76 <main+0x86>
    2a2e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a30:	83 33       	cpi	r24, 0x33	; 51
    2a32:	09 f1       	breq	.+66     	; 0x2a76 <main+0x86>
    2a34:	8f 81       	ldd	r24, Y+7	; 0x07
    2a36:	84 33       	cpi	r24, 0x34	; 52
    2a38:	f1 f0       	breq	.+60     	; 0x2a76 <main+0x86>
    2a3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2a3c:	85 33       	cpi	r24, 0x35	; 53
    2a3e:	d9 f0       	breq	.+54     	; 0x2a76 <main+0x86>
    2a40:	8f 81       	ldd	r24, Y+7	; 0x07
    2a42:	86 33       	cpi	r24, 0x36	; 54
    2a44:	c1 f0       	breq	.+48     	; 0x2a76 <main+0x86>
    2a46:	8f 81       	ldd	r24, Y+7	; 0x07
    2a48:	87 33       	cpi	r24, 0x37	; 55
    2a4a:	a9 f0       	breq	.+42     	; 0x2a76 <main+0x86>
    2a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a4e:	88 33       	cpi	r24, 0x38	; 56
    2a50:	91 f0       	breq	.+36     	; 0x2a76 <main+0x86>
    2a52:	8f 81       	ldd	r24, Y+7	; 0x07
    2a54:	89 33       	cpi	r24, 0x39	; 57
    2a56:	79 f0       	breq	.+30     	; 0x2a76 <main+0x86>
    2a58:	8f 81       	ldd	r24, Y+7	; 0x07
    2a5a:	80 33       	cpi	r24, 0x30	; 48
    2a5c:	61 f0       	breq	.+24     	; 0x2a76 <main+0x86>
    2a5e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a60:	8b 32       	cpi	r24, 0x2B	; 43
    2a62:	49 f0       	breq	.+18     	; 0x2a76 <main+0x86>
    2a64:	8f 81       	ldd	r24, Y+7	; 0x07
    2a66:	8d 32       	cpi	r24, 0x2D	; 45
    2a68:	31 f0       	breq	.+12     	; 0x2a76 <main+0x86>
    2a6a:	8f 81       	ldd	r24, Y+7	; 0x07
    2a6c:	8a 32       	cpi	r24, 0x2A	; 42
    2a6e:	19 f0       	breq	.+6      	; 0x2a76 <main+0x86>
    2a70:	8f 81       	ldd	r24, Y+7	; 0x07
    2a72:	8f 32       	cpi	r24, 0x2F	; 47
    2a74:	d9 f4       	brne	.+54     	; 0x2aac <main+0xbc>
				&& (key == '1' || key == '2' || key == '3' || key == '4'
						|| key == '5' || key == '6' || key == '7' || key == '8'
						|| key == '9' || key == '0' || key == '+' || key == '-'
						|| key == '*' || key == '/')) {

			if (flagClear == 1) {//clearing the LCD
    2a76:	8e 81       	ldd	r24, Y+6	; 0x06
    2a78:	81 30       	cpi	r24, 0x01	; 1
    2a7a:	21 f4       	brne	.+8      	; 0x2a84 <main+0x94>
				LCD_voidSendCmnd(LCD_CLEAR);
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	0e 94 4c 10 	call	0x2098	; 0x2098 <LCD_voidSendCmnd>
				flagClear = 0;
    2a82:	1e 82       	std	Y+6, r1	; 0x06
			}
			if (buffer_position < MAX_buffer_LENGTH - 1)//store the characters in the array
    2a84:	8d 81       	ldd	r24, Y+5	; 0x05
    2a86:	83 36       	cpi	r24, 0x63	; 99
    2a88:	68 f4       	brcc	.+26     	; 0x2aa4 <main+0xb4>
				buffer[buffer_position++] = key;
    2a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	4f 81       	ldd	r20, Y+7	; 0x07
    2a92:	ce 01       	movw	r24, r28
    2a94:	08 96       	adiw	r24, 0x08	; 8
    2a96:	fc 01       	movw	r30, r24
    2a98:	e2 0f       	add	r30, r18
    2a9a:	f3 1f       	adc	r31, r19
    2a9c:	40 83       	st	Z, r20
    2a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa0:	8f 5f       	subi	r24, 0xFF	; 255
    2aa2:	8d 83       	std	Y+5, r24	; 0x05

			LCD_voidSendChar(key);//printing every character
    2aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa6:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_voidSendChar>
    2aaa:	b3 cf       	rjmp	.-154    	; 0x2a12 <main+0x22>
		} else if (key == '=') {
    2aac:	8f 81       	ldd	r24, Y+7	; 0x07
    2aae:	8d 33       	cpi	r24, 0x3D	; 61
    2ab0:	09 f0       	breq	.+2      	; 0x2ab4 <main+0xc4>
    2ab2:	4c c0       	rjmp	.+152    	; 0x2b4c <main+0x15c>
			flagClear = 1;    //flag is up after every process
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	8e 83       	std	Y+6, r24	; 0x06
			buffer[buffer_position] = '\0'; // terminate the string
    2ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aba:	28 2f       	mov	r18, r24
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	ce 01       	movw	r24, r28
    2ac0:	08 96       	adiw	r24, 0x08	; 8
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	e2 0f       	add	r30, r18
    2ac6:	f3 1f       	adc	r31, r19
    2ac8:	10 82       	st	Z, r1
			f64 result = evaluate(buffer);//calling the evaluate function to calculate the buffer
    2aca:	ce 01       	movw	r24, r28
    2acc:	08 96       	adiw	r24, 0x08	; 8
    2ace:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <evaluate>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	9a 83       	std	Y+2, r25	; 0x02
    2ada:	ab 83       	std	Y+3, r26	; 0x03
    2adc:	bc 83       	std	Y+4, r27	; 0x04
			if (flagZero == 1) {//when divide by zero flag is up
    2ade:	80 91 a9 01 	lds	r24, 0x01A9
    2ae2:	81 30       	cpi	r24, 0x01	; 1
    2ae4:	59 f4       	brne	.+22     	; 0x2afc <main+0x10c>
				LCD_voidGotoxy(2, 1);
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	61 e0       	ldi	r22, 0x01	; 1
    2aea:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_voidGotoxy>
				LCD_voidSendString("error div by 0");
    2aee:	84 e6       	ldi	r24, 0x64	; 100
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	0e 94 07 13 	call	0x260e	; 0x260e <LCD_voidSendString>
				flagZero = 0;
    2af6:	10 92 a9 01 	sts	0x01A9, r1
    2afa:	1e c0       	rjmp	.+60     	; 0x2b38 <main+0x148>
			}else if (flagSyntax == 1) {//when divide by zero flag is up
    2afc:	80 91 aa 01 	lds	r24, 0x01AA
    2b00:	81 30       	cpi	r24, 0x01	; 1
    2b02:	59 f4       	brne	.+22     	; 0x2b1a <main+0x12a>
				LCD_voidGotoxy(2, 1);
    2b04:	82 e0       	ldi	r24, 0x02	; 2
    2b06:	61 e0       	ldi	r22, 0x01	; 1
    2b08:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_voidGotoxy>
				LCD_voidSendString("Syntax error");
    2b0c:	83 e7       	ldi	r24, 0x73	; 115
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	0e 94 07 13 	call	0x260e	; 0x260e <LCD_voidSendString>
				flagSyntax = 0;
    2b14:	10 92 aa 01 	sts	0x01AA, r1
    2b18:	0f c0       	rjmp	.+30     	; 0x2b38 <main+0x148>
			} else {
				LCD_voidGotoxy(2, 1);
    2b1a:	82 e0       	ldi	r24, 0x02	; 2
    2b1c:	61 e0       	ldi	r22, 0x01	; 1
    2b1e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_voidGotoxy>
				LCD_voidSendChar('=');
    2b22:	8d e3       	ldi	r24, 0x3D	; 61
    2b24:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_voidSendChar>
				LCD_voidSendFloat(result);
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2c:	ab 81       	ldd	r26, Y+3	; 0x03
    2b2e:	bc 81       	ldd	r27, Y+4	; 0x04
    2b30:	bc 01       	movw	r22, r24
    2b32:	cd 01       	movw	r24, r26
    2b34:	0e 94 72 13 	call	0x26e4	; 0x26e4 <LCD_voidSendFloat>
			}
			buffer_position = 0;
    2b38:	1d 82       	std	Y+5, r1	; 0x05
			memset(buffer, 0, sizeof(buffer));//to clear the buffer
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	08 96       	adiw	r24, 0x08	; 8
    2b3e:	60 e0       	ldi	r22, 0x00	; 0
    2b40:	70 e0       	ldi	r23, 0x00	; 0
    2b42:	44 e6       	ldi	r20, 0x64	; 100
    2b44:	50 e0       	ldi	r21, 0x00	; 0
    2b46:	0e 94 54 18 	call	0x30a8	; 0x30a8 <memset>
    2b4a:	63 cf       	rjmp	.-314    	; 0x2a12 <main+0x22>
		}
		else if (key == 'C') {//clearing the LCD
    2b4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b4e:	83 34       	cpi	r24, 0x43	; 67
    2b50:	09 f0       	breq	.+2      	; 0x2b54 <main+0x164>
    2b52:	5f cf       	rjmp	.-322    	; 0x2a12 <main+0x22>
			buffer_position = 0;
    2b54:	1d 82       	std	Y+5, r1	; 0x05
			memset(buffer, 0, sizeof(buffer));
    2b56:	ce 01       	movw	r24, r28
    2b58:	08 96       	adiw	r24, 0x08	; 8
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	44 e6       	ldi	r20, 0x64	; 100
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	0e 94 54 18 	call	0x30a8	; 0x30a8 <memset>
			LCD_voidSendCmnd(LCD_CLEAR);
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	0e 94 4c 10 	call	0x2098	; 0x2098 <LCD_voidSendCmnd>
    2b6c:	52 cf       	rjmp	.-348    	; 0x2a12 <main+0x22>

00002b6e <evaluate>:
		}
	};
	return 0;
}

f64 evaluate(u8 *buffer) {//6*5-1/9
    2b6e:	ef 92       	push	r14
    2b70:	ff 92       	push	r15
    2b72:	0f 93       	push	r16
    2b74:	1f 93       	push	r17
    2b76:	df 93       	push	r29
    2b78:	cf 93       	push	r28
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
    2b7e:	69 97       	sbiw	r28, 0x19	; 25
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
    2b84:	de bf       	out	0x3e, r29	; 62
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	cd bf       	out	0x3d, r28	; 61
    2b8a:	9d 8b       	std	Y+21, r25	; 0x15
    2b8c:	8c 8b       	std	Y+20, r24	; 0x14
    f64 result = 0.0f;
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	a0 e0       	ldi	r26, 0x00	; 0
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	88 8b       	std	Y+16, r24	; 0x10
    2b98:	99 8b       	std	Y+17, r25	; 0x11
    2b9a:	aa 8b       	std	Y+18, r26	; 0x12
    2b9c:	bb 8b       	std	Y+19, r27	; 0x13
    f32 num = 0.0f;
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	a0 e0       	ldi	r26, 0x00	; 0
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	8c 87       	std	Y+12, r24	; 0x0c
    2ba8:	9d 87       	std	Y+13, r25	; 0x0d
    2baa:	ae 87       	std	Y+14, r26	; 0x0e
    2bac:	bf 87       	std	Y+15, r27	; 0x0f
    s8 op = '+';
    2bae:	8b e2       	ldi	r24, 0x2B	; 43
    2bb0:	8b 87       	std	Y+11, r24	; 0x0b
    s16 length = strlen(buffer);
    2bb2:	8c 89       	ldd	r24, Y+20	; 0x14
    2bb4:	9d 89       	ldd	r25, Y+21	; 0x15
    2bb6:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <strlen>
    2bba:	9a 87       	std	Y+10, r25	; 0x0a
    2bbc:	89 87       	std	Y+9, r24	; 0x09
    s16 i = 0;
    2bbe:	18 86       	std	Y+8, r1	; 0x08
    2bc0:	1f 82       	std	Y+7, r1	; 0x07
    2bc2:	f4 c1       	rjmp	.+1000   	; 0x2fac <evaluate+0x43e>
    while (i < length) {
        if (buffer[i] >= '0' && buffer[i] <= '9') {
    2bc4:	2f 81       	ldd	r18, Y+7	; 0x07
    2bc6:	38 85       	ldd	r19, Y+8	; 0x08
    2bc8:	8c 89       	ldd	r24, Y+20	; 0x14
    2bca:	9d 89       	ldd	r25, Y+21	; 0x15
    2bcc:	fc 01       	movw	r30, r24
    2bce:	e2 0f       	add	r30, r18
    2bd0:	f3 1f       	adc	r31, r19
    2bd2:	80 81       	ld	r24, Z
    2bd4:	80 33       	cpi	r24, 0x30	; 48
    2bd6:	e8 f1       	brcs	.+122    	; 0x2c52 <evaluate+0xe4>
    2bd8:	2f 81       	ldd	r18, Y+7	; 0x07
    2bda:	38 85       	ldd	r19, Y+8	; 0x08
    2bdc:	8c 89       	ldd	r24, Y+20	; 0x14
    2bde:	9d 89       	ldd	r25, Y+21	; 0x15
    2be0:	fc 01       	movw	r30, r24
    2be2:	e2 0f       	add	r30, r18
    2be4:	f3 1f       	adc	r31, r19
    2be6:	80 81       	ld	r24, Z
    2be8:	8a 33       	cpi	r24, 0x3A	; 58
    2bea:	98 f5       	brcc	.+102    	; 0x2c52 <evaluate+0xe4>
            num = num * 10.0f + (buffer[i] - '0');
    2bec:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bee:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bf0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bf2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e2       	ldi	r20, 0x20	; 32
    2bfa:	51 e4       	ldi	r21, 0x41	; 65
    2bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	7c 01       	movw	r14, r24
    2c06:	8d 01       	movw	r16, r26
    2c08:	2f 81       	ldd	r18, Y+7	; 0x07
    2c0a:	38 85       	ldd	r19, Y+8	; 0x08
    2c0c:	8c 89       	ldd	r24, Y+20	; 0x14
    2c0e:	9d 89       	ldd	r25, Y+21	; 0x15
    2c10:	fc 01       	movw	r30, r24
    2c12:	e2 0f       	add	r30, r18
    2c14:	f3 1f       	adc	r31, r19
    2c16:	80 81       	ld	r24, Z
    2c18:	88 2f       	mov	r24, r24
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	c0 97       	sbiw	r24, 0x30	; 48
    2c1e:	aa 27       	eor	r26, r26
    2c20:	97 fd       	sbrc	r25, 7
    2c22:	a0 95       	com	r26
    2c24:	ba 2f       	mov	r27, r26
    2c26:	bc 01       	movw	r22, r24
    2c28:	cd 01       	movw	r24, r26
    2c2a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2c2e:	9b 01       	movw	r18, r22
    2c30:	ac 01       	movw	r20, r24
    2c32:	c8 01       	movw	r24, r16
    2c34:	b7 01       	movw	r22, r14
    2c36:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	8c 87       	std	Y+12, r24	; 0x0c
    2c40:	9d 87       	std	Y+13, r25	; 0x0d
    2c42:	ae 87       	std	Y+14, r26	; 0x0e
    2c44:	bf 87       	std	Y+15, r27	; 0x0f
            i++;
    2c46:	8f 81       	ldd	r24, Y+7	; 0x07
    2c48:	98 85       	ldd	r25, Y+8	; 0x08
    2c4a:	01 96       	adiw	r24, 0x01	; 1
    2c4c:	98 87       	std	Y+8, r25	; 0x08
    2c4e:	8f 83       	std	Y+7, r24	; 0x07
    2c50:	ad c1       	rjmp	.+858    	; 0x2fac <evaluate+0x43e>
        }  else if (buffer[i] == '*' || buffer[i] == '/') {
    2c52:	2f 81       	ldd	r18, Y+7	; 0x07
    2c54:	38 85       	ldd	r19, Y+8	; 0x08
    2c56:	8c 89       	ldd	r24, Y+20	; 0x14
    2c58:	9d 89       	ldd	r25, Y+21	; 0x15
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	e2 0f       	add	r30, r18
    2c5e:	f3 1f       	adc	r31, r19
    2c60:	80 81       	ld	r24, Z
    2c62:	8a 32       	cpi	r24, 0x2A	; 42
    2c64:	59 f0       	breq	.+22     	; 0x2c7c <evaluate+0x10e>
    2c66:	2f 81       	ldd	r18, Y+7	; 0x07
    2c68:	38 85       	ldd	r19, Y+8	; 0x08
    2c6a:	8c 89       	ldd	r24, Y+20	; 0x14
    2c6c:	9d 89       	ldd	r25, Y+21	; 0x15
    2c6e:	fc 01       	movw	r30, r24
    2c70:	e2 0f       	add	r30, r18
    2c72:	f3 1f       	adc	r31, r19
    2c74:	80 81       	ld	r24, Z
    2c76:	8f 32       	cpi	r24, 0x2F	; 47
    2c78:	09 f0       	breq	.+2      	; 0x2c7c <evaluate+0x10e>
    2c7a:	27 c1       	rjmp	.+590    	; 0x2eca <evaluate+0x35c>
        	if(buffer[i+1]=='*' || buffer[i+1] == '/' || buffer[i+1]=='-' || buffer[i+1] == '+' )
    2c7c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c7e:	98 85       	ldd	r25, Y+8	; 0x08
    2c80:	9c 01       	movw	r18, r24
    2c82:	2f 5f       	subi	r18, 0xFF	; 255
    2c84:	3f 4f       	sbci	r19, 0xFF	; 255
    2c86:	8c 89       	ldd	r24, Y+20	; 0x14
    2c88:	9d 89       	ldd	r25, Y+21	; 0x15
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	e2 0f       	add	r30, r18
    2c8e:	f3 1f       	adc	r31, r19
    2c90:	80 81       	ld	r24, Z
    2c92:	8a 32       	cpi	r24, 0x2A	; 42
    2c94:	39 f1       	breq	.+78     	; 0x2ce4 <evaluate+0x176>
    2c96:	8f 81       	ldd	r24, Y+7	; 0x07
    2c98:	98 85       	ldd	r25, Y+8	; 0x08
    2c9a:	9c 01       	movw	r18, r24
    2c9c:	2f 5f       	subi	r18, 0xFF	; 255
    2c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca0:	8c 89       	ldd	r24, Y+20	; 0x14
    2ca2:	9d 89       	ldd	r25, Y+21	; 0x15
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	e2 0f       	add	r30, r18
    2ca8:	f3 1f       	adc	r31, r19
    2caa:	80 81       	ld	r24, Z
    2cac:	8f 32       	cpi	r24, 0x2F	; 47
    2cae:	d1 f0       	breq	.+52     	; 0x2ce4 <evaluate+0x176>
    2cb0:	8f 81       	ldd	r24, Y+7	; 0x07
    2cb2:	98 85       	ldd	r25, Y+8	; 0x08
    2cb4:	9c 01       	movw	r18, r24
    2cb6:	2f 5f       	subi	r18, 0xFF	; 255
    2cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cba:	8c 89       	ldd	r24, Y+20	; 0x14
    2cbc:	9d 89       	ldd	r25, Y+21	; 0x15
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	e2 0f       	add	r30, r18
    2cc2:	f3 1f       	adc	r31, r19
    2cc4:	80 81       	ld	r24, Z
    2cc6:	8d 32       	cpi	r24, 0x2D	; 45
    2cc8:	69 f0       	breq	.+26     	; 0x2ce4 <evaluate+0x176>
    2cca:	8f 81       	ldd	r24, Y+7	; 0x07
    2ccc:	98 85       	ldd	r25, Y+8	; 0x08
    2cce:	9c 01       	movw	r18, r24
    2cd0:	2f 5f       	subi	r18, 0xFF	; 255
    2cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd4:	8c 89       	ldd	r24, Y+20	; 0x14
    2cd6:	9d 89       	ldd	r25, Y+21	; 0x15
    2cd8:	fc 01       	movw	r30, r24
    2cda:	e2 0f       	add	r30, r18
    2cdc:	f3 1f       	adc	r31, r19
    2cde:	80 81       	ld	r24, Z
    2ce0:	8b 32       	cpi	r24, 0x2B	; 43
    2ce2:	19 f4       	brne	.+6      	; 0x2cea <evaluate+0x17c>
        		flagSyntax=1;
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	80 93 aa 01 	sts	0x01AA, r24

            s8 c = buffer[i];
    2cea:	2f 81       	ldd	r18, Y+7	; 0x07
    2cec:	38 85       	ldd	r19, Y+8	; 0x08
    2cee:	8c 89       	ldd	r24, Y+20	; 0x14
    2cf0:	9d 89       	ldd	r25, Y+21	; 0x15
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	e2 0f       	add	r30, r18
    2cf6:	f3 1f       	adc	r31, r19
    2cf8:	80 81       	ld	r24, Z
    2cfa:	8e 83       	std	Y+6, r24	; 0x06
            i++;
    2cfc:	8f 81       	ldd	r24, Y+7	; 0x07
    2cfe:	98 85       	ldd	r25, Y+8	; 0x08
    2d00:	01 96       	adiw	r24, 0x01	; 1
    2d02:	98 87       	std	Y+8, r25	; 0x08
    2d04:	8f 83       	std	Y+7, r24	; 0x07
            f32 next_num = 0.0f;
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	a0 e0       	ldi	r26, 0x00	; 0
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	8a 83       	std	Y+2, r24	; 0x02
    2d10:	9b 83       	std	Y+3, r25	; 0x03
    2d12:	ac 83       	std	Y+4, r26	; 0x04
    2d14:	bd 83       	std	Y+5, r27	; 0x05
            u8 flagNextNum=0;
    2d16:	19 82       	std	Y+1, r1	; 0x01
    2d18:	05 c0       	rjmp	.+10     	; 0x2d24 <evaluate+0x1b6>
            while (i < length && buffer[i] == ' ') {
                i++;
    2d1a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d1c:	98 85       	ldd	r25, Y+8	; 0x08
    2d1e:	01 96       	adiw	r24, 0x01	; 1
    2d20:	98 87       	std	Y+8, r25	; 0x08
    2d22:	8f 83       	std	Y+7, r24	; 0x07

            s8 c = buffer[i];
            i++;
            f32 next_num = 0.0f;
            u8 flagNextNum=0;
            while (i < length && buffer[i] == ' ') {
    2d24:	2f 81       	ldd	r18, Y+7	; 0x07
    2d26:	38 85       	ldd	r19, Y+8	; 0x08
    2d28:	89 85       	ldd	r24, Y+9	; 0x09
    2d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2c:	28 17       	cp	r18, r24
    2d2e:	39 07       	cpc	r19, r25
    2d30:	0c f0       	brlt	.+2      	; 0x2d34 <evaluate+0x1c6>
    2d32:	40 c0       	rjmp	.+128    	; 0x2db4 <evaluate+0x246>
    2d34:	2f 81       	ldd	r18, Y+7	; 0x07
    2d36:	38 85       	ldd	r19, Y+8	; 0x08
    2d38:	8c 89       	ldd	r24, Y+20	; 0x14
    2d3a:	9d 89       	ldd	r25, Y+21	; 0x15
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	e2 0f       	add	r30, r18
    2d40:	f3 1f       	adc	r31, r19
    2d42:	80 81       	ld	r24, Z
    2d44:	80 32       	cpi	r24, 0x20	; 32
    2d46:	49 f3       	breq	.-46     	; 0x2d1a <evaluate+0x1ac>
    2d48:	35 c0       	rjmp	.+106    	; 0x2db4 <evaluate+0x246>
                i++;
            }
            while (i < length && buffer[i] >= '0' && buffer[i] <= '9') {
                next_num = next_num * 10.0f + (buffer[i] - '0');
    2d4a:	6a 81       	ldd	r22, Y+2	; 0x02
    2d4c:	7b 81       	ldd	r23, Y+3	; 0x03
    2d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d50:	9d 81       	ldd	r25, Y+5	; 0x05
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e2       	ldi	r20, 0x20	; 32
    2d58:	51 e4       	ldi	r21, 0x41	; 65
    2d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	7c 01       	movw	r14, r24
    2d64:	8d 01       	movw	r16, r26
    2d66:	2f 81       	ldd	r18, Y+7	; 0x07
    2d68:	38 85       	ldd	r19, Y+8	; 0x08
    2d6a:	8c 89       	ldd	r24, Y+20	; 0x14
    2d6c:	9d 89       	ldd	r25, Y+21	; 0x15
    2d6e:	fc 01       	movw	r30, r24
    2d70:	e2 0f       	add	r30, r18
    2d72:	f3 1f       	adc	r31, r19
    2d74:	80 81       	ld	r24, Z
    2d76:	88 2f       	mov	r24, r24
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	c0 97       	sbiw	r24, 0x30	; 48
    2d7c:	aa 27       	eor	r26, r26
    2d7e:	97 fd       	sbrc	r25, 7
    2d80:	a0 95       	com	r26
    2d82:	ba 2f       	mov	r27, r26
    2d84:	bc 01       	movw	r22, r24
    2d86:	cd 01       	movw	r24, r26
    2d88:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2d8c:	9b 01       	movw	r18, r22
    2d8e:	ac 01       	movw	r20, r24
    2d90:	c8 01       	movw	r24, r16
    2d92:	b7 01       	movw	r22, r14
    2d94:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	8a 83       	std	Y+2, r24	; 0x02
    2d9e:	9b 83       	std	Y+3, r25	; 0x03
    2da0:	ac 83       	std	Y+4, r26	; 0x04
    2da2:	bd 83       	std	Y+5, r27	; 0x05
                i++;
    2da4:	8f 81       	ldd	r24, Y+7	; 0x07
    2da6:	98 85       	ldd	r25, Y+8	; 0x08
    2da8:	01 96       	adiw	r24, 0x01	; 1
    2daa:	98 87       	std	Y+8, r25	; 0x08
    2dac:	8f 83       	std	Y+7, r24	; 0x07
                flagNextNum++;
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	8f 5f       	subi	r24, 0xFF	; 255
    2db2:	89 83       	std	Y+1, r24	; 0x01
            f32 next_num = 0.0f;
            u8 flagNextNum=0;
            while (i < length && buffer[i] == ' ') {
                i++;
            }
            while (i < length && buffer[i] >= '0' && buffer[i] <= '9') {
    2db4:	2f 81       	ldd	r18, Y+7	; 0x07
    2db6:	38 85       	ldd	r19, Y+8	; 0x08
    2db8:	89 85       	ldd	r24, Y+9	; 0x09
    2dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbc:	28 17       	cp	r18, r24
    2dbe:	39 07       	cpc	r19, r25
    2dc0:	dc f4       	brge	.+54     	; 0x2df8 <evaluate+0x28a>
    2dc2:	2f 81       	ldd	r18, Y+7	; 0x07
    2dc4:	38 85       	ldd	r19, Y+8	; 0x08
    2dc6:	8c 89       	ldd	r24, Y+20	; 0x14
    2dc8:	9d 89       	ldd	r25, Y+21	; 0x15
    2dca:	fc 01       	movw	r30, r24
    2dcc:	e2 0f       	add	r30, r18
    2dce:	f3 1f       	adc	r31, r19
    2dd0:	80 81       	ld	r24, Z
    2dd2:	80 33       	cpi	r24, 0x30	; 48
    2dd4:	88 f0       	brcs	.+34     	; 0x2df8 <evaluate+0x28a>
    2dd6:	2f 81       	ldd	r18, Y+7	; 0x07
    2dd8:	38 85       	ldd	r19, Y+8	; 0x08
    2dda:	8c 89       	ldd	r24, Y+20	; 0x14
    2ddc:	9d 89       	ldd	r25, Y+21	; 0x15
    2dde:	fc 01       	movw	r30, r24
    2de0:	e2 0f       	add	r30, r18
    2de2:	f3 1f       	adc	r31, r19
    2de4:	80 81       	ld	r24, Z
    2de6:	8a 33       	cpi	r24, 0x3A	; 58
    2de8:	08 f4       	brcc	.+2      	; 0x2dec <evaluate+0x27e>
    2dea:	af cf       	rjmp	.-162    	; 0x2d4a <evaluate+0x1dc>
    2dec:	05 c0       	rjmp	.+10     	; 0x2df8 <evaluate+0x28a>
                next_num = next_num * 10.0f + (buffer[i] - '0');
                i++;
                flagNextNum++;
            }
            while (i < length && buffer[i] == ' ') {
                i++;
    2dee:	8f 81       	ldd	r24, Y+7	; 0x07
    2df0:	98 85       	ldd	r25, Y+8	; 0x08
    2df2:	01 96       	adiw	r24, 0x01	; 1
    2df4:	98 87       	std	Y+8, r25	; 0x08
    2df6:	8f 83       	std	Y+7, r24	; 0x07
            while (i < length && buffer[i] >= '0' && buffer[i] <= '9') {
                next_num = next_num * 10.0f + (buffer[i] - '0');
                i++;
                flagNextNum++;
            }
            while (i < length && buffer[i] == ' ') {
    2df8:	2f 81       	ldd	r18, Y+7	; 0x07
    2dfa:	38 85       	ldd	r19, Y+8	; 0x08
    2dfc:	89 85       	ldd	r24, Y+9	; 0x09
    2dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e00:	28 17       	cp	r18, r24
    2e02:	39 07       	cpc	r19, r25
    2e04:	54 f4       	brge	.+20     	; 0x2e1a <evaluate+0x2ac>
    2e06:	2f 81       	ldd	r18, Y+7	; 0x07
    2e08:	38 85       	ldd	r19, Y+8	; 0x08
    2e0a:	8c 89       	ldd	r24, Y+20	; 0x14
    2e0c:	9d 89       	ldd	r25, Y+21	; 0x15
    2e0e:	fc 01       	movw	r30, r24
    2e10:	e2 0f       	add	r30, r18
    2e12:	f3 1f       	adc	r31, r19
    2e14:	80 81       	ld	r24, Z
    2e16:	80 32       	cpi	r24, 0x20	; 32
    2e18:	51 f3       	breq	.-44     	; 0x2dee <evaluate+0x280>
                i++;
            }
            if (c == '*') {
    2e1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e1c:	8a 32       	cpi	r24, 0x2A	; 42
    2e1e:	89 f4       	brne	.+34     	; 0x2e42 <evaluate+0x2d4>
                num *= next_num;
    2e20:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e22:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e24:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e26:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e28:	2a 81       	ldd	r18, Y+2	; 0x02
    2e2a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e2c:	4c 81       	ldd	r20, Y+4	; 0x04
    2e2e:	5d 81       	ldd	r21, Y+5	; 0x05
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	8c 87       	std	Y+12, r24	; 0x0c
    2e3a:	9d 87       	std	Y+13, r25	; 0x0d
    2e3c:	ae 87       	std	Y+14, r26	; 0x0e
    2e3e:	bf 87       	std	Y+15, r27	; 0x0f
    2e40:	b5 c0       	rjmp	.+362    	; 0x2fac <evaluate+0x43e>
            } else {
            	if(flagNextNum<1){
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
    2e44:	88 23       	and	r24, r24
    2e46:	91 f4       	brne	.+36     	; 0x2e6c <evaluate+0x2fe>
            		flagSyntax=1;
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	80 93 aa 01 	sts	0x01AA, r24
            		return flagSyntax;
    2e4e:	80 91 aa 01 	lds	r24, 0x01AA
    2e52:	88 2f       	mov	r24, r24
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	a0 e0       	ldi	r26, 0x00	; 0
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2e62:	6e 8b       	std	Y+22, r22	; 0x16
    2e64:	7f 8b       	std	Y+23, r23	; 0x17
    2e66:	88 8f       	std	Y+24, r24	; 0x18
    2e68:	99 8f       	std	Y+25, r25	; 0x19
    2e6a:	d4 c0       	rjmp	.+424    	; 0x3014 <evaluate+0x4a6>
            	}
                if (next_num == 0.0f) {
    2e6c:	6a 81       	ldd	r22, Y+2	; 0x02
    2e6e:	7b 81       	ldd	r23, Y+3	; 0x03
    2e70:	8c 81       	ldd	r24, Y+4	; 0x04
    2e72:	9d 81       	ldd	r25, Y+5	; 0x05
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e0       	ldi	r20, 0x00	; 0
    2e7a:	50 e0       	ldi	r21, 0x00	; 0
    2e7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2e80:	88 23       	and	r24, r24
    2e82:	91 f4       	brne	.+36     	; 0x2ea8 <evaluate+0x33a>
                	flagZero = 1;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	80 93 a9 01 	sts	0x01A9, r24
                	return flagZero;
    2e8a:	80 91 a9 01 	lds	r24, 0x01A9
    2e8e:	88 2f       	mov	r24, r24
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	a0 e0       	ldi	r26, 0x00	; 0
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	bc 01       	movw	r22, r24
    2e98:	cd 01       	movw	r24, r26
    2e9a:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2e9e:	6e 8b       	std	Y+22, r22	; 0x16
    2ea0:	7f 8b       	std	Y+23, r23	; 0x17
    2ea2:	88 8f       	std	Y+24, r24	; 0x18
    2ea4:	99 8f       	std	Y+25, r25	; 0x19
    2ea6:	b6 c0       	rjmp	.+364    	; 0x3014 <evaluate+0x4a6>
                }
                num /= next_num;
    2ea8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2eaa:	7d 85       	ldd	r23, Y+13	; 0x0d
    2eac:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eae:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eb0:	2a 81       	ldd	r18, Y+2	; 0x02
    2eb2:	3b 81       	ldd	r19, Y+3	; 0x03
    2eb4:	4c 81       	ldd	r20, Y+4	; 0x04
    2eb6:	5d 81       	ldd	r21, Y+5	; 0x05
    2eb8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	8c 87       	std	Y+12, r24	; 0x0c
    2ec2:	9d 87       	std	Y+13, r25	; 0x0d
    2ec4:	ae 87       	std	Y+14, r26	; 0x0e
    2ec6:	bf 87       	std	Y+15, r27	; 0x0f
    2ec8:	71 c0       	rjmp	.+226    	; 0x2fac <evaluate+0x43e>
            }
        } else {
        	if(buffer[i+1]=='*' || buffer[i+1] == '/' || buffer[i+1]=='-' || buffer[i+1] == '+' )
    2eca:	8f 81       	ldd	r24, Y+7	; 0x07
    2ecc:	98 85       	ldd	r25, Y+8	; 0x08
    2ece:	9c 01       	movw	r18, r24
    2ed0:	2f 5f       	subi	r18, 0xFF	; 255
    2ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed4:	8c 89       	ldd	r24, Y+20	; 0x14
    2ed6:	9d 89       	ldd	r25, Y+21	; 0x15
    2ed8:	fc 01       	movw	r30, r24
    2eda:	e2 0f       	add	r30, r18
    2edc:	f3 1f       	adc	r31, r19
    2ede:	80 81       	ld	r24, Z
    2ee0:	8a 32       	cpi	r24, 0x2A	; 42
    2ee2:	39 f1       	breq	.+78     	; 0x2f32 <evaluate+0x3c4>
    2ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ee6:	98 85       	ldd	r25, Y+8	; 0x08
    2ee8:	9c 01       	movw	r18, r24
    2eea:	2f 5f       	subi	r18, 0xFF	; 255
    2eec:	3f 4f       	sbci	r19, 0xFF	; 255
    2eee:	8c 89       	ldd	r24, Y+20	; 0x14
    2ef0:	9d 89       	ldd	r25, Y+21	; 0x15
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	e2 0f       	add	r30, r18
    2ef6:	f3 1f       	adc	r31, r19
    2ef8:	80 81       	ld	r24, Z
    2efa:	8f 32       	cpi	r24, 0x2F	; 47
    2efc:	d1 f0       	breq	.+52     	; 0x2f32 <evaluate+0x3c4>
    2efe:	8f 81       	ldd	r24, Y+7	; 0x07
    2f00:	98 85       	ldd	r25, Y+8	; 0x08
    2f02:	9c 01       	movw	r18, r24
    2f04:	2f 5f       	subi	r18, 0xFF	; 255
    2f06:	3f 4f       	sbci	r19, 0xFF	; 255
    2f08:	8c 89       	ldd	r24, Y+20	; 0x14
    2f0a:	9d 89       	ldd	r25, Y+21	; 0x15
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	e2 0f       	add	r30, r18
    2f10:	f3 1f       	adc	r31, r19
    2f12:	80 81       	ld	r24, Z
    2f14:	8d 32       	cpi	r24, 0x2D	; 45
    2f16:	69 f0       	breq	.+26     	; 0x2f32 <evaluate+0x3c4>
    2f18:	8f 81       	ldd	r24, Y+7	; 0x07
    2f1a:	98 85       	ldd	r25, Y+8	; 0x08
    2f1c:	9c 01       	movw	r18, r24
    2f1e:	2f 5f       	subi	r18, 0xFF	; 255
    2f20:	3f 4f       	sbci	r19, 0xFF	; 255
    2f22:	8c 89       	ldd	r24, Y+20	; 0x14
    2f24:	9d 89       	ldd	r25, Y+21	; 0x15
    2f26:	fc 01       	movw	r30, r24
    2f28:	e2 0f       	add	r30, r18
    2f2a:	f3 1f       	adc	r31, r19
    2f2c:	80 81       	ld	r24, Z
    2f2e:	8b 32       	cpi	r24, 0x2B	; 43
    2f30:	19 f4       	brne	.+6      	; 0x2f38 <evaluate+0x3ca>
        	        		flagSyntax=1;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	80 93 aa 01 	sts	0x01AA, r24
            if (op == '+') {
    2f38:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f3a:	8b 32       	cpi	r24, 0x2B	; 43
    2f3c:	89 f4       	brne	.+34     	; 0x2f60 <evaluate+0x3f2>
                result += num;
    2f3e:	68 89       	ldd	r22, Y+16	; 0x10
    2f40:	79 89       	ldd	r23, Y+17	; 0x11
    2f42:	8a 89       	ldd	r24, Y+18	; 0x12
    2f44:	9b 89       	ldd	r25, Y+19	; 0x13
    2f46:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f48:	3d 85       	ldd	r19, Y+13	; 0x0d
    2f4a:	4e 85       	ldd	r20, Y+14	; 0x0e
    2f4c:	5f 85       	ldd	r21, Y+15	; 0x0f
    2f4e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	88 8b       	std	Y+16, r24	; 0x10
    2f58:	99 8b       	std	Y+17, r25	; 0x11
    2f5a:	aa 8b       	std	Y+18, r26	; 0x12
    2f5c:	bb 8b       	std	Y+19, r27	; 0x13
    2f5e:	10 c0       	rjmp	.+32     	; 0x2f80 <evaluate+0x412>
            } else {
                result -= num;
    2f60:	68 89       	ldd	r22, Y+16	; 0x10
    2f62:	79 89       	ldd	r23, Y+17	; 0x11
    2f64:	8a 89       	ldd	r24, Y+18	; 0x12
    2f66:	9b 89       	ldd	r25, Y+19	; 0x13
    2f68:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f6a:	3d 85       	ldd	r19, Y+13	; 0x0d
    2f6c:	4e 85       	ldd	r20, Y+14	; 0x0e
    2f6e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2f70:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	88 8b       	std	Y+16, r24	; 0x10
    2f7a:	99 8b       	std	Y+17, r25	; 0x11
    2f7c:	aa 8b       	std	Y+18, r26	; 0x12
    2f7e:	bb 8b       	std	Y+19, r27	; 0x13
            }
            num = 0.0f;
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	a0 e0       	ldi	r26, 0x00	; 0
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	8c 87       	std	Y+12, r24	; 0x0c
    2f8a:	9d 87       	std	Y+13, r25	; 0x0d
    2f8c:	ae 87       	std	Y+14, r26	; 0x0e
    2f8e:	bf 87       	std	Y+15, r27	; 0x0f
            op = buffer[i];
    2f90:	2f 81       	ldd	r18, Y+7	; 0x07
    2f92:	38 85       	ldd	r19, Y+8	; 0x08
    2f94:	8c 89       	ldd	r24, Y+20	; 0x14
    2f96:	9d 89       	ldd	r25, Y+21	; 0x15
    2f98:	fc 01       	movw	r30, r24
    2f9a:	e2 0f       	add	r30, r18
    2f9c:	f3 1f       	adc	r31, r19
    2f9e:	80 81       	ld	r24, Z
    2fa0:	8b 87       	std	Y+11, r24	; 0x0b
            i++;
    2fa2:	8f 81       	ldd	r24, Y+7	; 0x07
    2fa4:	98 85       	ldd	r25, Y+8	; 0x08
    2fa6:	01 96       	adiw	r24, 0x01	; 1
    2fa8:	98 87       	std	Y+8, r25	; 0x08
    2faa:	8f 83       	std	Y+7, r24	; 0x07
    f64 result = 0.0f;
    f32 num = 0.0f;
    s8 op = '+';
    s16 length = strlen(buffer);
    s16 i = 0;
    while (i < length) {
    2fac:	2f 81       	ldd	r18, Y+7	; 0x07
    2fae:	38 85       	ldd	r19, Y+8	; 0x08
    2fb0:	89 85       	ldd	r24, Y+9	; 0x09
    2fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb4:	28 17       	cp	r18, r24
    2fb6:	39 07       	cpc	r19, r25
    2fb8:	0c f4       	brge	.+2      	; 0x2fbc <evaluate+0x44e>
    2fba:	04 ce       	rjmp	.-1016   	; 0x2bc4 <evaluate+0x56>
            num = 0.0f;
            op = buffer[i];
            i++;
        }
    }
    if (op == '+') {
    2fbc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fbe:	8b 32       	cpi	r24, 0x2B	; 43
    2fc0:	89 f4       	brne	.+34     	; 0x2fe4 <evaluate+0x476>
        result += num;
    2fc2:	68 89       	ldd	r22, Y+16	; 0x10
    2fc4:	79 89       	ldd	r23, Y+17	; 0x11
    2fc6:	8a 89       	ldd	r24, Y+18	; 0x12
    2fc8:	9b 89       	ldd	r25, Y+19	; 0x13
    2fca:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fcc:	3d 85       	ldd	r19, Y+13	; 0x0d
    2fce:	4e 85       	ldd	r20, Y+14	; 0x0e
    2fd0:	5f 85       	ldd	r21, Y+15	; 0x0f
    2fd2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	88 8b       	std	Y+16, r24	; 0x10
    2fdc:	99 8b       	std	Y+17, r25	; 0x11
    2fde:	aa 8b       	std	Y+18, r26	; 0x12
    2fe0:	bb 8b       	std	Y+19, r27	; 0x13
    2fe2:	10 c0       	rjmp	.+32     	; 0x3004 <evaluate+0x496>
    } else {
        result -= num;
    2fe4:	68 89       	ldd	r22, Y+16	; 0x10
    2fe6:	79 89       	ldd	r23, Y+17	; 0x11
    2fe8:	8a 89       	ldd	r24, Y+18	; 0x12
    2fea:	9b 89       	ldd	r25, Y+19	; 0x13
    2fec:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fee:	3d 85       	ldd	r19, Y+13	; 0x0d
    2ff0:	4e 85       	ldd	r20, Y+14	; 0x0e
    2ff2:	5f 85       	ldd	r21, Y+15	; 0x0f
    2ff4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	88 8b       	std	Y+16, r24	; 0x10
    2ffe:	99 8b       	std	Y+17, r25	; 0x11
    3000:	aa 8b       	std	Y+18, r26	; 0x12
    3002:	bb 8b       	std	Y+19, r27	; 0x13
    }
    return result;
    3004:	88 89       	ldd	r24, Y+16	; 0x10
    3006:	99 89       	ldd	r25, Y+17	; 0x11
    3008:	aa 89       	ldd	r26, Y+18	; 0x12
    300a:	bb 89       	ldd	r27, Y+19	; 0x13
    300c:	8e 8b       	std	Y+22, r24	; 0x16
    300e:	9f 8b       	std	Y+23, r25	; 0x17
    3010:	a8 8f       	std	Y+24, r26	; 0x18
    3012:	b9 8f       	std	Y+25, r27	; 0x19
    3014:	8e 89       	ldd	r24, Y+22	; 0x16
    3016:	9f 89       	ldd	r25, Y+23	; 0x17
    3018:	a8 8d       	ldd	r26, Y+24	; 0x18
    301a:	b9 8d       	ldd	r27, Y+25	; 0x19
}
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	69 96       	adiw	r28, 0x19	; 25
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	1f 91       	pop	r17
    3032:	0f 91       	pop	r16
    3034:	ff 90       	pop	r15
    3036:	ef 90       	pop	r14
    3038:	08 95       	ret

0000303a <__prologue_saves__>:
    303a:	2f 92       	push	r2
    303c:	3f 92       	push	r3
    303e:	4f 92       	push	r4
    3040:	5f 92       	push	r5
    3042:	6f 92       	push	r6
    3044:	7f 92       	push	r7
    3046:	8f 92       	push	r8
    3048:	9f 92       	push	r9
    304a:	af 92       	push	r10
    304c:	bf 92       	push	r11
    304e:	cf 92       	push	r12
    3050:	df 92       	push	r13
    3052:	ef 92       	push	r14
    3054:	ff 92       	push	r15
    3056:	0f 93       	push	r16
    3058:	1f 93       	push	r17
    305a:	cf 93       	push	r28
    305c:	df 93       	push	r29
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	ca 1b       	sub	r28, r26
    3064:	db 0b       	sbc	r29, r27
    3066:	0f b6       	in	r0, 0x3f	; 63
    3068:	f8 94       	cli
    306a:	de bf       	out	0x3e, r29	; 62
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	cd bf       	out	0x3d, r28	; 61
    3070:	09 94       	ijmp

00003072 <__epilogue_restores__>:
    3072:	2a 88       	ldd	r2, Y+18	; 0x12
    3074:	39 88       	ldd	r3, Y+17	; 0x11
    3076:	48 88       	ldd	r4, Y+16	; 0x10
    3078:	5f 84       	ldd	r5, Y+15	; 0x0f
    307a:	6e 84       	ldd	r6, Y+14	; 0x0e
    307c:	7d 84       	ldd	r7, Y+13	; 0x0d
    307e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3080:	9b 84       	ldd	r9, Y+11	; 0x0b
    3082:	aa 84       	ldd	r10, Y+10	; 0x0a
    3084:	b9 84       	ldd	r11, Y+9	; 0x09
    3086:	c8 84       	ldd	r12, Y+8	; 0x08
    3088:	df 80       	ldd	r13, Y+7	; 0x07
    308a:	ee 80       	ldd	r14, Y+6	; 0x06
    308c:	fd 80       	ldd	r15, Y+5	; 0x05
    308e:	0c 81       	ldd	r16, Y+4	; 0x04
    3090:	1b 81       	ldd	r17, Y+3	; 0x03
    3092:	aa 81       	ldd	r26, Y+2	; 0x02
    3094:	b9 81       	ldd	r27, Y+1	; 0x01
    3096:	ce 0f       	add	r28, r30
    3098:	d1 1d       	adc	r29, r1
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	cd bf       	out	0x3d, r28	; 61
    30a4:	ed 01       	movw	r28, r26
    30a6:	08 95       	ret

000030a8 <memset>:
    30a8:	dc 01       	movw	r26, r24
    30aa:	01 c0       	rjmp	.+2      	; 0x30ae <memset+0x6>
    30ac:	6d 93       	st	X+, r22
    30ae:	41 50       	subi	r20, 0x01	; 1
    30b0:	50 40       	sbci	r21, 0x00	; 0
    30b2:	e0 f7       	brcc	.-8      	; 0x30ac <memset+0x4>
    30b4:	08 95       	ret

000030b6 <strlen>:
    30b6:	fc 01       	movw	r30, r24
    30b8:	01 90       	ld	r0, Z+
    30ba:	00 20       	and	r0, r0
    30bc:	e9 f7       	brne	.-6      	; 0x30b8 <strlen+0x2>
    30be:	80 95       	com	r24
    30c0:	90 95       	com	r25
    30c2:	8e 0f       	add	r24, r30
    30c4:	9f 1f       	adc	r25, r31
    30c6:	08 95       	ret

000030c8 <sprintf>:
    30c8:	ae e0       	ldi	r26, 0x0E	; 14
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	ea e6       	ldi	r30, 0x6A	; 106
    30ce:	f8 e1       	ldi	r31, 0x18	; 24
    30d0:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__prologue_saves__+0x1c>
    30d4:	0d 89       	ldd	r16, Y+21	; 0x15
    30d6:	1e 89       	ldd	r17, Y+22	; 0x16
    30d8:	86 e0       	ldi	r24, 0x06	; 6
    30da:	8c 83       	std	Y+4, r24	; 0x04
    30dc:	1a 83       	std	Y+2, r17	; 0x02
    30de:	09 83       	std	Y+1, r16	; 0x01
    30e0:	8f ef       	ldi	r24, 0xFF	; 255
    30e2:	9f e7       	ldi	r25, 0x7F	; 127
    30e4:	9e 83       	std	Y+6, r25	; 0x06
    30e6:	8d 83       	std	Y+5, r24	; 0x05
    30e8:	9e 01       	movw	r18, r28
    30ea:	27 5e       	subi	r18, 0xE7	; 231
    30ec:	3f 4f       	sbci	r19, 0xFF	; 255
    30ee:	ce 01       	movw	r24, r28
    30f0:	01 96       	adiw	r24, 0x01	; 1
    30f2:	6f 89       	ldd	r22, Y+23	; 0x17
    30f4:	78 8d       	ldd	r23, Y+24	; 0x18
    30f6:	a9 01       	movw	r20, r18
    30f8:	0e 94 88 18 	call	0x3110	; 0x3110 <vfprintf>
    30fc:	2f 81       	ldd	r18, Y+7	; 0x07
    30fe:	38 85       	ldd	r19, Y+8	; 0x08
    3100:	02 0f       	add	r16, r18
    3102:	13 1f       	adc	r17, r19
    3104:	f8 01       	movw	r30, r16
    3106:	10 82       	st	Z, r1
    3108:	2e 96       	adiw	r28, 0x0e	; 14
    310a:	e4 e0       	ldi	r30, 0x04	; 4
    310c:	0c 94 47 18 	jmp	0x308e	; 0x308e <__epilogue_restores__+0x1c>

00003110 <vfprintf>:
    3110:	ab e0       	ldi	r26, 0x0B	; 11
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	ee e8       	ldi	r30, 0x8E	; 142
    3116:	f8 e1       	ldi	r31, 0x18	; 24
    3118:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__>
    311c:	3c 01       	movw	r6, r24
    311e:	2b 01       	movw	r4, r22
    3120:	5a 01       	movw	r10, r20
    3122:	fc 01       	movw	r30, r24
    3124:	17 82       	std	Z+7, r1	; 0x07
    3126:	16 82       	std	Z+6, r1	; 0x06
    3128:	83 81       	ldd	r24, Z+3	; 0x03
    312a:	81 fd       	sbrc	r24, 1
    312c:	03 c0       	rjmp	.+6      	; 0x3134 <vfprintf+0x24>
    312e:	6f ef       	ldi	r22, 0xFF	; 255
    3130:	7f ef       	ldi	r23, 0xFF	; 255
    3132:	c6 c1       	rjmp	.+908    	; 0x34c0 <vfprintf+0x3b0>
    3134:	9a e0       	ldi	r25, 0x0A	; 10
    3136:	89 2e       	mov	r8, r25
    3138:	1e 01       	movw	r2, r28
    313a:	08 94       	sec
    313c:	21 1c       	adc	r2, r1
    313e:	31 1c       	adc	r3, r1
    3140:	f3 01       	movw	r30, r6
    3142:	23 81       	ldd	r18, Z+3	; 0x03
    3144:	f2 01       	movw	r30, r4
    3146:	23 fd       	sbrc	r18, 3
    3148:	85 91       	lpm	r24, Z+
    314a:	23 ff       	sbrs	r18, 3
    314c:	81 91       	ld	r24, Z+
    314e:	2f 01       	movw	r4, r30
    3150:	88 23       	and	r24, r24
    3152:	09 f4       	brne	.+2      	; 0x3156 <vfprintf+0x46>
    3154:	b2 c1       	rjmp	.+868    	; 0x34ba <vfprintf+0x3aa>
    3156:	85 32       	cpi	r24, 0x25	; 37
    3158:	39 f4       	brne	.+14     	; 0x3168 <vfprintf+0x58>
    315a:	23 fd       	sbrc	r18, 3
    315c:	85 91       	lpm	r24, Z+
    315e:	23 ff       	sbrs	r18, 3
    3160:	81 91       	ld	r24, Z+
    3162:	2f 01       	movw	r4, r30
    3164:	85 32       	cpi	r24, 0x25	; 37
    3166:	29 f4       	brne	.+10     	; 0x3172 <vfprintf+0x62>
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	b3 01       	movw	r22, r6
    316c:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <fputc>
    3170:	e7 cf       	rjmp	.-50     	; 0x3140 <vfprintf+0x30>
    3172:	98 2f       	mov	r25, r24
    3174:	ff 24       	eor	r15, r15
    3176:	ee 24       	eor	r14, r14
    3178:	99 24       	eor	r9, r9
    317a:	ff e1       	ldi	r31, 0x1F	; 31
    317c:	ff 15       	cp	r31, r15
    317e:	d0 f0       	brcs	.+52     	; 0x31b4 <vfprintf+0xa4>
    3180:	9b 32       	cpi	r25, 0x2B	; 43
    3182:	69 f0       	breq	.+26     	; 0x319e <vfprintf+0x8e>
    3184:	9c 32       	cpi	r25, 0x2C	; 44
    3186:	28 f4       	brcc	.+10     	; 0x3192 <vfprintf+0x82>
    3188:	90 32       	cpi	r25, 0x20	; 32
    318a:	59 f0       	breq	.+22     	; 0x31a2 <vfprintf+0x92>
    318c:	93 32       	cpi	r25, 0x23	; 35
    318e:	91 f4       	brne	.+36     	; 0x31b4 <vfprintf+0xa4>
    3190:	0e c0       	rjmp	.+28     	; 0x31ae <vfprintf+0x9e>
    3192:	9d 32       	cpi	r25, 0x2D	; 45
    3194:	49 f0       	breq	.+18     	; 0x31a8 <vfprintf+0x98>
    3196:	90 33       	cpi	r25, 0x30	; 48
    3198:	69 f4       	brne	.+26     	; 0x31b4 <vfprintf+0xa4>
    319a:	41 e0       	ldi	r20, 0x01	; 1
    319c:	24 c0       	rjmp	.+72     	; 0x31e6 <vfprintf+0xd6>
    319e:	52 e0       	ldi	r21, 0x02	; 2
    31a0:	f5 2a       	or	r15, r21
    31a2:	84 e0       	ldi	r24, 0x04	; 4
    31a4:	f8 2a       	or	r15, r24
    31a6:	28 c0       	rjmp	.+80     	; 0x31f8 <vfprintf+0xe8>
    31a8:	98 e0       	ldi	r25, 0x08	; 8
    31aa:	f9 2a       	or	r15, r25
    31ac:	25 c0       	rjmp	.+74     	; 0x31f8 <vfprintf+0xe8>
    31ae:	e0 e1       	ldi	r30, 0x10	; 16
    31b0:	fe 2a       	or	r15, r30
    31b2:	22 c0       	rjmp	.+68     	; 0x31f8 <vfprintf+0xe8>
    31b4:	f7 fc       	sbrc	r15, 7
    31b6:	29 c0       	rjmp	.+82     	; 0x320a <vfprintf+0xfa>
    31b8:	89 2f       	mov	r24, r25
    31ba:	80 53       	subi	r24, 0x30	; 48
    31bc:	8a 30       	cpi	r24, 0x0A	; 10
    31be:	70 f4       	brcc	.+28     	; 0x31dc <vfprintf+0xcc>
    31c0:	f6 fe       	sbrs	r15, 6
    31c2:	05 c0       	rjmp	.+10     	; 0x31ce <vfprintf+0xbe>
    31c4:	98 9c       	mul	r9, r8
    31c6:	90 2c       	mov	r9, r0
    31c8:	11 24       	eor	r1, r1
    31ca:	98 0e       	add	r9, r24
    31cc:	15 c0       	rjmp	.+42     	; 0x31f8 <vfprintf+0xe8>
    31ce:	e8 9c       	mul	r14, r8
    31d0:	e0 2c       	mov	r14, r0
    31d2:	11 24       	eor	r1, r1
    31d4:	e8 0e       	add	r14, r24
    31d6:	f0 e2       	ldi	r31, 0x20	; 32
    31d8:	ff 2a       	or	r15, r31
    31da:	0e c0       	rjmp	.+28     	; 0x31f8 <vfprintf+0xe8>
    31dc:	9e 32       	cpi	r25, 0x2E	; 46
    31de:	29 f4       	brne	.+10     	; 0x31ea <vfprintf+0xda>
    31e0:	f6 fc       	sbrc	r15, 6
    31e2:	6b c1       	rjmp	.+726    	; 0x34ba <vfprintf+0x3aa>
    31e4:	40 e4       	ldi	r20, 0x40	; 64
    31e6:	f4 2a       	or	r15, r20
    31e8:	07 c0       	rjmp	.+14     	; 0x31f8 <vfprintf+0xe8>
    31ea:	9c 36       	cpi	r25, 0x6C	; 108
    31ec:	19 f4       	brne	.+6      	; 0x31f4 <vfprintf+0xe4>
    31ee:	50 e8       	ldi	r21, 0x80	; 128
    31f0:	f5 2a       	or	r15, r21
    31f2:	02 c0       	rjmp	.+4      	; 0x31f8 <vfprintf+0xe8>
    31f4:	98 36       	cpi	r25, 0x68	; 104
    31f6:	49 f4       	brne	.+18     	; 0x320a <vfprintf+0xfa>
    31f8:	f2 01       	movw	r30, r4
    31fa:	23 fd       	sbrc	r18, 3
    31fc:	95 91       	lpm	r25, Z+
    31fe:	23 ff       	sbrs	r18, 3
    3200:	91 91       	ld	r25, Z+
    3202:	2f 01       	movw	r4, r30
    3204:	99 23       	and	r25, r25
    3206:	09 f0       	breq	.+2      	; 0x320a <vfprintf+0xfa>
    3208:	b8 cf       	rjmp	.-144    	; 0x317a <vfprintf+0x6a>
    320a:	89 2f       	mov	r24, r25
    320c:	85 54       	subi	r24, 0x45	; 69
    320e:	83 30       	cpi	r24, 0x03	; 3
    3210:	18 f0       	brcs	.+6      	; 0x3218 <vfprintf+0x108>
    3212:	80 52       	subi	r24, 0x20	; 32
    3214:	83 30       	cpi	r24, 0x03	; 3
    3216:	38 f4       	brcc	.+14     	; 0x3226 <vfprintf+0x116>
    3218:	44 e0       	ldi	r20, 0x04	; 4
    321a:	50 e0       	ldi	r21, 0x00	; 0
    321c:	a4 0e       	add	r10, r20
    321e:	b5 1e       	adc	r11, r21
    3220:	5f e3       	ldi	r21, 0x3F	; 63
    3222:	59 83       	std	Y+1, r21	; 0x01
    3224:	0f c0       	rjmp	.+30     	; 0x3244 <vfprintf+0x134>
    3226:	93 36       	cpi	r25, 0x63	; 99
    3228:	31 f0       	breq	.+12     	; 0x3236 <vfprintf+0x126>
    322a:	93 37       	cpi	r25, 0x73	; 115
    322c:	79 f0       	breq	.+30     	; 0x324c <vfprintf+0x13c>
    322e:	93 35       	cpi	r25, 0x53	; 83
    3230:	09 f0       	breq	.+2      	; 0x3234 <vfprintf+0x124>
    3232:	56 c0       	rjmp	.+172    	; 0x32e0 <vfprintf+0x1d0>
    3234:	20 c0       	rjmp	.+64     	; 0x3276 <vfprintf+0x166>
    3236:	f5 01       	movw	r30, r10
    3238:	80 81       	ld	r24, Z
    323a:	89 83       	std	Y+1, r24	; 0x01
    323c:	42 e0       	ldi	r20, 0x02	; 2
    323e:	50 e0       	ldi	r21, 0x00	; 0
    3240:	a4 0e       	add	r10, r20
    3242:	b5 1e       	adc	r11, r21
    3244:	61 01       	movw	r12, r2
    3246:	01 e0       	ldi	r16, 0x01	; 1
    3248:	10 e0       	ldi	r17, 0x00	; 0
    324a:	12 c0       	rjmp	.+36     	; 0x3270 <vfprintf+0x160>
    324c:	f5 01       	movw	r30, r10
    324e:	c0 80       	ld	r12, Z
    3250:	d1 80       	ldd	r13, Z+1	; 0x01
    3252:	f6 fc       	sbrc	r15, 6
    3254:	03 c0       	rjmp	.+6      	; 0x325c <vfprintf+0x14c>
    3256:	6f ef       	ldi	r22, 0xFF	; 255
    3258:	7f ef       	ldi	r23, 0xFF	; 255
    325a:	02 c0       	rjmp	.+4      	; 0x3260 <vfprintf+0x150>
    325c:	69 2d       	mov	r22, r9
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	42 e0       	ldi	r20, 0x02	; 2
    3262:	50 e0       	ldi	r21, 0x00	; 0
    3264:	a4 0e       	add	r10, r20
    3266:	b5 1e       	adc	r11, r21
    3268:	c6 01       	movw	r24, r12
    326a:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <strnlen>
    326e:	8c 01       	movw	r16, r24
    3270:	5f e7       	ldi	r21, 0x7F	; 127
    3272:	f5 22       	and	r15, r21
    3274:	14 c0       	rjmp	.+40     	; 0x329e <vfprintf+0x18e>
    3276:	f5 01       	movw	r30, r10
    3278:	c0 80       	ld	r12, Z
    327a:	d1 80       	ldd	r13, Z+1	; 0x01
    327c:	f6 fc       	sbrc	r15, 6
    327e:	03 c0       	rjmp	.+6      	; 0x3286 <vfprintf+0x176>
    3280:	6f ef       	ldi	r22, 0xFF	; 255
    3282:	7f ef       	ldi	r23, 0xFF	; 255
    3284:	02 c0       	rjmp	.+4      	; 0x328a <vfprintf+0x17a>
    3286:	69 2d       	mov	r22, r9
    3288:	70 e0       	ldi	r23, 0x00	; 0
    328a:	42 e0       	ldi	r20, 0x02	; 2
    328c:	50 e0       	ldi	r21, 0x00	; 0
    328e:	a4 0e       	add	r10, r20
    3290:	b5 1e       	adc	r11, r21
    3292:	c6 01       	movw	r24, r12
    3294:	0e 94 65 1a 	call	0x34ca	; 0x34ca <strnlen_P>
    3298:	8c 01       	movw	r16, r24
    329a:	50 e8       	ldi	r21, 0x80	; 128
    329c:	f5 2a       	or	r15, r21
    329e:	f3 fe       	sbrs	r15, 3
    32a0:	07 c0       	rjmp	.+14     	; 0x32b0 <vfprintf+0x1a0>
    32a2:	1a c0       	rjmp	.+52     	; 0x32d8 <vfprintf+0x1c8>
    32a4:	80 e2       	ldi	r24, 0x20	; 32
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	b3 01       	movw	r22, r6
    32aa:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <fputc>
    32ae:	ea 94       	dec	r14
    32b0:	8e 2d       	mov	r24, r14
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	08 17       	cp	r16, r24
    32b6:	19 07       	cpc	r17, r25
    32b8:	a8 f3       	brcs	.-22     	; 0x32a4 <vfprintf+0x194>
    32ba:	0e c0       	rjmp	.+28     	; 0x32d8 <vfprintf+0x1c8>
    32bc:	f6 01       	movw	r30, r12
    32be:	f7 fc       	sbrc	r15, 7
    32c0:	85 91       	lpm	r24, Z+
    32c2:	f7 fe       	sbrs	r15, 7
    32c4:	81 91       	ld	r24, Z+
    32c6:	6f 01       	movw	r12, r30
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	b3 01       	movw	r22, r6
    32cc:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <fputc>
    32d0:	e1 10       	cpse	r14, r1
    32d2:	ea 94       	dec	r14
    32d4:	01 50       	subi	r16, 0x01	; 1
    32d6:	10 40       	sbci	r17, 0x00	; 0
    32d8:	01 15       	cp	r16, r1
    32da:	11 05       	cpc	r17, r1
    32dc:	79 f7       	brne	.-34     	; 0x32bc <vfprintf+0x1ac>
    32de:	ea c0       	rjmp	.+468    	; 0x34b4 <vfprintf+0x3a4>
    32e0:	94 36       	cpi	r25, 0x64	; 100
    32e2:	11 f0       	breq	.+4      	; 0x32e8 <vfprintf+0x1d8>
    32e4:	99 36       	cpi	r25, 0x69	; 105
    32e6:	69 f5       	brne	.+90     	; 0x3342 <vfprintf+0x232>
    32e8:	f7 fe       	sbrs	r15, 7
    32ea:	08 c0       	rjmp	.+16     	; 0x32fc <vfprintf+0x1ec>
    32ec:	f5 01       	movw	r30, r10
    32ee:	20 81       	ld	r18, Z
    32f0:	31 81       	ldd	r19, Z+1	; 0x01
    32f2:	42 81       	ldd	r20, Z+2	; 0x02
    32f4:	53 81       	ldd	r21, Z+3	; 0x03
    32f6:	84 e0       	ldi	r24, 0x04	; 4
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	0a c0       	rjmp	.+20     	; 0x3310 <vfprintf+0x200>
    32fc:	f5 01       	movw	r30, r10
    32fe:	80 81       	ld	r24, Z
    3300:	91 81       	ldd	r25, Z+1	; 0x01
    3302:	9c 01       	movw	r18, r24
    3304:	44 27       	eor	r20, r20
    3306:	37 fd       	sbrc	r19, 7
    3308:	40 95       	com	r20
    330a:	54 2f       	mov	r21, r20
    330c:	82 e0       	ldi	r24, 0x02	; 2
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	a8 0e       	add	r10, r24
    3312:	b9 1e       	adc	r11, r25
    3314:	9f e6       	ldi	r25, 0x6F	; 111
    3316:	f9 22       	and	r15, r25
    3318:	57 ff       	sbrs	r21, 7
    331a:	09 c0       	rjmp	.+18     	; 0x332e <vfprintf+0x21e>
    331c:	50 95       	com	r21
    331e:	40 95       	com	r20
    3320:	30 95       	com	r19
    3322:	21 95       	neg	r18
    3324:	3f 4f       	sbci	r19, 0xFF	; 255
    3326:	4f 4f       	sbci	r20, 0xFF	; 255
    3328:	5f 4f       	sbci	r21, 0xFF	; 255
    332a:	e0 e8       	ldi	r30, 0x80	; 128
    332c:	fe 2a       	or	r15, r30
    332e:	ca 01       	movw	r24, r20
    3330:	b9 01       	movw	r22, r18
    3332:	a1 01       	movw	r20, r2
    3334:	2a e0       	ldi	r18, 0x0A	; 10
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	0e 94 a7 1a 	call	0x354e	; 0x354e <__ultoa_invert>
    333c:	d8 2e       	mov	r13, r24
    333e:	d2 18       	sub	r13, r2
    3340:	40 c0       	rjmp	.+128    	; 0x33c2 <vfprintf+0x2b2>
    3342:	95 37       	cpi	r25, 0x75	; 117
    3344:	29 f4       	brne	.+10     	; 0x3350 <vfprintf+0x240>
    3346:	1f 2d       	mov	r17, r15
    3348:	1f 7e       	andi	r17, 0xEF	; 239
    334a:	2a e0       	ldi	r18, 0x0A	; 10
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	1d c0       	rjmp	.+58     	; 0x338a <vfprintf+0x27a>
    3350:	1f 2d       	mov	r17, r15
    3352:	19 7f       	andi	r17, 0xF9	; 249
    3354:	9f 36       	cpi	r25, 0x6F	; 111
    3356:	61 f0       	breq	.+24     	; 0x3370 <vfprintf+0x260>
    3358:	90 37       	cpi	r25, 0x70	; 112
    335a:	20 f4       	brcc	.+8      	; 0x3364 <vfprintf+0x254>
    335c:	98 35       	cpi	r25, 0x58	; 88
    335e:	09 f0       	breq	.+2      	; 0x3362 <vfprintf+0x252>
    3360:	ac c0       	rjmp	.+344    	; 0x34ba <vfprintf+0x3aa>
    3362:	0f c0       	rjmp	.+30     	; 0x3382 <vfprintf+0x272>
    3364:	90 37       	cpi	r25, 0x70	; 112
    3366:	39 f0       	breq	.+14     	; 0x3376 <vfprintf+0x266>
    3368:	98 37       	cpi	r25, 0x78	; 120
    336a:	09 f0       	breq	.+2      	; 0x336e <vfprintf+0x25e>
    336c:	a6 c0       	rjmp	.+332    	; 0x34ba <vfprintf+0x3aa>
    336e:	04 c0       	rjmp	.+8      	; 0x3378 <vfprintf+0x268>
    3370:	28 e0       	ldi	r18, 0x08	; 8
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	0a c0       	rjmp	.+20     	; 0x338a <vfprintf+0x27a>
    3376:	10 61       	ori	r17, 0x10	; 16
    3378:	14 fd       	sbrc	r17, 4
    337a:	14 60       	ori	r17, 0x04	; 4
    337c:	20 e1       	ldi	r18, 0x10	; 16
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	04 c0       	rjmp	.+8      	; 0x338a <vfprintf+0x27a>
    3382:	14 fd       	sbrc	r17, 4
    3384:	16 60       	ori	r17, 0x06	; 6
    3386:	20 e1       	ldi	r18, 0x10	; 16
    3388:	32 e0       	ldi	r19, 0x02	; 2
    338a:	17 ff       	sbrs	r17, 7
    338c:	08 c0       	rjmp	.+16     	; 0x339e <vfprintf+0x28e>
    338e:	f5 01       	movw	r30, r10
    3390:	60 81       	ld	r22, Z
    3392:	71 81       	ldd	r23, Z+1	; 0x01
    3394:	82 81       	ldd	r24, Z+2	; 0x02
    3396:	93 81       	ldd	r25, Z+3	; 0x03
    3398:	44 e0       	ldi	r20, 0x04	; 4
    339a:	50 e0       	ldi	r21, 0x00	; 0
    339c:	08 c0       	rjmp	.+16     	; 0x33ae <vfprintf+0x29e>
    339e:	f5 01       	movw	r30, r10
    33a0:	80 81       	ld	r24, Z
    33a2:	91 81       	ldd	r25, Z+1	; 0x01
    33a4:	bc 01       	movw	r22, r24
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	42 e0       	ldi	r20, 0x02	; 2
    33ac:	50 e0       	ldi	r21, 0x00	; 0
    33ae:	a4 0e       	add	r10, r20
    33b0:	b5 1e       	adc	r11, r21
    33b2:	a1 01       	movw	r20, r2
    33b4:	0e 94 a7 1a 	call	0x354e	; 0x354e <__ultoa_invert>
    33b8:	d8 2e       	mov	r13, r24
    33ba:	d2 18       	sub	r13, r2
    33bc:	8f e7       	ldi	r24, 0x7F	; 127
    33be:	f8 2e       	mov	r15, r24
    33c0:	f1 22       	and	r15, r17
    33c2:	f6 fe       	sbrs	r15, 6
    33c4:	0b c0       	rjmp	.+22     	; 0x33dc <vfprintf+0x2cc>
    33c6:	5e ef       	ldi	r21, 0xFE	; 254
    33c8:	f5 22       	and	r15, r21
    33ca:	d9 14       	cp	r13, r9
    33cc:	38 f4       	brcc	.+14     	; 0x33dc <vfprintf+0x2cc>
    33ce:	f4 fe       	sbrs	r15, 4
    33d0:	07 c0       	rjmp	.+14     	; 0x33e0 <vfprintf+0x2d0>
    33d2:	f2 fc       	sbrc	r15, 2
    33d4:	05 c0       	rjmp	.+10     	; 0x33e0 <vfprintf+0x2d0>
    33d6:	8f ee       	ldi	r24, 0xEF	; 239
    33d8:	f8 22       	and	r15, r24
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <vfprintf+0x2d0>
    33dc:	1d 2d       	mov	r17, r13
    33de:	01 c0       	rjmp	.+2      	; 0x33e2 <vfprintf+0x2d2>
    33e0:	19 2d       	mov	r17, r9
    33e2:	f4 fe       	sbrs	r15, 4
    33e4:	0d c0       	rjmp	.+26     	; 0x3400 <vfprintf+0x2f0>
    33e6:	fe 01       	movw	r30, r28
    33e8:	ed 0d       	add	r30, r13
    33ea:	f1 1d       	adc	r31, r1
    33ec:	80 81       	ld	r24, Z
    33ee:	80 33       	cpi	r24, 0x30	; 48
    33f0:	19 f4       	brne	.+6      	; 0x33f8 <vfprintf+0x2e8>
    33f2:	99 ee       	ldi	r25, 0xE9	; 233
    33f4:	f9 22       	and	r15, r25
    33f6:	08 c0       	rjmp	.+16     	; 0x3408 <vfprintf+0x2f8>
    33f8:	1f 5f       	subi	r17, 0xFF	; 255
    33fa:	f2 fe       	sbrs	r15, 2
    33fc:	05 c0       	rjmp	.+10     	; 0x3408 <vfprintf+0x2f8>
    33fe:	03 c0       	rjmp	.+6      	; 0x3406 <vfprintf+0x2f6>
    3400:	8f 2d       	mov	r24, r15
    3402:	86 78       	andi	r24, 0x86	; 134
    3404:	09 f0       	breq	.+2      	; 0x3408 <vfprintf+0x2f8>
    3406:	1f 5f       	subi	r17, 0xFF	; 255
    3408:	0f 2d       	mov	r16, r15
    340a:	f3 fc       	sbrc	r15, 3
    340c:	14 c0       	rjmp	.+40     	; 0x3436 <vfprintf+0x326>
    340e:	f0 fe       	sbrs	r15, 0
    3410:	0f c0       	rjmp	.+30     	; 0x3430 <vfprintf+0x320>
    3412:	1e 15       	cp	r17, r14
    3414:	10 f0       	brcs	.+4      	; 0x341a <vfprintf+0x30a>
    3416:	9d 2c       	mov	r9, r13
    3418:	0b c0       	rjmp	.+22     	; 0x3430 <vfprintf+0x320>
    341a:	9d 2c       	mov	r9, r13
    341c:	9e 0c       	add	r9, r14
    341e:	91 1a       	sub	r9, r17
    3420:	1e 2d       	mov	r17, r14
    3422:	06 c0       	rjmp	.+12     	; 0x3430 <vfprintf+0x320>
    3424:	80 e2       	ldi	r24, 0x20	; 32
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	b3 01       	movw	r22, r6
    342a:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <fputc>
    342e:	1f 5f       	subi	r17, 0xFF	; 255
    3430:	1e 15       	cp	r17, r14
    3432:	c0 f3       	brcs	.-16     	; 0x3424 <vfprintf+0x314>
    3434:	04 c0       	rjmp	.+8      	; 0x343e <vfprintf+0x32e>
    3436:	1e 15       	cp	r17, r14
    3438:	10 f4       	brcc	.+4      	; 0x343e <vfprintf+0x32e>
    343a:	e1 1a       	sub	r14, r17
    343c:	01 c0       	rjmp	.+2      	; 0x3440 <vfprintf+0x330>
    343e:	ee 24       	eor	r14, r14
    3440:	04 ff       	sbrs	r16, 4
    3442:	0f c0       	rjmp	.+30     	; 0x3462 <vfprintf+0x352>
    3444:	80 e3       	ldi	r24, 0x30	; 48
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	b3 01       	movw	r22, r6
    344a:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <fputc>
    344e:	02 ff       	sbrs	r16, 2
    3450:	1d c0       	rjmp	.+58     	; 0x348c <vfprintf+0x37c>
    3452:	01 fd       	sbrc	r16, 1
    3454:	03 c0       	rjmp	.+6      	; 0x345c <vfprintf+0x34c>
    3456:	88 e7       	ldi	r24, 0x78	; 120
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	0e c0       	rjmp	.+28     	; 0x3478 <vfprintf+0x368>
    345c:	88 e5       	ldi	r24, 0x58	; 88
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	0b c0       	rjmp	.+22     	; 0x3478 <vfprintf+0x368>
    3462:	80 2f       	mov	r24, r16
    3464:	86 78       	andi	r24, 0x86	; 134
    3466:	91 f0       	breq	.+36     	; 0x348c <vfprintf+0x37c>
    3468:	01 ff       	sbrs	r16, 1
    346a:	02 c0       	rjmp	.+4      	; 0x3470 <vfprintf+0x360>
    346c:	8b e2       	ldi	r24, 0x2B	; 43
    346e:	01 c0       	rjmp	.+2      	; 0x3472 <vfprintf+0x362>
    3470:	80 e2       	ldi	r24, 0x20	; 32
    3472:	f7 fc       	sbrc	r15, 7
    3474:	8d e2       	ldi	r24, 0x2D	; 45
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	b3 01       	movw	r22, r6
    347a:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <fputc>
    347e:	06 c0       	rjmp	.+12     	; 0x348c <vfprintf+0x37c>
    3480:	80 e3       	ldi	r24, 0x30	; 48
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	b3 01       	movw	r22, r6
    3486:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <fputc>
    348a:	9a 94       	dec	r9
    348c:	d9 14       	cp	r13, r9
    348e:	c0 f3       	brcs	.-16     	; 0x3480 <vfprintf+0x370>
    3490:	da 94       	dec	r13
    3492:	f1 01       	movw	r30, r2
    3494:	ed 0d       	add	r30, r13
    3496:	f1 1d       	adc	r31, r1
    3498:	80 81       	ld	r24, Z
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	b3 01       	movw	r22, r6
    349e:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <fputc>
    34a2:	dd 20       	and	r13, r13
    34a4:	a9 f7       	brne	.-22     	; 0x3490 <vfprintf+0x380>
    34a6:	06 c0       	rjmp	.+12     	; 0x34b4 <vfprintf+0x3a4>
    34a8:	80 e2       	ldi	r24, 0x20	; 32
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	b3 01       	movw	r22, r6
    34ae:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <fputc>
    34b2:	ea 94       	dec	r14
    34b4:	ee 20       	and	r14, r14
    34b6:	c1 f7       	brne	.-16     	; 0x34a8 <vfprintf+0x398>
    34b8:	43 ce       	rjmp	.-890    	; 0x3140 <vfprintf+0x30>
    34ba:	f3 01       	movw	r30, r6
    34bc:	66 81       	ldd	r22, Z+6	; 0x06
    34be:	77 81       	ldd	r23, Z+7	; 0x07
    34c0:	cb 01       	movw	r24, r22
    34c2:	2b 96       	adiw	r28, 0x0b	; 11
    34c4:	e2 e1       	ldi	r30, 0x12	; 18
    34c6:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__>

000034ca <strnlen_P>:
    34ca:	fc 01       	movw	r30, r24
    34cc:	05 90       	lpm	r0, Z+
    34ce:	61 50       	subi	r22, 0x01	; 1
    34d0:	70 40       	sbci	r23, 0x00	; 0
    34d2:	01 10       	cpse	r0, r1
    34d4:	d8 f7       	brcc	.-10     	; 0x34cc <strnlen_P+0x2>
    34d6:	80 95       	com	r24
    34d8:	90 95       	com	r25
    34da:	8e 0f       	add	r24, r30
    34dc:	9f 1f       	adc	r25, r31
    34de:	08 95       	ret

000034e0 <strnlen>:
    34e0:	fc 01       	movw	r30, r24
    34e2:	61 50       	subi	r22, 0x01	; 1
    34e4:	70 40       	sbci	r23, 0x00	; 0
    34e6:	01 90       	ld	r0, Z+
    34e8:	01 10       	cpse	r0, r1
    34ea:	d8 f7       	brcc	.-10     	; 0x34e2 <strnlen+0x2>
    34ec:	80 95       	com	r24
    34ee:	90 95       	com	r25
    34f0:	8e 0f       	add	r24, r30
    34f2:	9f 1f       	adc	r25, r31
    34f4:	08 95       	ret

000034f6 <fputc>:
    34f6:	0f 93       	push	r16
    34f8:	1f 93       	push	r17
    34fa:	cf 93       	push	r28
    34fc:	df 93       	push	r29
    34fe:	8c 01       	movw	r16, r24
    3500:	eb 01       	movw	r28, r22
    3502:	8b 81       	ldd	r24, Y+3	; 0x03
    3504:	81 ff       	sbrs	r24, 1
    3506:	1b c0       	rjmp	.+54     	; 0x353e <fputc+0x48>
    3508:	82 ff       	sbrs	r24, 2
    350a:	0d c0       	rjmp	.+26     	; 0x3526 <fputc+0x30>
    350c:	2e 81       	ldd	r18, Y+6	; 0x06
    350e:	3f 81       	ldd	r19, Y+7	; 0x07
    3510:	8c 81       	ldd	r24, Y+4	; 0x04
    3512:	9d 81       	ldd	r25, Y+5	; 0x05
    3514:	28 17       	cp	r18, r24
    3516:	39 07       	cpc	r19, r25
    3518:	64 f4       	brge	.+24     	; 0x3532 <fputc+0x3c>
    351a:	e8 81       	ld	r30, Y
    351c:	f9 81       	ldd	r31, Y+1	; 0x01
    351e:	01 93       	st	Z+, r16
    3520:	f9 83       	std	Y+1, r31	; 0x01
    3522:	e8 83       	st	Y, r30
    3524:	06 c0       	rjmp	.+12     	; 0x3532 <fputc+0x3c>
    3526:	e8 85       	ldd	r30, Y+8	; 0x08
    3528:	f9 85       	ldd	r31, Y+9	; 0x09
    352a:	80 2f       	mov	r24, r16
    352c:	09 95       	icall
    352e:	89 2b       	or	r24, r25
    3530:	31 f4       	brne	.+12     	; 0x353e <fputc+0x48>
    3532:	8e 81       	ldd	r24, Y+6	; 0x06
    3534:	9f 81       	ldd	r25, Y+7	; 0x07
    3536:	01 96       	adiw	r24, 0x01	; 1
    3538:	9f 83       	std	Y+7, r25	; 0x07
    353a:	8e 83       	std	Y+6, r24	; 0x06
    353c:	02 c0       	rjmp	.+4      	; 0x3542 <fputc+0x4c>
    353e:	0f ef       	ldi	r16, 0xFF	; 255
    3540:	1f ef       	ldi	r17, 0xFF	; 255
    3542:	c8 01       	movw	r24, r16
    3544:	df 91       	pop	r29
    3546:	cf 91       	pop	r28
    3548:	1f 91       	pop	r17
    354a:	0f 91       	pop	r16
    354c:	08 95       	ret

0000354e <__ultoa_invert>:
    354e:	fa 01       	movw	r30, r20
    3550:	aa 27       	eor	r26, r26
    3552:	28 30       	cpi	r18, 0x08	; 8
    3554:	51 f1       	breq	.+84     	; 0x35aa <__ultoa_invert+0x5c>
    3556:	20 31       	cpi	r18, 0x10	; 16
    3558:	81 f1       	breq	.+96     	; 0x35ba <__ultoa_invert+0x6c>
    355a:	e8 94       	clt
    355c:	6f 93       	push	r22
    355e:	6e 7f       	andi	r22, 0xFE	; 254
    3560:	6e 5f       	subi	r22, 0xFE	; 254
    3562:	7f 4f       	sbci	r23, 0xFF	; 255
    3564:	8f 4f       	sbci	r24, 0xFF	; 255
    3566:	9f 4f       	sbci	r25, 0xFF	; 255
    3568:	af 4f       	sbci	r26, 0xFF	; 255
    356a:	b1 e0       	ldi	r27, 0x01	; 1
    356c:	3e d0       	rcall	.+124    	; 0x35ea <__ultoa_invert+0x9c>
    356e:	b4 e0       	ldi	r27, 0x04	; 4
    3570:	3c d0       	rcall	.+120    	; 0x35ea <__ultoa_invert+0x9c>
    3572:	67 0f       	add	r22, r23
    3574:	78 1f       	adc	r23, r24
    3576:	89 1f       	adc	r24, r25
    3578:	9a 1f       	adc	r25, r26
    357a:	a1 1d       	adc	r26, r1
    357c:	68 0f       	add	r22, r24
    357e:	79 1f       	adc	r23, r25
    3580:	8a 1f       	adc	r24, r26
    3582:	91 1d       	adc	r25, r1
    3584:	a1 1d       	adc	r26, r1
    3586:	6a 0f       	add	r22, r26
    3588:	71 1d       	adc	r23, r1
    358a:	81 1d       	adc	r24, r1
    358c:	91 1d       	adc	r25, r1
    358e:	a1 1d       	adc	r26, r1
    3590:	20 d0       	rcall	.+64     	; 0x35d2 <__ultoa_invert+0x84>
    3592:	09 f4       	brne	.+2      	; 0x3596 <__ultoa_invert+0x48>
    3594:	68 94       	set
    3596:	3f 91       	pop	r19
    3598:	2a e0       	ldi	r18, 0x0A	; 10
    359a:	26 9f       	mul	r18, r22
    359c:	11 24       	eor	r1, r1
    359e:	30 19       	sub	r19, r0
    35a0:	30 5d       	subi	r19, 0xD0	; 208
    35a2:	31 93       	st	Z+, r19
    35a4:	de f6       	brtc	.-74     	; 0x355c <__ultoa_invert+0xe>
    35a6:	cf 01       	movw	r24, r30
    35a8:	08 95       	ret
    35aa:	46 2f       	mov	r20, r22
    35ac:	47 70       	andi	r20, 0x07	; 7
    35ae:	40 5d       	subi	r20, 0xD0	; 208
    35b0:	41 93       	st	Z+, r20
    35b2:	b3 e0       	ldi	r27, 0x03	; 3
    35b4:	0f d0       	rcall	.+30     	; 0x35d4 <__ultoa_invert+0x86>
    35b6:	c9 f7       	brne	.-14     	; 0x35aa <__ultoa_invert+0x5c>
    35b8:	f6 cf       	rjmp	.-20     	; 0x35a6 <__ultoa_invert+0x58>
    35ba:	46 2f       	mov	r20, r22
    35bc:	4f 70       	andi	r20, 0x0F	; 15
    35be:	40 5d       	subi	r20, 0xD0	; 208
    35c0:	4a 33       	cpi	r20, 0x3A	; 58
    35c2:	18 f0       	brcs	.+6      	; 0x35ca <__ultoa_invert+0x7c>
    35c4:	49 5d       	subi	r20, 0xD9	; 217
    35c6:	31 fd       	sbrc	r19, 1
    35c8:	40 52       	subi	r20, 0x20	; 32
    35ca:	41 93       	st	Z+, r20
    35cc:	02 d0       	rcall	.+4      	; 0x35d2 <__ultoa_invert+0x84>
    35ce:	a9 f7       	brne	.-22     	; 0x35ba <__ultoa_invert+0x6c>
    35d0:	ea cf       	rjmp	.-44     	; 0x35a6 <__ultoa_invert+0x58>
    35d2:	b4 e0       	ldi	r27, 0x04	; 4
    35d4:	a6 95       	lsr	r26
    35d6:	97 95       	ror	r25
    35d8:	87 95       	ror	r24
    35da:	77 95       	ror	r23
    35dc:	67 95       	ror	r22
    35de:	ba 95       	dec	r27
    35e0:	c9 f7       	brne	.-14     	; 0x35d4 <__ultoa_invert+0x86>
    35e2:	00 97       	sbiw	r24, 0x00	; 0
    35e4:	61 05       	cpc	r22, r1
    35e6:	71 05       	cpc	r23, r1
    35e8:	08 95       	ret
    35ea:	9b 01       	movw	r18, r22
    35ec:	ac 01       	movw	r20, r24
    35ee:	0a 2e       	mov	r0, r26
    35f0:	06 94       	lsr	r0
    35f2:	57 95       	ror	r21
    35f4:	47 95       	ror	r20
    35f6:	37 95       	ror	r19
    35f8:	27 95       	ror	r18
    35fa:	ba 95       	dec	r27
    35fc:	c9 f7       	brne	.-14     	; 0x35f0 <__ultoa_invert+0xa2>
    35fe:	62 0f       	add	r22, r18
    3600:	73 1f       	adc	r23, r19
    3602:	84 1f       	adc	r24, r20
    3604:	95 1f       	adc	r25, r21
    3606:	a0 1d       	adc	r26, r0
    3608:	08 95       	ret

0000360a <_exit>:
    360a:	f8 94       	cli

0000360c <__stop_program>:
    360c:	ff cf       	rjmp	.-2      	; 0x360c <__stop_program>
